{
  "address": "0x4E51d1e61525de28C6251964d2a89E2156eCd4B3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FarmingPoolStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FarmingPoolStopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basicFurionPerSecond",
          "type": "uint256"
        }
      ],
      "name": "FurionRewardChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pendingReward",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basicFurionPerSecond",
          "type": "uint256"
        }
      ],
      "name": "NewPoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accFurionPerShare",
          "type": "uint256"
        }
      ],
      "name": "PoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        }
      ],
      "name": "StartTimestampChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_nextPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_basicFurionPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "furion",
      "outputs": [
        {
          "internalType": "contract IFurionToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "basicFurionPerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accFurionPerShare",
              "type": "uint256"
            }
          ],
          "internalType": "struct FarmingPoolUpgradeable.PoolInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_furion",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isFarming",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingFurion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolList",
      "outputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "basicFurionPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accFurionPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_basicFurionPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "setFurionReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_poolId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_basicFurionPerSecond",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "setFurionRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setStartTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x808c6101bf3ee8dde77d7b24d364451b02c29d509930e43bb61d7244631a26ee",
  "receipt": {
    "to": null,
    "from": "0xA10f8ecb4d91Ae5CA3291d0bFF159bd5F882A5f5",
    "contractAddress": "0x4E51d1e61525de28C6251964d2a89E2156eCd4B3",
    "transactionIndex": 16,
    "gasUsed": "2203637",
    "logsBloom": "0x
    "blockHash": "0xf61dfe5515de84f2ede45176c86181ac0ab46283f9f2bac843d34b5f2f7444c4",
    "transactionHash": "0x808c6101bf3ee8dde77d7b24d364451b02c29d509930e43bb61d7244631a26ee",
    "logs": [],
    "blockNumber": 11402868,
    "cumulativeGasUsed": "3370668",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3ae3d98b77f9dd7e4a4c56d163308f7b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FarmingPoolStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FarmingPoolStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basicFurionPerSecond\",\"type\":\"uint256\"}],\"name\":\"FurionRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basicFurionPerSecond\",\"type\":\"uint256\"}],\"name\":\"NewPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accFurionPerShare\",\"type\":\"uint256\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"}],\"name\":\"StartTimestampChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nextPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_basicFurionPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"furion\",\"outputs\":[{\"internalType\":\"contract IFurionToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basicFurionPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accFurionPerShare\",\"type\":\"uint256\"}],\"internalType\":\"struct FarmingPoolUpgradeable.PoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_furion\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isFarming\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingFurion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basicFurionPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accFurionPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basicFurionPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setFurionReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_poolId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_basicFurionPerSecond\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setFurionRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"}],\"name\":\"setStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(address,uint256,bool)\":{\"details\":\"Can only be called by the owner      The reward speed can be 0 and set later by setFurionReward function\",\"params\":{\"_basicFurionPerSecond\":\"Basic reward speed(per second) for this new pool\",\"_lpToken\":\"LP token address\",\"_withUpdate\":\"Whether update all pools' status\"}},\"getPoolList()\":{\"returns\":{\"_0\":\"pooList Total pool list\"}},\"getUserBalance(uint256,address)\":{\"params\":{\"_poolId\":\"Id of the pool\",\"_user\":\"User address\"},\"returns\":{\"_0\":\"balance User's balance (lpToken)\"}},\"harvest(uint256,address)\":{\"params\":{\"_poolId\":\"Id of the farming pool\",\"_to\":\"Receiver of Furion rewards\"}},\"massUpdatePools()\":{\"details\":\"Can be called by anyone      Only update those active pools\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingFurion(uint256,address)\":{\"params\":{\"_poolId\":\"PoolId of this farming pool\",\"_user\":\"User address\"},\"returns\":{\"_0\":\"pendingFurionAmount Amount of pending Furion\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFurionReward(uint256,uint256,bool)\":{\"params\":{\"_basicFurionPerSecond\":\"New basic reward amount per second\",\"_poolId\":\"Id of the farming pool\",\"_withUpdate\":\"Whether update all pools\"}},\"setFurionRewards(uint256[],uint256[],bool)\":{\"params\":{\"_basicFurionPerSecond\":\"New basic reward amount per second\",\"_poolId\":\"Id collection of the farming pool\",\"_withUpdate\":\"Whether update all pools\"}},\"setStartTimestamp(uint256)\":{\"params\":{\"_startTimestamp\":\"New start block timestamp\"}},\"stake(uint256,uint256)\":{\"details\":\"Can only stake to the pools that are still farming\",\"params\":{\"_amount\":\"Staking amount\",\"_poolId\":\"Id of the farming pool\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePool(uint256)\":{\"params\":{\"_poolId\":\"Id of the farming pool\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of lp tokens to withdraw\",\"_poolId\":\"Id of the farming pool\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(address,uint256,bool)\":{\"notice\":\"Add a new lp into the pool\"},\"getPoolList()\":{\"notice\":\"Get the total pool list\"},\"getUserBalance(uint256,address)\":{\"notice\":\"Get a user's balance\"},\"harvest(uint256,address)\":{\"notice\":\"Harvest the Furion reward and can be sent to another address\"},\"massUpdatePools()\":{\"notice\":\"Update all farming pools (except for those stopped ones)\"},\"pendingFurion(uint256,address)\":{\"notice\":\"Check the amount of pending Furion reward\"},\"setFurionReward(uint256,uint256,bool)\":{\"notice\":\"Update the FurionPerSecond for a specific pool (set to 0 to stop farming)\"},\"setFurionRewards(uint256[],uint256[],bool)\":{\"notice\":\"Update the FurionPerSecond for a bundle of pools (used for daily updating farming rate)\"},\"setStartTimestamp(uint256)\":{\"notice\":\"Set the start block timestamp\"},\"stake(uint256,uint256)\":{\"notice\":\"Stake LP token into the farming pool\"},\"updatePool(uint256)\":{\"notice\":\"Update the pool's reward status\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw lptoken from the pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/furion-farming/FarmingPoolUpgradeable.sol\":\"FarmingPoolUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/furion-farming/FarmingPoolUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IFurionToken} from \\\"../tokens/interfaces/IFurionToken.sol\\\";\\nimport {Math} from \\\"../libraries/Math.sol\\\";\\n\\n/*\\n//===================================//\\n ______ _   _______ _____ _____ _   _ \\n |  ___| | | | ___ \\\\_   _|  _  | \\\\ | |\\n | |_  | | | | |_/ / | | | | | |  \\\\| |\\n |  _| | | | |    /  | | | | | | . ` |\\n | |   | |_| | |\\\\ \\\\ _| |_\\\\ \\\\_/ / |\\\\  |\\n \\\\_|    \\\\___/\\\\_| \\\\_|\\\\___/ \\\\___/\\\\_| \\\\_/\\n//===================================//\\n* /\\n\\n/**\\n * @title  Farming Pool\\n * @notice This contract is for LPToken mining on Furion\\n * @dev    The pool id starts from 1 rather than 0\\n *         The Furion reward is calculated by timestamp rather than block number\\n *         This is one upgradeable version\\n */\\n\\ncontract FarmingPoolUpgradeable is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IFurionToken;\\n    using Math for uint256;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    string public constant name = \\\"Furion LP Farming Pool\\\";\\n\\n    // The reward token is Furion\\n    IFurionToken public furion;\\n\\n    // SCALE/Precision used for calculating rewards\\n    uint256 public constant SCALE = 1e12;\\n\\n    // PoolId starts from 1\\n    uint256 public _nextPoolId;\\n\\n    // Farming starts from a certain block timestamp\\n    uint256 public startTimestamp;\\n\\n    struct PoolInfo {\\n        address lpToken; // LPToken address\\n        uint256 basicFurionPerSecond; // Basic Reward speed\\n        uint256 lastRewardTimestamp; // Last reward timestamp\\n        uint256 accFurionPerShare; // Accumulated Furion per share\\n    }\\n    PoolInfo[] public poolList;\\n\\n    // lptoken address => poolId\\n    mapping(address => uint256) public poolMapping;\\n\\n    // poolId => is farming or not\\n    mapping(uint256 => bool) public isFarming;\\n\\n    struct UserInfo {\\n        uint256 rewardDebt; // Furion reward debt\\n        uint256 stakingBalance; // the amount of a user's staking in the pool\\n    }\\n\\n    // poolId => userAddress => userInfo\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event StartTimestampChanged(uint256 startTimestamp);\\n    event Stake(address staker, uint256 poolId, uint256 amount);\\n    event Withdraw(address staker, uint256 poolId, uint256 amount);\\n    event Harvest(\\n        address staker,\\n        address rewardReceiver,\\n        uint256 poolId,\\n        uint256 pendingReward\\n    );\\n\\n    event NewPoolAdded(address lpToken, uint256 basicFurionPerSecond);\\n    event FarmingPoolStarted(uint256 poolId, uint256 timestamp);\\n    event FarmingPoolStopped(uint256 poolId, uint256 timestamp);\\n    event FurionRewardChanged(uint256 poolId, uint256 basicFurionPerSecond);\\n    event PoolUpdated(uint256 poolId, uint256 accFurionPerShare);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function initialize(address _furion) public initializer {\\n        require(_furion != address(0), \\\"FARMING_POOL: ZERO_ADDRESS\\\");\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        furion = IFurionToken(_furion);\\n\\n        // Start from 1\\n        _nextPoolId = 1;\\n\\n        poolList.push(\\n            PoolInfo({\\n                lpToken: address(0),\\n                basicFurionPerSecond: 0,\\n                lastRewardTimestamp: 0,\\n                accFurionPerShare: 0\\n            })\\n        );\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice The address can not be zero\\n     */\\n    modifier notZeroAddress(address _address) {\\n        require(_address != address(0), \\\"FARMING_POOL: ZERO_ADDRESS\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice The pool is still in farming\\n     */\\n    modifier stillFarming(uint256 _poolId) {\\n        require(isFarming[_poolId], \\\"FARMING_POOL: POOL_NOT_FARMING\\\");\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Main Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Add a new lp into the pool\\n     * @dev Can only be called by the owner\\n     *      The reward speed can be 0 and set later by setFurionReward function\\n     * @param _lpToken LP token address\\n     * @param _basicFurionPerSecond Basic reward speed(per second) for this new pool\\n     * @param _withUpdate Whether update all pools' status\\n     */\\n    function add(\\n        address _lpToken,\\n        uint256 _basicFurionPerSecond,\\n        bool _withUpdate\\n    ) public notZeroAddress(_lpToken) onlyOwner whenNotPaused {\\n        // Check if already exists, if the poolId is 0, that means not in the pool\\n        require(!_alreadyInPool(_lpToken), \\\"FARMING_POOL: ALREADY_IN_POOL\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\n            ? block.timestamp\\n            : startTimestamp;\\n\\n        // Push this new pool into the list\\n        poolList.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                basicFurionPerSecond: _basicFurionPerSecond,\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accFurionPerShare: 0\\n            })\\n        );\\n\\n        // Store the poolId and set the farming status to true\\n        if (_basicFurionPerSecond > 0) isFarming[_nextPoolId] = true;\\n\\n        poolMapping[_lpToken] = _nextPoolId++;\\n\\n        emit NewPoolAdded(_lpToken, _basicFurionPerSecond);\\n    }\\n\\n    /**\\n     * @notice Update the FurionPerSecond for a specific pool (set to 0 to stop farming)\\n     * @param _poolId Id of the farming pool\\n     * @param _basicFurionPerSecond New basic reward amount per second\\n     * @param _withUpdate Whether update all pools\\n     */\\n    function setFurionReward(\\n        uint256 _poolId,\\n        uint256 _basicFurionPerSecond,\\n        bool _withUpdate\\n    ) public onlyOwner whenNotPaused {\\n        // Ensure there already exists this pool\\n        require(\\n            poolList[_poolId].lastRewardTimestamp != 0,\\n            \\\"FARMING_POOL: POOL_NOT_EXIST\\\"\\n        );\\n\\n        if (_withUpdate) massUpdatePools();\\n        else updatePool(_poolId);\\n\\n        // Not farming now + reward > 0 => Restart\\n        if (isFarming[_poolId] == false && _basicFurionPerSecond > 0) {\\n            isFarming[_poolId] = true;\\n            emit FarmingPoolStarted(_poolId, block.timestamp);\\n        }\\n\\n        if (_basicFurionPerSecond == 0) {\\n            isFarming[_poolId] = false;\\n            emit FarmingPoolStopped(_poolId, block.timestamp);\\n        } else {\\n            poolList[_poolId].basicFurionPerSecond = _basicFurionPerSecond;\\n            emit FurionRewardChanged(_poolId, _basicFurionPerSecond);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update the FurionPerSecond for a bundle of pools (used for daily updating farming rate)\\n     * @param _poolId Id collection of the farming pool\\n     * @param _basicFurionPerSecond New basic reward amount per second\\n     * @param _withUpdate Whether update all pools\\n     */\\n    function setFurionRewards(\\n        uint256[] calldata _poolId,\\n        uint256[] calldata _basicFurionPerSecond,\\n        bool _withUpdate\\n    ) public onlyOwner whenNotPaused {\\n        uint256 length = _poolId.length;\\n        require(length <= 9, \\\"FARMING_POOL: MORE_THAN_NINE\\\");\\n\\n        for (uint256 i = 0; i < length; ) {\\n            setFurionReward(_poolId[i], _basicFurionPerSecond[i], _withUpdate);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Stake LP token into the farming pool\\n     * @dev Can only stake to the pools that are still farming\\n     * @param _poolId Id of the farming pool\\n     * @param _amount Staking amount\\n     */\\n    function stake(uint256 _poolId, uint256 _amount)\\n        public\\n        nonReentrant\\n        whenNotPaused\\n        stillFarming(_poolId)\\n    {\\n        require(_amount > 0, \\\"FARMING_POOL: STAKE_ZERO\\\");\\n\\n        PoolInfo storage pool = poolList[_poolId];\\n        UserInfo storage user = userInfo[_poolId][msg.sender];\\n\\n        // Must update first\\n        updatePool(_poolId);\\n\\n        // First distribute the reward if exists\\n        if (user.stakingBalance > 0) {\\n            uint256 pending = (user.stakingBalance * pool.accFurionPerShare) /\\n                SCALE -\\n                user.rewardDebt;\\n\\n            // Real reward amount\\n            uint256 reward = _safeFurionTransfer(msg.sender, pending);\\n            emit Harvest(msg.sender, msg.sender, _poolId, reward);\\n        }\\n\\n        // Actual deposit amount\\n        uint256 actualAmount = _safeLPTransfer(\\n            false,\\n            pool.lpToken,\\n            msg.sender,\\n            _amount\\n        );\\n\\n        user.stakingBalance += actualAmount;\\n\\n        user.rewardDebt =\\n            (user.stakingBalance * pool.accFurionPerShare) /\\n            SCALE;\\n\\n        emit Stake(msg.sender, _poolId, actualAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw lptoken from the pool\\n     * @param _poolId Id of the farming pool\\n     * @param _amount Amount of lp tokens to withdraw\\n     */\\n    function withdraw(uint256 _poolId, uint256 _amount)\\n        public\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(_amount > 0, \\\"FARMING_POOL: WITHDRAW_ZERO\\\");\\n\\n        PoolInfo storage pool = poolList[_poolId];\\n        UserInfo storage user = userInfo[_poolId][msg.sender];\\n\\n        require(\\n            user.stakingBalance >= _amount,\\n            \\\"FARMING_POOL: NO_ENOUGH_STAKING_BALANCE\\\"\\n        );\\n\\n        // Update if the pool is still farming\\n        // Users can withdraw even after the pool stopped\\n        if (isFarming[_poolId]) updatePool(_poolId);\\n\\n        uint256 pending = (user.stakingBalance * pool.accFurionPerShare) /\\n            SCALE -\\n            user.rewardDebt;\\n\\n        uint256 reward = _safeFurionTransfer(msg.sender, pending);\\n        emit Harvest(msg.sender, msg.sender, _poolId, reward);\\n\\n        uint256 actualAmount = _safeLPTransfer(\\n            true,\\n            pool.lpToken,\\n            msg.sender,\\n            _amount\\n        );\\n\\n        user.stakingBalance -= actualAmount;\\n\\n        user.rewardDebt =\\n            (user.stakingBalance * pool.accFurionPerShare) /\\n            SCALE;\\n\\n        emit Withdraw(msg.sender, _poolId, actualAmount);\\n    }\\n\\n    /**\\n     * @notice Harvest the Furion reward and can be sent to another address\\n     * @param _poolId Id of the farming pool\\n     * @param _to Receiver of Furion rewards\\n     */\\n    function harvest(uint256 _poolId, address _to)\\n        public\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        // Only update the pool when it is still in farming\\n        if (isFarming[_poolId]) updatePool(_poolId);\\n\\n        PoolInfo memory pool = poolList[_poolId];\\n        UserInfo storage user = userInfo[_poolId][msg.sender];\\n\\n        uint256 pendingReward = (user.stakingBalance * pool.accFurionPerShare) /\\n            SCALE -\\n            user.rewardDebt;\\n\\n        require(pendingReward > 0, \\\"FARMING_POOL: NO_PENDING_REWARD\\\");\\n\\n        // Update the reward debt\\n        user.rewardDebt =\\n            (user.stakingBalance * pool.accFurionPerShare) /\\n            SCALE;\\n\\n        // Transfer the reward\\n        uint256 reward = _safeFurionTransfer(_to, pendingReward);\\n\\n        emit Harvest(msg.sender, _to, _poolId, reward);\\n    }\\n\\n    /**\\n     * @notice Update the pool's reward status\\n     * @param _poolId Id of the farming pool\\n     */\\n    function updatePool(uint256 _poolId) public {\\n        PoolInfo storage pool = poolList[_poolId];\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));\\n\\n        // No LP deposited, then just update the lastRewardTimestamp\\n        if (lpSupply == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 timePassed = block.timestamp - pool.lastRewardTimestamp;\\n\\n        uint256 basicReward = timePassed * pool.basicFurionPerSecond;\\n\\n        pool.accFurionPerShare += (basicReward * SCALE) / lpSupply;\\n\\n        // Don't forget to set the farming pool as minter\\n        furion.mintFurion(address(this), basicReward);\\n\\n        pool.lastRewardTimestamp = block.timestamp;\\n\\n        emit PoolUpdated(_poolId, pool.accFurionPerShare);\\n    }\\n\\n    /**\\n     * @notice Update all farming pools (except for those stopped ones)\\n     * @dev Can be called by anyone\\n     *      Only update those active pools\\n     */\\n    function massUpdatePools() public {\\n        uint256 length = poolList.length;\\n        for (uint256 poolId; poolId < length; poolId++) {\\n            if (isFarming[poolId] == false) continue;\\n            else updatePool(poolId);\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** View Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Check the amount of pending Furion reward\\n     * @param _poolId PoolId of this farming pool\\n     * @param _user User address\\n     * @return pendingFurionAmount Amount of pending Furion\\n     */\\n    function pendingFurion(uint256 _poolId, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo memory poolInfo = poolList[_poolId];\\n\\n        if (\\n            poolInfo.lastRewardTimestamp == 0 ||\\n            block.timestamp < poolInfo.lastRewardTimestamp ||\\n            block.timestamp < startTimestamp\\n        ) return 0;\\n\\n        UserInfo memory user = userInfo[_poolId][_user];\\n\\n        // Total lp token balance\\n        uint256 lpBalance = IERC20(poolInfo.lpToken).balanceOf(address(this));\\n\\n        // Accumulated shares to be calculated\\n        uint256 accFurionPerShare = poolInfo.accFurionPerShare;\\n\\n        if (lpBalance == 0) return 0;\\n        else {\\n            // If the pool is still farming, update the info\\n            if (isFarming[_poolId]) {\\n                // Deigs amount given to this pool\\n                uint256 timePassed = block.timestamp -\\n                    poolInfo.lastRewardTimestamp;\\n                uint256 basicReward = poolInfo.basicFurionPerSecond *\\n                    timePassed;\\n                // Update accFurionPerShare\\n                // LPToken may have different decimals\\n                accFurionPerShare += (basicReward * SCALE) / lpBalance;\\n            }\\n\\n            // If the pool has stopped, not update the info\\n            uint256 pending = (user.stakingBalance * accFurionPerShare) /\\n                SCALE -\\n                user.rewardDebt;\\n\\n            return pending;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the total pool list\\n     * @return pooList Total pool list\\n     */\\n    function getPoolList() external view returns (PoolInfo[] memory) {\\n        return poolList;\\n    }\\n\\n    /**\\n     * @notice Get a user's balance\\n     * @param _poolId Id of the pool\\n     * @param _user User address\\n     * @return balance User's balance (lpToken)\\n     */\\n    function getUserBalance(uint256 _poolId, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return userInfo[_poolId][_user].stakingBalance;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Set Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Set the start block timestamp\\n     * @param _startTimestamp New start block timestamp\\n     */\\n    function setStartTimestamp(uint256 _startTimestamp)\\n        external\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        // Can only be set before any pool is added\\n        require(_nextPoolId == 1, \\\"ALREADY_HAVING_POOLS\\\");\\n\\n        startTimestamp = _startTimestamp;\\n        emit StartTimestampChanged(_startTimestamp);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ********************************** Internal Functions ********************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Check if a lptoken has been added into the pool before\\n     * @dev This can also be written as a modifier\\n     * @param _lpToken LP token address\\n     * @return _isInPool Wether this lp is already in pool\\n     */\\n    function _alreadyInPool(address _lpToken)\\n        internal\\n        view\\n        returns (bool _isInPool)\\n    {\\n        uint256 poolId = poolMapping[_lpToken];\\n\\n        _isInPool = (poolId != 0) ? true : false;\\n    }\\n\\n    /**\\n     * @notice Safe Furion transfer (check if the pool has enough Furion token, if not, transfer balance)\\n     * @param _to User's address\\n     * @param _amount Amount to transfer\\n     */\\n    function _safeFurionTransfer(address _to, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 poolFurionBalance = furion.balanceOf(address(this));\\n        require(poolFurionBalance > 0, \\\"FARMING_POOL: NO_FUR_IN_POOL\\\");\\n\\n        if (_amount > poolFurionBalance) {\\n            furion.safeTransfer(_to, poolFurionBalance);\\n            return (poolFurionBalance);\\n        } else {\\n            furion.safeTransfer(_to, _amount);\\n            return _amount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Finish the transfer of LP Token\\n     * @dev The lp token may have loss during transfer\\n     * @param _out Whether the lp token is out\\n     * @param _lpToken LP token address\\n     * @param _user User address\\n     * @param _amount Amount of lp tokens\\n     */\\n    function _safeLPTransfer(\\n        bool _out,\\n        address _lpToken,\\n        address _user,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        uint256 poolBalanceBefore = IERC20(_lpToken).balanceOf(address(this));\\n\\n        if (_out) IERC20(_lpToken).safeTransfer(_user, _amount);\\n        else IERC20(_lpToken).safeTransferFrom(_user, address(this), _amount);\\n\\n        uint256 poolBalanceAfter = IERC20(_lpToken).balanceOf(address(this));\\n\\n        return\\n            _out\\n                ? poolBalanceBefore - poolBalanceAfter\\n                : poolBalanceAfter - poolBalanceBefore;\\n    }\\n}\\n\",\"keccak256\":\"0x6f896ff5861cf9e6ec38241e5ca15f564b34aceed53187a318673643b74220c1\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nlibrary Math {\\n    uint256 internal constant WAD = 10**18;\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n}\\n\",\"keccak256\":\"0x1a26908dfc7945c33f9f5081da7c73e9ee0e2f3252f2635beb883eae9a6bb1ad\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IFurionToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFurionToken is IERC20, IERC20Permit {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Functions ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n    function CAP() external view returns (uint256);\\n\\n    /**\\n     * @notice Mint Furion native tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be minted\\n     */\\n    function mintFurion(address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Burn Furion native tokens\\n     * @param  _account Receiver's address\\n     * @param  _amount Amount to be burned\\n     */\\n    function burnFurion(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xe82e6d1a6b94bbdcc4780a901ffd244f22706877fc84ffece037e9b58fe323ca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506126f1806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80638da5cb5b116100f9578063c44bef7511610097578063d41dcbea11610071578063d41dcbea14610461578063e6fd48bc14610476578063eced55261461047f578063f2fde38b1461048b57600080fd5b8063c44bef7514610402578063c4d66de814610415578063cdfb6cf31461042857600080fd5b80639c7a8293116100d35780639c7a8293146103a6578063a06ddcb3146103b9578063bcedbe2b146103dc578063c24c016e146103ef57600080fd5b80638da5cb5b14610327578063909ff8281461034c57806393f1a40b1461035f57600080fd5b8063441a3e7011610166578063630b5ba111610140578063630b5ba1146102fc578063715018a6146103045780637b0472f01461030c5780638456cb591461031f57600080fd5b8063441a3e70146102bf57806351eb05a6146102d25780635c975abb146102e557600080fd5b806318fccc76116101a257806318fccc76146102475780632a48235b1461025a5780632c678a3e146102975780633f4ba83a146102b757600080fd5b806306fdde03146101c95780630dec23121461021b57806317fb77de14610230575b600080fd5b6102056040518060400160405280601681526020017f467572696f6e204c50204661726d696e6720506f6f6c0000000000000000000081525081565b6040516102129190612353565b60405180910390f35b61022e6102293660046123b0565b61049e565b005b61023960ca5481565b604051908152602001610212565b61022e6102553660046123f0565b610711565b61026d61026836600461241c565b610917565b604080516001600160a01b0390951685526020850193909352918301526060820152608001610212565b6102396102a5366004612435565b60cd6020526000908152604090205481565b61022e61095b565b61022e6102cd366004612450565b61096d565b61022e6102e036600461241c565b610c2c565b60975460ff165b6040519015158152602001610212565b61022e610de1565b61022e610e25565b61022e61031a366004612450565b610e37565b61022e6110c0565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610212565b60c954610334906001600160a01b031681565b61039161036d3660046123f0565b60cf6020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610212565b61022e6103b43660046124be565b6110d0565b6102ec6103c736600461241c565b60ce6020526000908152604090205460ff1681565b6102396103ea3660046123f0565b611189565b61022e6103fd366004612542565b611381565b61022e61041036600461241c565b611570565b61022e610423366004612435565b61160d565b6102396104363660046123f0565b600091825260cf602090815260408084206001600160a01b0393909316845291905290206001015490565b6104696118a2565b6040516102129190612570565b61023960cb5481565b61023964e8d4a5100081565b61022e610499366004612435565b61192c565b826001600160a01b0381166104fa5760405162461bcd60e51b815260206004820152601a60248201527f4641524d494e475f504f4f4c3a205a45524f5f4144445245535300000000000060448201526064015b60405180910390fd5b6105026119bc565b61050a611a16565b61051384611a69565b156105605760405162461bcd60e51b815260206004820152601d60248201527f4641524d494e475f504f4f4c3a20414c52454144595f494e5f504f4f4c00000060448201526064016104f1565b811561056e5761056e610de1565b600060cb5442116105815760cb54610583565b425b604080516080810182526001600160a01b0388811682526020820188815292820184815260006060840181815260cc8054600181018255925293517f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe6004909202918201805473ffffffffffffffffffffffffffffffffffffffff1916919094161790925592517f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebf82015591517f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ec0830155517f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ec1909101559050831561069f5760ca54600090815260ce60205260409020805460ff191660011790555b60ca80549060006106af836125f3565b909155506001600160a01b038616600081815260cd60209081526040918290209390935580519182529181018690527f38bff197ec9fef6e32271789b78dca0f10af5b2b546ce690a67899f608ba4f4c91015b60405180910390a15050505050565b6002606554036107635760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f1565b6002606555610770611a16565b600082815260ce602052604090205460ff16156107905761079082610c2c565b600060cc83815481106107a5576107a561260c565b6000918252602080832060408051608081018252600490940290910180546001600160a01b03168452600180820154858501526002820154858401526003909101546060850190815288865260cf84528286203387529093529084208054925191810154939550939264e8d4a510009161081e91612622565b6108289190612641565b6108329190612663565b9050600081116108845760405162461bcd60e51b815260206004820152601f60248201527f4641524d494e475f504f4f4c3a204e4f5f50454e44494e475f5245574152440060448201526064016104f1565b64e8d4a510008360600151836001015461089e9190612622565b6108a89190612641565b825560006108b68583611a9a565b604080513381526001600160a01b0388166020820152908101889052606081018290529091507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e906080015b60405180910390a15050600160655550505050565b60cc818154811061092757600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b6109636119bc565b61096b611ba3565b565b6002606554036109bf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f1565b60026065556109cc611a16565b60008111610a1c5760405162461bcd60e51b815260206004820152601b60248201527f4641524d494e475f504f4f4c3a2057495448445241575f5a45524f000000000060448201526064016104f1565b600060cc8381548110610a3157610a3161260c565b6000918252602080832086845260cf825260408085203386529092529220600181015460049092029092019250831115610ad35760405162461bcd60e51b815260206004820152602760248201527f4641524d494e475f504f4f4c3a204e4f5f454e4f5547485f5354414b494e475f60448201527f42414c414e43450000000000000000000000000000000000000000000000000060648201526084016104f1565b600084815260ce602052604090205460ff1615610af357610af384610c2c565b6000816000015464e8d4a5100084600301548460010154610b149190612622565b610b1e9190612641565b610b289190612663565b90506000610b363383611a9a565b60408051338082526020820152908101889052606081018290529091507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e9060800160405180910390a18354600090610b9c906001906001600160a01b03163389611bf5565b905080846001016000828254610bb29190612663565b90915550506003850154600185015464e8d4a5100091610bd191612622565b610bdb9190612641565b845560408051338152602081018990529081018290527ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689060600160405180910390a1505060016065555050505050565b600060cc8281548110610c4157610c4161260c565b9060005260206000209060040201905080600201544211610c60575050565b80546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccc919061267a565b905080600003610ce157504260029091015550565b6000826002015442610cf39190612663565b90506000836001015482610d079190612622565b905082610d1964e8d4a5100083612622565b610d239190612641565b846003016000828254610d369190612693565b909155505060c954604051632b2cea1960e21b8152306004820152602481018390526001600160a01b039091169063acb3a86490604401600060405180830381600087803b158015610d8757600080fd5b505af1158015610d9b573d6000803e3d6000fd5b5050426002870155505060038401546040805187815260208101929092527f7fa9647ec1cc14e3822b46d05a2b9d4e019bde8875c0088c46b6503d71bf17229101610702565b60cc5460005b81811015610e2157600081815260ce602052604090205460ff1615610e0f57610e0f81610c2c565b80610e19816125f3565b915050610de7565b5050565b610e2d6119bc565b61096b6000611d2e565b600260655403610e895760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f1565b6002606555610e96611a16565b600082815260ce6020526040902054829060ff16610ef65760405162461bcd60e51b815260206004820152601e60248201527f4641524d494e475f504f4f4c3a20504f4f4c5f4e4f545f4641524d494e47000060448201526064016104f1565b60008211610f465760405162461bcd60e51b815260206004820152601860248201527f4641524d494e475f504f4f4c3a205354414b455f5a45524f000000000000000060448201526064016104f1565b600060cc8481548110610f5b57610f5b61260c565b6000918252602080832087845260cf82526040808520338652909252922060049091029091019150610f8c85610c2c565b600181015415611026576000816000015464e8d4a5100084600301548460010154610fb79190612622565b610fc19190612641565b610fcb9190612663565b90506000610fd93383611a9a565b60408051338082526020820152908101899052606081018290529091507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e9060800160405180910390a150505b81546000906110419082906001600160a01b03163388611bf5565b9050808260010160008282546110579190612693565b90915550506003830154600183015464e8d4a510009161107691612622565b6110809190612641565b825560408051338152602081018890529081018290527f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b690606001610902565b6110c86119bc565b61096b611d8d565b6110d86119bc565b6110e0611a16565b8360098111156111325760405162461bcd60e51b815260206004820152601c60248201527f4641524d494e475f504f4f4c3a204d4f52455f5448414e5f4e494e450000000060448201526064016104f1565b60005b81811015611180576111788787838181106111525761115261260c565b9050602002013586868481811061116b5761116b61260c565b9050602002013585611381565b600101611135565b50505050505050565b60008060cc848154811061119f5761119f61260c565b600091825260209182902060408051608081018252600490930290910180546001600160a01b0316835260018101549383019390935260028301549082018190526003909201546060820152915015806111fc5750806040015142105b80611208575060cb5442105b1561121757600091505061137b565b600084815260cf602090815260408083206001600160a01b038781168552908352818420825180840184528154815260019091015493810193909352845191516370a0823160e01b81523060048201529293929116906370a0823190602401602060405180830381865afa158015611293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b7919061267a565b606084015190915060008290036112d557600094505050505061137b565b600087815260ce602052604090205460ff161561133d5760008460400151426112fe9190612663565b905060008186602001516113129190612622565b90508361132464e8d4a5100083612622565b61132e9190612641565b6113389084612693565b925050505b6000836000015164e8d4a5100083866020015161135a9190612622565b6113649190612641565b61136e9190612663565b955061137b945050505050565b92915050565b6113896119bc565b611391611a16565b60cc83815481106113a4576113a461260c565b9060005260206000209060040201600201546000036114055760405162461bcd60e51b815260206004820152601c60248201527f4641524d494e475f504f4f4c3a20504f4f4c5f4e4f545f45584953540000000060448201526064016104f1565b801561141857611413610de1565b611421565b61142183610c2c565b600083815260ce602052604090205460ff161580156114405750600082115b156114a257600083815260ce602052604090819020805460ff19166001179055517f6140f1d5adcbca6c6b24c3b5e695335cd1a2071c7e03881172dc9eb0e488225c906114999085904290918252602082015260400190565b60405180910390a15b8160000361150857600083815260ce602052604090819020805460ff19169055517f4654f9b7bb3ba4d66e3a4e972e39db189ac7b4fdf5f2a95d57a4eb4d91a16d45906114fb9085904290918252602082015260400190565b60405180910390a1505050565b8160cc848154811061151c5761151c61260c565b9060005260206000209060040201600101819055507f0226e7c985ca3cd56b9373c9d63f632fc54d30a22623f59774a07db77204146783836040516114fb929190918252602082015260400190565b505050565b6115786119bc565b611580611a16565b60ca546001146115d25760405162461bcd60e51b815260206004820152601460248201527f414c52454144595f484156494e475f504f4f4c5300000000000000000000000060448201526064016104f1565b60cb8190556040518181527faf8fc8a4c9a55a9a29c3e99cd1797d43062c696f192896c79cbebd7da3286d829060200160405180910390a150565b600054610100900460ff161580801561162d5750600054600160ff909116105b806116475750303b158015611647575060005460ff166001145b6116b95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104f1565b6000805460ff1916600117905580156116dc576000805461ff0019166101001790555b6001600160a01b0382166117325760405162461bcd60e51b815260206004820152601a60248201527f4641524d494e475f504f4f4c3a205a45524f5f4144445245535300000000000060448201526064016104f1565b61173a611dca565b611742611e3d565b61174a611eaf565b60c980546001600160a01b0380851673ffffffffffffffffffffffffffffffffffffffff1992831617909255600160ca819055604080516080810182526000808252602082018181529282018181526060830182815260cc80549687018155909252915160049094027f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe81018054959097169490951693909317909455517f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebf83015591517f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ec082015590517f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ec1909101558015610e21576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b606060cc805480602002602001604051908101604052809291908181526020016000905b82821015611923576000848152602090819020604080516080810182526004860290920180546001600160a01b031683526001808201548486015260028201549284019290925260030154606083015290835290920191016118c6565b50505050905090565b6119346119bc565b6001600160a01b0381166119b05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104f1565b6119b981611d2e565b50565b6033546001600160a01b0316331461096b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b60975460ff161561096b5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104f1565b6001600160a01b038116600090815260cd6020526040812054808203611a90576000611a93565b60015b9392505050565b60c9546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0b919061267a565b905060008111611b5d5760405162461bcd60e51b815260206004820152601c60248201527f4641524d494e475f504f4f4c3a204e4f5f4655525f494e5f504f4f4c0000000060448201526064016104f1565b80831115611b835760c954611b7c906001600160a01b03168583611f26565b905061137b565b60c954611b9a906001600160a01b03168585611f26565b8291505061137b565b611bab611fb6565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516370a0823160e01b815230600482015260009081906001600160a01b038616906370a0823190602401602060405180830381865afa158015611c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c62919061267a565b90508515611c8357611c7e6001600160a01b0386168585611f26565b611c98565b611c986001600160a01b038616853086612008565b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a0823190602401602060405180830381865afa158015611cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d03919061267a565b905086611d1957611d148282612663565b611d23565b611d238183612663565b979650505050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611d95611a16565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611bd83390565b600054610100900460ff16611e355760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104f1565b61096b612046565b600054610100900460ff16611ea85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104f1565b6001606555565b600054610100900460ff16611f1a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104f1565b6097805460ff19169055565b6040516001600160a01b03831660248201526044810182905261156b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526120ba565b60975460ff1661096b5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016104f1565b6040516001600160a01b03808516602483015283166044820152606481018290526120409085906323b872dd60e01b90608401611f52565b50505050565b600054610100900460ff166120b15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104f1565b61096b33611d2e565b600061210f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661219f9092919063ffffffff16565b80519091501561156b578080602001905181019061212d91906126ab565b61156b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104f1565b60606121ae84846000856121b6565b949350505050565b60608247101561222e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104f1565b6001600160a01b0385163b6122855760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104f1565b600080866001600160a01b031685876040516122a191906126c8565b60006040518083038185875af1925050503d80600081146122de576040519150601f19603f3d011682016040523d82523d6000602084013e6122e3565b606091505b5091509150611d23828286606083156122fd575081611a93565b82511561230d5782518084602001fd5b8160405162461bcd60e51b81526004016104f19190612353565b60005b8381101561234257818101518382015260200161232a565b838111156120405750506000910152565b6020815260008251806020840152612372816040850160208701612327565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461239d57600080fd5b919050565b80151581146119b957600080fd5b6000806000606084860312156123c557600080fd5b6123ce84612386565b92506020840135915060408401356123e5816123a2565b809150509250925092565b6000806040838503121561240357600080fd5b8235915061241360208401612386565b90509250929050565b60006020828403121561242e57600080fd5b5035919050565b60006020828403121561244757600080fd5b611a9382612386565b6000806040838503121561246357600080fd5b50508035926020909101359150565b60008083601f84011261248457600080fd5b50813567ffffffffffffffff81111561249c57600080fd5b6020830191508360208260051b85010111156124b757600080fd5b9250929050565b6000806000806000606086880312156124d657600080fd5b853567ffffffffffffffff808211156124ee57600080fd5b6124fa89838a01612472565b9097509550602088013591508082111561251357600080fd5b5061252088828901612472565b9094509250506040860135612534816123a2565b809150509295509295909350565b60008060006060848603121561255757600080fd5b833592506020840135915060408401356123e5816123a2565b602080825282518282018190526000919060409081850190868401855b828110156125d057815180516001600160a01b0316855286810151878601528581015186860152606090810151908501526080909301929085019060010161258d565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201612605576126056125dd565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561263c5761263c6125dd565b500290565b60008261265e57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612675576126756125dd565b500390565b60006020828403121561268c57600080fd5b5051919050565b600082198211156126a6576126a66125dd565b500190565b6000602082840312156126bd57600080fd5b8151611a93816123a2565b600082516126da818460208701612327565b919091019291505056fea164736f6c634300080d000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80638da5cb5b116100f9578063c44bef7511610097578063d41dcbea11610071578063d41dcbea14610461578063e6fd48bc14610476578063eced55261461047f578063f2fde38b1461048b57600080fd5b8063c44bef7514610402578063c4d66de814610415578063cdfb6cf31461042857600080fd5b80639c7a8293116100d35780639c7a8293146103a6578063a06ddcb3146103b9578063bcedbe2b146103dc578063c24c016e146103ef57600080fd5b80638da5cb5b14610327578063909ff8281461034c57806393f1a40b1461035f57600080fd5b8063441a3e7011610166578063630b5ba111610140578063630b5ba1146102fc578063715018a6146103045780637b0472f01461030c5780638456cb591461031f57600080fd5b8063441a3e70146102bf57806351eb05a6146102d25780635c975abb146102e557600080fd5b806318fccc76116101a257806318fccc76146102475780632a48235b1461025a5780632c678a3e146102975780633f4ba83a146102b757600080fd5b806306fdde03146101c95780630dec23121461021b57806317fb77de14610230575b600080fd5b6102056040518060400160405280601681526020017f467572696f6e204c50204661726d696e6720506f6f6c0000000000000000000081525081565b6040516102129190612353565b60405180910390f35b61022e6102293660046123b0565b61049e565b005b61023960ca5481565b604051908152602001610212565b61022e6102553660046123f0565b610711565b61026d61026836600461241c565b610917565b604080516001600160a01b0390951685526020850193909352918301526060820152608001610212565b6102396102a5366004612435565b60cd6020526000908152604090205481565b61022e61095b565b61022e6102cd366004612450565b61096d565b61022e6102e036600461241c565b610c2c565b60975460ff165b6040519015158152602001610212565b61022e610de1565b61022e610e25565b61022e61031a366004612450565b610e37565b61022e6110c0565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610212565b60c954610334906001600160a01b031681565b61039161036d3660046123f0565b60cf6020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610212565b61022e6103b43660046124be565b6110d0565b6102ec6103c736600461241c565b60ce6020526000908152604090205460ff1681565b6102396103ea3660046123f0565b611189565b61022e6103fd366004612542565b611381565b61022e61041036600461241c565b611570565b61022e610423366004612435565b61160d565b6102396104363660046123f0565b600091825260cf602090815260408084206001600160a01b0393909316845291905290206001015490565b6104696118a2565b6040516102129190612570565b61023960cb5481565b61023964e8d4a5100081565b61022e610499366004612435565b61192c565b826001600160a01b0381166104fa5760405162461bcd60e51b815260206004820152601a60248201527f4641524d494e475f504f4f4c3a205a45524f5f4144445245535300000000000060448201526064015b60405180910390fd5b6105026119bc565b61050a611a16565b61051384611a69565b156105605760405162461bcd60e51b815260206004820152601d60248201527f4641524d494e475f504f4f4c3a20414c52454144595f494e5f504f4f4c00000060448201526064016104f1565b811561056e5761056e610de1565b600060cb5442116105815760cb54610583565b425b604080516080810182526001600160a01b0388811682526020820188815292820184815260006060840181815260cc8054600181018255925293517f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe6004909202918201805473ffffffffffffffffffffffffffffffffffffffff1916919094161790925592517f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebf82015591517f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ec0830155517f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ec1909101559050831561069f5760ca54600090815260ce60205260409020805460ff191660011790555b60ca80549060006106af836125f3565b909155506001600160a01b038616600081815260cd60209081526040918290209390935580519182529181018690527f38bff197ec9fef6e32271789b78dca0f10af5b2b546ce690a67899f608ba4f4c91015b60405180910390a15050505050565b6002606554036107635760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f1565b6002606555610770611a16565b600082815260ce602052604090205460ff16156107905761079082610c2c565b600060cc83815481106107a5576107a561260c565b6000918252602080832060408051608081018252600490940290910180546001600160a01b03168452600180820154858501526002820154858401526003909101546060850190815288865260cf84528286203387529093529084208054925191810154939550939264e8d4a510009161081e91612622565b6108289190612641565b6108329190612663565b9050600081116108845760405162461bcd60e51b815260206004820152601f60248201527f4641524d494e475f504f4f4c3a204e4f5f50454e44494e475f5245574152440060448201526064016104f1565b64e8d4a510008360600151836001015461089e9190612622565b6108a89190612641565b825560006108b68583611a9a565b604080513381526001600160a01b0388166020820152908101889052606081018290529091507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e906080015b60405180910390a15050600160655550505050565b60cc818154811061092757600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b6109636119bc565b61096b611ba3565b565b6002606554036109bf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f1565b60026065556109cc611a16565b60008111610a1c5760405162461bcd60e51b815260206004820152601b60248201527f4641524d494e475f504f4f4c3a2057495448445241575f5a45524f000000000060448201526064016104f1565b600060cc8381548110610a3157610a3161260c565b6000918252602080832086845260cf825260408085203386529092529220600181015460049092029092019250831115610ad35760405162461bcd60e51b815260206004820152602760248201527f4641524d494e475f504f4f4c3a204e4f5f454e4f5547485f5354414b494e475f60448201527f42414c414e43450000000000000000000000000000000000000000000000000060648201526084016104f1565b600084815260ce602052604090205460ff1615610af357610af384610c2c565b6000816000015464e8d4a5100084600301548460010154610b149190612622565b610b1e9190612641565b610b289190612663565b90506000610b363383611a9a565b60408051338082526020820152908101889052606081018290529091507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e9060800160405180910390a18354600090610b9c906001906001600160a01b03163389611bf5565b905080846001016000828254610bb29190612663565b90915550506003850154600185015464e8d4a5100091610bd191612622565b610bdb9190612641565b845560408051338152602081018990529081018290527ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689060600160405180910390a1505060016065555050505050565b600060cc8281548110610c4157610c4161260c565b9060005260206000209060040201905080600201544211610c60575050565b80546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccc919061267a565b905080600003610ce157504260029091015550565b6000826002015442610cf39190612663565b90506000836001015482610d079190612622565b905082610d1964e8d4a5100083612622565b610d239190612641565b846003016000828254610d369190612693565b909155505060c954604051632b2cea1960e21b8152306004820152602481018390526001600160a01b039091169063acb3a86490604401600060405180830381600087803b158015610d8757600080fd5b505af1158015610d9b573d6000803e3d6000fd5b5050426002870155505060038401546040805187815260208101929092527f7fa9647ec1cc14e3822b46d05a2b9d4e019bde8875c0088c46b6503d71bf17229101610702565b60cc5460005b81811015610e2157600081815260ce602052604090205460ff1615610e0f57610e0f81610c2c565b80610e19816125f3565b915050610de7565b5050565b610e2d6119bc565b61096b6000611d2e565b600260655403610e895760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f1565b6002606555610e96611a16565b600082815260ce6020526040902054829060ff16610ef65760405162461bcd60e51b815260206004820152601e60248201527f4641524d494e475f504f4f4c3a20504f4f4c5f4e4f545f4641524d494e47000060448201526064016104f1565b60008211610f465760405162461bcd60e51b815260206004820152601860248201527f4641524d494e475f504f4f4c3a205354414b455f5a45524f000000000000000060448201526064016104f1565b600060cc8481548110610f5b57610f5b61260c565b6000918252602080832087845260cf82526040808520338652909252922060049091029091019150610f8c85610c2c565b600181015415611026576000816000015464e8d4a5100084600301548460010154610fb79190612622565b610fc19190612641565b610fcb9190612663565b90506000610fd93383611a9a565b60408051338082526020820152908101899052606081018290529091507fdec9257d126f56798a34ce7ca0ffedeaa9a024543946f79c3b5038035ba32a1e9060800160405180910390a150505b81546000906110419082906001600160a01b03163388611bf5565b9050808260010160008282546110579190612693565b90915550506003830154600183015464e8d4a510009161107691612622565b6110809190612641565b825560408051338152602081018890529081018290527f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b690606001610902565b6110c86119bc565b61096b611d8d565b6110d86119bc565b6110e0611a16565b8360098111156111325760405162461bcd60e51b815260206004820152601c60248201527f4641524d494e475f504f4f4c3a204d4f52455f5448414e5f4e494e450000000060448201526064016104f1565b60005b81811015611180576111788787838181106111525761115261260c565b9050602002013586868481811061116b5761116b61260c565b9050602002013585611381565b600101611135565b50505050505050565b60008060cc848154811061119f5761119f61260c565b600091825260209182902060408051608081018252600490930290910180546001600160a01b0316835260018101549383019390935260028301549082018190526003909201546060820152915015806111fc5750806040015142105b80611208575060cb5442105b1561121757600091505061137b565b600084815260cf602090815260408083206001600160a01b038781168552908352818420825180840184528154815260019091015493810193909352845191516370a0823160e01b81523060048201529293929116906370a0823190602401602060405180830381865afa158015611293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b7919061267a565b606084015190915060008290036112d557600094505050505061137b565b600087815260ce602052604090205460ff161561133d5760008460400151426112fe9190612663565b905060008186602001516113129190612622565b90508361132464e8d4a5100083612622565b61132e9190612641565b6113389084612693565b925050505b6000836000015164e8d4a5100083866020015161135a9190612622565b6113649190612641565b61136e9190612663565b955061137b945050505050565b92915050565b6113896119bc565b611391611a16565b60cc83815481106113a4576113a461260c565b9060005260206000209060040201600201546000036114055760405162461bcd60e51b815260206004820152601c60248201527f4641524d494e475f504f4f4c3a20504f4f4c5f4e4f545f45584953540000000060448201526064016104f1565b801561141857611413610de1565b611421565b61142183610c2c565b600083815260ce602052604090205460ff161580156114405750600082115b156114a257600083815260ce602052604090819020805460ff19166001179055517f6140f1d5adcbca6c6b24c3b5e695335cd1a2071c7e03881172dc9eb0e488225c906114999085904290918252602082015260400190565b60405180910390a15b8160000361150857600083815260ce602052604090819020805460ff19169055517f4654f9b7bb3ba4d66e3a4e972e39db189ac7b4fdf5f2a95d57a4eb4d91a16d45906114fb9085904290918252602082015260400190565b60405180910390a1505050565b8160cc848154811061151c5761151c61260c565b9060005260206000209060040201600101819055507f0226e7c985ca3cd56b9373c9d63f632fc54d30a22623f59774a07db77204146783836040516114fb929190918252602082015260400190565b505050565b6115786119bc565b611580611a16565b60ca546001146115d25760405162461bcd60e51b815260206004820152601460248201527f414c52454144595f484156494e475f504f4f4c5300000000000000000000000060448201526064016104f1565b60cb8190556040518181527faf8fc8a4c9a55a9a29c3e99cd1797d43062c696f192896c79cbebd7da3286d829060200160405180910390a150565b600054610100900460ff161580801561162d5750600054600160ff909116105b806116475750303b158015611647575060005460ff166001145b6116b95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104f1565b6000805460ff1916600117905580156116dc576000805461ff0019166101001790555b6001600160a01b0382166117325760405162461bcd60e51b815260206004820152601a60248201527f4641524d494e475f504f4f4c3a205a45524f5f4144445245535300000000000060448201526064016104f1565b61173a611dca565b611742611e3d565b61174a611eaf565b60c980546001600160a01b0380851673ffffffffffffffffffffffffffffffffffffffff1992831617909255600160ca819055604080516080810182526000808252602082018181529282018181526060830182815260cc80549687018155909252915160049094027f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe81018054959097169490951693909317909455517f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebf83015591517f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ec082015590517f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ec1909101558015610e21576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b606060cc805480602002602001604051908101604052809291908181526020016000905b82821015611923576000848152602090819020604080516080810182526004860290920180546001600160a01b031683526001808201548486015260028201549284019290925260030154606083015290835290920191016118c6565b50505050905090565b6119346119bc565b6001600160a01b0381166119b05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104f1565b6119b981611d2e565b50565b6033546001600160a01b0316331461096b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f1565b60975460ff161561096b5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104f1565b6001600160a01b038116600090815260cd6020526040812054808203611a90576000611a93565b60015b9392505050565b60c9546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0b919061267a565b905060008111611b5d5760405162461bcd60e51b815260206004820152601c60248201527f4641524d494e475f504f4f4c3a204e4f5f4655525f494e5f504f4f4c0000000060448201526064016104f1565b80831115611b835760c954611b7c906001600160a01b03168583611f26565b905061137b565b60c954611b9a906001600160a01b03168585611f26565b8291505061137b565b611bab611fb6565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516370a0823160e01b815230600482015260009081906001600160a01b038616906370a0823190602401602060405180830381865afa158015611c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c62919061267a565b90508515611c8357611c7e6001600160a01b0386168585611f26565b611c98565b611c986001600160a01b038616853086612008565b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a0823190602401602060405180830381865afa158015611cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d03919061267a565b905086611d1957611d148282612663565b611d23565b611d238183612663565b979650505050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611d95611a16565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611bd83390565b600054610100900460ff16611e355760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104f1565b61096b612046565b600054610100900460ff16611ea85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104f1565b6001606555565b600054610100900460ff16611f1a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104f1565b6097805460ff19169055565b6040516001600160a01b03831660248201526044810182905261156b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526120ba565b60975460ff1661096b5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016104f1565b6040516001600160a01b03808516602483015283166044820152606481018290526120409085906323b872dd60e01b90608401611f52565b50505050565b600054610100900460ff166120b15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104f1565b61096b33611d2e565b600061210f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661219f9092919063ffffffff16565b80519091501561156b578080602001905181019061212d91906126ab565b61156b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104f1565b60606121ae84846000856121b6565b949350505050565b60608247101561222e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104f1565b6001600160a01b0385163b6122855760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104f1565b600080866001600160a01b031685876040516122a191906126c8565b60006040518083038185875af1925050503d80600081146122de576040519150601f19603f3d011682016040523d82523d6000602084013e6122e3565b606091505b5091509150611d23828286606083156122fd575081611a93565b82511561230d5782518084602001fd5b8160405162461bcd60e51b81526004016104f19190612353565b60005b8381101561234257818101518382015260200161232a565b838111156120405750506000910152565b6020815260008251806020840152612372816040850160208701612327565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461239d57600080fd5b919050565b80151581146119b957600080fd5b6000806000606084860312156123c557600080fd5b6123ce84612386565b92506020840135915060408401356123e5816123a2565b809150509250925092565b6000806040838503121561240357600080fd5b8235915061241360208401612386565b90509250929050565b60006020828403121561242e57600080fd5b5035919050565b60006020828403121561244757600080fd5b611a9382612386565b6000806040838503121561246357600080fd5b50508035926020909101359150565b60008083601f84011261248457600080fd5b50813567ffffffffffffffff81111561249c57600080fd5b6020830191508360208260051b85010111156124b757600080fd5b9250929050565b6000806000806000606086880312156124d657600080fd5b853567ffffffffffffffff808211156124ee57600080fd5b6124fa89838a01612472565b9097509550602088013591508082111561251357600080fd5b5061252088828901612472565b9094509250506040860135612534816123a2565b809150509295509295909350565b60008060006060848603121561255757600080fd5b833592506020840135915060408401356123e5816123a2565b602080825282518282018190526000919060409081850190868401855b828110156125d057815180516001600160a01b0316855286810151878601528581015186860152606090810151908501526080909301929085019060010161258d565b5091979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201612605576126056125dd565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561263c5761263c6125dd565b500290565b60008261265e57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612675576126756125dd565b500390565b60006020828403121561268c57600080fd5b5051919050565b600082198211156126a6576126a66125dd565b500190565b6000602082840312156126bd57600080fd5b8151611a93816123a2565b600082516126da818460208701612327565b919091019291505056fea164736f6c634300080d000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add(address,uint256,bool)": {
        "details": "Can only be called by the owner      The reward speed can be 0 and set later by setFurionReward function",
        "params": {
          "_basicFurionPerSecond": "Basic reward speed(per second) for this new pool",
          "_lpToken": "LP token address",
          "_withUpdate": "Whether update all pools' status"
        }
      },
      "getPoolList()": {
        "returns": {
          "_0": "pooList Total pool list"
        }
      },
      "getUserBalance(uint256,address)": {
        "params": {
          "_poolId": "Id of the pool",
          "_user": "User address"
        },
        "returns": {
          "_0": "balance User's balance (lpToken)"
        }
      },
      "harvest(uint256,address)": {
        "params": {
          "_poolId": "Id of the farming pool",
          "_to": "Receiver of Furion rewards"
        }
      },
      "massUpdatePools()": {
        "details": "Can be called by anyone      Only update those active pools"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingFurion(uint256,address)": {
        "params": {
          "_poolId": "PoolId of this farming pool",
          "_user": "User address"
        },
        "returns": {
          "_0": "pendingFurionAmount Amount of pending Furion"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFurionReward(uint256,uint256,bool)": {
        "params": {
          "_basicFurionPerSecond": "New basic reward amount per second",
          "_poolId": "Id of the farming pool",
          "_withUpdate": "Whether update all pools"
        }
      },
      "setFurionRewards(uint256[],uint256[],bool)": {
        "params": {
          "_basicFurionPerSecond": "New basic reward amount per second",
          "_poolId": "Id collection of the farming pool",
          "_withUpdate": "Whether update all pools"
        }
      },
      "setStartTimestamp(uint256)": {
        "params": {
          "_startTimestamp": "New start block timestamp"
        }
      },
      "stake(uint256,uint256)": {
        "details": "Can only stake to the pools that are still farming",
        "params": {
          "_amount": "Staking amount",
          "_poolId": "Id of the farming pool"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePool(uint256)": {
        "params": {
          "_poolId": "Id of the farming pool"
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "_amount": "Amount of lp tokens to withdraw",
          "_poolId": "Id of the farming pool"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add(address,uint256,bool)": {
        "notice": "Add a new lp into the pool"
      },
      "getPoolList()": {
        "notice": "Get the total pool list"
      },
      "getUserBalance(uint256,address)": {
        "notice": "Get a user's balance"
      },
      "harvest(uint256,address)": {
        "notice": "Harvest the Furion reward and can be sent to another address"
      },
      "massUpdatePools()": {
        "notice": "Update all farming pools (except for those stopped ones)"
      },
      "pendingFurion(uint256,address)": {
        "notice": "Check the amount of pending Furion reward"
      },
      "setFurionReward(uint256,uint256,bool)": {
        "notice": "Update the FurionPerSecond for a specific pool (set to 0 to stop farming)"
      },
      "setFurionRewards(uint256[],uint256[],bool)": {
        "notice": "Update the FurionPerSecond for a bundle of pools (used for daily updating farming rate)"
      },
      "setStartTimestamp(uint256)": {
        "notice": "Set the start block timestamp"
      },
      "stake(uint256,uint256)": {
        "notice": "Stake LP token into the farming pool"
      },
      "updatePool(uint256)": {
        "notice": "Update the pool's reward status"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw lptoken from the pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 184,
        "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 187,
        "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1739,
        "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 176,
        "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 469,
        "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 513,
        "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 349,
        "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 454,
        "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11621,
        "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "furion",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IFurionToken)29546"
      },
      {
        "astId": 11626,
        "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "_nextPoolId",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 11628,
        "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 11641,
        "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "poolList",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_struct(PoolInfo)11637_storage)dyn_storage"
      },
      {
        "astId": 11645,
        "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "poolMapping",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11649,
        "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "isFarming",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 11661,
        "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
        "label": "userInfo",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)11654_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)11637_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)11637_storage",
        "encoding": "dynamic_array",
        "label": "struct FarmingPoolUpgradeable.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFurionToken)29546": {
        "encoding": "inplace",
        "label": "contract IFurionToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)11654_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FarmingPoolUpgradeable.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)11654_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)11654_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct FarmingPoolUpgradeable.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)11654_storage)"
      },
      "t_struct(PoolInfo)11637_storage": {
        "encoding": "inplace",
        "label": "struct FarmingPoolUpgradeable.PoolInfo",
        "members": [
          {
            "astId": 11630,
            "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11632,
            "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "basicFurionPerSecond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11634,
            "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11636,
            "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "accFurionPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo)11654_storage": {
        "encoding": "inplace",
        "label": "struct FarmingPoolUpgradeable.UserInfo",
        "members": [
          {
            "astId": 11651,
            "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11653,
            "contract": "contracts/furion-farming/FarmingPoolUpgradeable.sol:FarmingPoolUpgradeable",
            "label": "stakingBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
