{
  "language": "Solidity",
  "sources": {
    "contracts/Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Checker is Ownable {\n    // Project pool factory\n    address public SP_FACTORY;\n    // Root pool factory\n    address public AP_FACTORY;\n\n    mapping(address => bool) private isFurion;\n\n    modifier callable() {\n        require(\n            msg.sender == owner() ||\n                msg.sender == SP_FACTORY ||\n                msg.sender == AP_FACTORY,\n            \"Checker: Not permitted to call.\"\n        );\n        _;\n    }\n\n    function isFurionToken(address _tokenAddress) public view returns (bool) {\n        return isFurion[_tokenAddress];\n    }\n\n    function setSPFactory(address _spFactory) external onlyOwner {\n        SP_FACTORY = _spFactory;\n    }\n\n    function setAPFactory(address _apFactory) external onlyOwner {\n        AP_FACTORY = _apFactory;\n    }\n\n    function addToken(address _tokenAddress) external callable {\n        isFurion[_tokenAddress] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "contracts/separate-pool/SeparatePoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./SeparatePool.sol\";\nimport \"./interfaces/ISeparatePool.sol\";\nimport \"./interfaces/ISeparatePoolFactory.sol\";\nimport \"../IChecker.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract SeparatePoolFactory is ISeparatePoolFactory, Ownable {\n    address public immutable incomeMaker;\n\n    // Addresses of NFTs with a pool\n    address[] public allNfts;\n    // NFT address to pool address\n    mapping(address => address) public getPool;\n\n    IChecker Checker;\n    address public fur;\n\n    event PoolCreated(\n        address nftAddress,\n        address poolAddress,\n        uint256 poolIndex\n    );\n\n    constructor(\n        address _incomeMaker,\n        address _checker,\n        address _fur\n    ) {\n        incomeMaker = _incomeMaker;\n        Checker = IChecker(_checker);\n        fur = _fur;\n    }\n\n    /**\n     * @dev Get total number of NFTs with a separate pool\n     */\n    function numOfPools() external view returns (uint256 totalPools) {\n        totalPools = allNfts.length;\n    }\n\n    /**\n     * @dev Get addresses of nft collections that has a separate pool\n     */\n    function getAllNfts()\n        external\n        view\n        returns (address[] memory nftsWithPool)\n    {\n        nftsWithPool = allNfts;\n    }\n\n    /**\n     * @dev Get addresses of all separate pools\n     */\n    function getAllPools()\n        external\n        view\n        returns (address[] memory poolAddresses)\n    {\n        for (uint256 i; i < allNfts.length; ) {\n            address nftAddress = allNfts[i];\n            poolAddresses[i] = getPool[nftAddress];\n        }\n\n        return poolAddresses;\n    }\n\n    function getNftByPool(address _poolAddress) public view returns (address) {\n        for (uint256 i; i < allNfts.length; ) {\n            if (getPool[allNfts[i]] == _poolAddress) {\n                return allNfts[i];\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return address(0);\n    }\n\n    /**\n     * @dev Change owner/fee receiver for all project pools\n     */\n    function transferOwnership(address _newOwner) public override onlyOwner {\n        require(\n            _newOwner != address(0),\n            \"Ownable: New owner is the zero address\"\n        );\n\n        _transferOwnership(_newOwner);\n\n        for (uint256 i; i < allNfts.length; ) {\n            ISeparatePool(getPool[allNfts[i]]).changeOwner(_newOwner);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function setFur(address _newFur) public onlyOwner {\n        for (uint256 i; i < allNfts.length; ) {\n            ISeparatePool(getPool[allNfts[i]]).setFur(_newFur);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev Create pool and add address to array\n     */\n    function createPool(address _nftAddress)\n        external\n        returns (address poolAddress)\n    {\n        require(\n            address(Checker) != address(0),\n            \"SeparatePoolFactory: Checker not set.\"\n        );\n        require(_nftAddress != address(0), \"SeparatePoolFactory: ZERO_ADDRESS\");\n        require(\n            getPool[_nftAddress] == address(0),\n            \"SeparatePoolFactory: PAIR_EXISTS\"\n        );\n\n        (string memory tokenName, string memory tokenSymbol) = _tokenMetadata(\n            _nftAddress\n        );\n\n        bytes32 _salt = keccak256(abi.encodePacked(_nftAddress));\n\n        // New way to invoke create2 without assembly, paranthesis still needed for empty constructor\n        poolAddress = address(\n            new SeparatePool{salt: _salt}(\n                _nftAddress,\n                incomeMaker,\n                fur,\n                owner(),\n                tokenName,\n                tokenSymbol\n            )\n        );\n\n        allNfts.push(_nftAddress);\n        getPool[_nftAddress] = poolAddress;\n        Checker.addToken(poolAddress);\n\n        emit PoolCreated(_nftAddress, poolAddress, allNfts.length);\n    }\n\n    /**\n     * @dev Get NFT name and symbol for token metadata\n     */\n    function _tokenMetadata(address _nftAddress)\n        private\n        view\n        returns (string memory tokenName, string memory tokenSymbol)\n    {\n        string memory nftName = IERC721Metadata(_nftAddress).name();\n        string memory nftSymbol = IERC721Metadata(_nftAddress).symbol();\n        tokenName = string.concat(\"Furion \", nftName);\n        tokenSymbol = string.concat(\"F-\", nftSymbol);\n\n        return (tokenName, tokenSymbol);\n    }\n}\n"
    },
    "contracts/separate-pool/SeparatePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract SeparatePool is ERC20Permit, IERC721Receiver {\n    address constant KITTIES = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n    address constant PUNKS = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n\n    uint256 public constant SWAP_MINT_AMOUNT = 1000e18;\n    uint256 public constant LOCK_MINT_AMOUNT = 500e18;\n    uint256 public constant RELEASE_MINT_AMOUNT = 200e18;\n\n    IERC20 FUR;\n\n    address public immutable factory;\n    address public immutable nft;\n    // Transfer fee to income maker\n    address public immutable incomeMaker;\n    // Pool admin/fee receiver\n    // Fees in this contract are in the form of F-* tokens\n    address public owner;\n\n    uint256 buyFee = 100e18;\n    uint256 lockFee = 150e18;\n\n    struct LockInfo {\n        address locker;\n        bool extended; // Can only extend once\n        uint256 releaseTime;\n    }\n    mapping(bytes32 => LockInfo) public lockInfo;\n\n    uint16[] public inPool;\n\n    event OwnerChanged(address oldOwner, address newOwner);\n    event SoldNFT(bytes32 indexed fId, address indexed seller);\n    event BoughtNFT(bytes32 indexed fId, address indexed buyer);\n    event LockedNFT(\n        bytes32 indexed fId,\n        address indexed locker,\n        uint256 timeOfLock,\n        uint256 expiryTime\n    );\n    event RedeemedNFT(bytes32 indexed fId, address indexed redeemer);\n    event ReleasedNFT(bytes32 indexed fId);\n\n    constructor(\n        address _nftAddress,\n        address _incomeMaker,\n        address _fur,\n        address _owner,\n        string memory _tokenName,\n        string memory _tokenSymbol\n    ) ERC20Permit(_tokenName) ERC20(_tokenName, _tokenSymbol) {\n        factory = msg.sender;\n        incomeMaker = _incomeMaker;\n        nft = _nftAddress;\n        FUR = IERC20(_fur);\n        owner = _owner;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"SeparatePool: Not permitted to call.\");\n        _;\n    }\n\n    modifier onlyFactory() {\n        require(msg.sender == factory, \"SeparatePool: Not permitted to call.\");\n        _;\n    }\n\n    // Check if caller is NFT locker,\n    //       if withdrawal is within release time\n    modifier redeemable(uint256 _id) {\n        bytes32 fId = getFurionId(_id);\n\n        require(\n            lockInfo[fId].locker == msg.sender,\n            \"SeparatePool: You did not lock this NFT.\"\n        );\n        require(\n            lockInfo[fId].releaseTime > block.timestamp,\n            \"SeparatePool: NFT has already been released to public pool.\"\n        );\n        _;\n    }\n\n    // Check if NFT is locked,\n    //       if releaseTime has passed\n    modifier releasable(uint256 _id) {\n        bytes32 fId = getFurionId(_id);\n\n        require(\n            lockInfo[fId].locker != address(0),\n            \"SeparatePool: NFT is not locked.\"\n        );\n        require(\n            lockInfo[fId].releaseTime < block.timestamp,\n            \"SeparatePool: Release time not yet reached.\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Compute NFT furion ID\n     */\n    function getFurionId(uint256 _id) public view returns (bytes32) {\n        return keccak256(abi.encodePacked(nft, _id));\n    }\n\n    /**\n     * @dev Get complete lock  info of NFT\n     */\n    function getLockInfo(uint256 _id) public view returns (LockInfo memory) {\n        bytes32 fId = getFurionId(_id);\n\n        return lockInfo[fId];\n    }\n\n    /**\n     * @dev Change fee rate for buying NFT after governance voting\n     */\n    function setBuyFee(uint128 _newFee) external onlyOwner {\n        buyFee = _newFee;\n    }\n\n    /**\n     * @dev Change fee rate for redeeming NFT after governance voting\n     */\n    function setLockFee(uint128 _newFee) external onlyOwner {\n        lockFee = _newFee;\n    }\n\n    /**\n     * @dev Change pool admin/fee receiver\n     */\n    function changeOwner(address _newOwner) external onlyFactory {\n        address oldOwner = owner;\n        owner = _newOwner;\n\n        emit OwnerChanged(oldOwner, _newOwner);\n    }\n\n    function setFur(address _newFur) external onlyFactory {\n        FUR = IERC20(_newFur);\n    }\n\n    /**\n     * @dev Sell single NFT and mint 1000 tokens immediately\n     */\n    function sell(uint256 _id) external {\n        _sell(_id, true);\n    }\n\n    /**\n     * @dev Sell multiple NFTs of same collection in one tx\n     */\n    function sellBatch(uint256[] calldata _ids) external {\n        // Number of NFTs in list\n        uint256 length = _ids.length;\n        require(length < 10, \"SeparatePool: Can only sell 9 NFTs at once\");\n\n        for (uint256 i; i < length; ) {\n            // Mint total amount all at once, so _updateNow is false\n            _sell(_ids[i], false);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        _mint(msg.sender, SWAP_MINT_AMOUNT * length);\n    }\n\n    /**\n     * @dev Buy single NFT and burn 1000 tokens immediately\n     */\n    function buy(uint256 _id) external {\n        _buy(_id, true);\n    }\n\n    /**\n     * @dev Buy multiple NFTs of same collection in one tx\n     */\n    function buyBatch(uint256[] calldata _ids) external {\n        // Number of NFTs to buy\n        uint256 length = _ids.length;\n        require(length < 10, \"SeparatePool: Can only buy 9 NFTs at once\");\n\n        uint256 burnTotal = SWAP_MINT_AMOUNT * length;\n        uint256 feeTotal = buyFee * length;\n        _burn(msg.sender, burnTotal);\n        FUR.transferFrom(msg.sender, incomeMaker, feeTotal);\n\n        for (uint256 i; i < length; ) {\n            // Collected fee all at once, so _updateNow is false\n            _buy(_ids[i], false);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev Lock NFT to pool and get 500 pool tokens\n     */\n    function lock(uint256 _id) external {\n        _lock(_id, true);\n    }\n\n    /**\n     * @dev Lock multiple NFTs of same collection\n     */\n    function lockBatch(uint256[] calldata _ids) external {\n        // Number of NFTs to buy\n        uint256 length = _ids.length;\n        require(length < 10, \"SeparatePool: Can only buy 9 NFTs at once\");\n\n        uint256 mintTotal = LOCK_MINT_AMOUNT * length;\n        uint256 feeTotal = buyFee * length;\n        FUR.transferFrom(msg.sender, incomeMaker, feeTotal);\n\n        for (uint256 i; i < length; ) {\n            // Collected fee all at once, so _updateNow is false\n            _lock(_ids[i], false);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        _mint(msg.sender, mintTotal);\n    }\n\n    /**\n     * @notice Lockers can only extend release time once\n     * @dev EXTENDS release time by one month\n     */\n    function payFee(uint256 _id) external {\n        bytes32 fId = getFurionId(_id);\n\n        LockInfo memory li = lockInfo[fId];\n\n        require(\n            li.locker == msg.sender,\n            \"SeparatePool: You did not lock this NFT.\"\n        );\n        require(\n            li.releaseTime > block.timestamp,\n            \"SeparatePool: NFT already released\"\n        );\n        require(!li.extended, \"SeparatePool: Already extended once\");\n\n        FUR.transferFrom(msg.sender, incomeMaker, lockFee);\n\n        lockInfo[fId].extended = true;\n        lockInfo[fId].releaseTime += 30 days;\n    }\n\n    /**\n     * @notice Lockers must redeem NFT if it has already been extended\n     * @dev Redeem locked NFT by paying 500 tokens\n     */\n    function redeem(uint256 _id) external redeemable(_id) {\n        bytes32 fId = getFurionId(_id);\n\n        _burn(msg.sender, LOCK_MINT_AMOUNT);\n\n        delete lockInfo[fId];\n\n        _transferOutNFT(msg.sender, _id);\n\n        emit RedeemedNFT(fId, msg.sender);\n    }\n\n    /**\n     * @notice Only 200 pool tokens is minted to locker as a penalty\n     * @dev Release NFT for swapping and mint pool tokens to locker\n     */\n    function release(uint256 _id) external onlyOwner releasable(_id) {\n        bytes32 fId = getFurionId(_id);\n\n        address sendRemainingTo = lockInfo[fId].locker;\n\n        delete lockInfo[fId];\n\n        _mint(sendRemainingTo, RELEASE_MINT_AMOUNT);\n        _mint(incomeMaker, LOCK_MINT_AMOUNT - RELEASE_MINT_AMOUNT);\n\n        emit ReleasedNFT(fId);\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public pure returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev Sell NFT to pool and get 1000 pool tokens\n     *\n     * @param _updateNow Determines if minting is done immediately or after\n     *        multiple calls (batched)\n     */\n    function _sell(uint256 _id, bool _updateNow) private {\n        _transferInNFT(_id);\n\n        if (_updateNow) {\n            _mint(msg.sender, SWAP_MINT_AMOUNT);\n        }\n\n        emit SoldNFT(getFurionId(_id), msg.sender);\n    }\n\n    /**\n     * @dev Buy NFT from pool by paying 1000 pool tokens\n     *\n     * @param _updateNow Determines if burning is done immediately or skipped\n     *        because of batch purchase\n     */\n    function _buy(uint256 _id, bool _updateNow) private {\n        if (_updateNow) {\n            _burn(msg.sender, SWAP_MINT_AMOUNT);\n\n            FUR.transferFrom(msg.sender, incomeMaker, buyFee);\n        }\n\n        _transferOutNFT(msg.sender, _id);\n\n        emit BoughtNFT(getFurionId(_id), msg.sender);\n    }\n\n    function _lock(uint256 _id, bool _updateNow) private {\n        _transferInNFT(_id);\n\n        if (_updateNow) {\n            FUR.transferFrom(msg.sender, incomeMaker, lockFee);\n\n            _mint(msg.sender, LOCK_MINT_AMOUNT);\n        }\n\n        bytes32 fId = getFurionId(_id);\n\n        lockInfo[fId].locker = msg.sender;\n        uint256 _releaseTime = block.timestamp + 30 * 24 * 60 * 60;\n        lockInfo[fId].releaseTime = _releaseTime;\n\n        emit LockedNFT(fId, msg.sender, block.timestamp, _releaseTime);\n    }\n\n    function _transferInNFT(uint256 _id) internal {\n        bytes memory data;\n\n        if (nft == KITTIES) {\n            // CryptoKitties\n            data = abi.encodeWithSignature(\n                \"transferFrom(address,address,uint256)\",\n                msg.sender,\n                address(this),\n                _id\n            );\n        } else if (nft == PUNKS) {\n            // CryptoPunks\n            bytes memory punksIndexToOwner = abi.encodeWithSignature(\n                \"punkIndexToAddress(uint256)\",\n                _id\n            );\n            (bool _success, bytes memory result) = nft.staticcall(\n                punksIndexToOwner\n            );\n            address punkOwner = abi.decode(result, (address));\n            require(\n                _success && punkOwner == msg.sender,\n                \"SeparatePool: Punk ownership check failed\"\n            );\n            data = abi.encodeWithSignature(\"buyPunk(uint256)\", _id);\n        } else {\n            // ERC 721\n            data = abi.encodeWithSignature(\n                \"safeTransferFrom(address,address,uint256)\",\n                msg.sender,\n                address(this),\n                _id\n            );\n        }\n\n        (bool success, bytes memory returnData) = nft.call(data);\n        require(success, string(returnData));\n\n        inPool.push(uint16(_id));\n    }\n\n    function _transferOutNFT(address _dst, uint256 _id) internal {\n        bytes memory data;\n\n        if (nft == KITTIES) {\n            // CryptoKitties\n            data = abi.encodeWithSignature(\n                \"transfer(address,uint256)\",\n                _dst,\n                _id\n            );\n        } else if (nft == PUNKS) {\n            // CryptoPunks\n            data = abi.encodeWithSignature(\n                \"transferPunk(address,uint256)\",\n                _dst,\n                _id\n            );\n        } else {\n            // ERC 721\n            data = abi.encodeWithSignature(\n                \"safeTransferFrom(address,address,uint256)\",\n                address(this),\n                _dst,\n                _id\n            );\n        }\n\n        (bool success, bytes memory returnData) = nft.call(data);\n        require(success, string(returnData));\n\n        _removeElement(_id);\n    }\n\n    /**\n     * @notice Remove ID of NFT that is no longer in pool from inPool array\n     */\n    function _removeElement(uint256 _idToRemove) internal {\n        uint256 length = inPool.length;\n\n        for (uint256 i; i < length; ) {\n            if (inPool[i] == uint16(_idToRemove)) {\n                inPool[i] = inPool[length - 1];\n                inPool.pop();\n                break;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n"
    },
    "contracts/separate-pool/interfaces/ISeparatePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\ninterface ISeparatePool is IERC721Receiver {\n    function factory() external view returns (address);\n\n    function owner() external view returns (address);\n\n    function changeOwner(address _newOwner) external;\n\n    function setFur(address _newFur) external;\n\n    function sell(uint256 _id) external;\n\n    function buy(uint256 _id) external;\n\n    function lock(uint256 _id) external;\n\n    function redeem(uint256 _id) external;\n\n    function release(uint256 _id) external;\n}\n"
    },
    "contracts/separate-pool/interfaces/ISeparatePoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ISeparatePoolFactory {\n    function numOfPools() external view returns (uint256 totalPools);\n\n    function getAllNfts() external view returns (address[] memory nftsWithPool);\n\n    function getAllPools()\n        external\n        view\n        returns (address[] memory poolAddresses);\n\n    function getNftByPool(address _poolAddress) external view returns (address);\n\n    function createPool(address _nftAddress)\n        external\n        returns (address poolAddress);\n}\n"
    },
    "contracts/IChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IChecker {\n    function isFurionToken(address _tokenAddress) external view returns (bool);\n\n    function addToken(address _tokenAddress) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/money-market/TokenStorages.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ExponentialNoError.sol\";\nimport \"./interfaces/IRiskManager.sol\";\nimport \"./interfaces/IInterestRateModel.sol\";\nimport \"./interfaces/IPriceOracle.sol\";\nimport \"../IChecker.sol\";\n\n// name, symbol, decimals, totalSupply, balances, allowances in ERC20 contract\ncontract TokenBaseStorage is ExponentialNoError {\n    bool public constant IS_FTOKEN = true;\n\n    IRiskManager public riskManager;\n\n    IInterestRateModel public interestRateModel;\n\n    IPriceOracle public oracle;\n\n    IChecker public checker;\n\n    // Administrator for the market\n    address public admin;\n\n    // Pending administrator for the market\n    address public pendingAdmin;\n\n    // Max borrow rate per block (0.0005%)\n    uint256 internal constant BORROW_RATE_MAX_MANTISSA = 5e12;\n\n    // Maximum fraction of interest that can be set aside for reserves\n    uint256 internal constant RESERVE_FACTOR_MAX_MANTISSA = 1e18; // 100%\n\n    // 50 underlying = 1 fToken\n    uint256 internal initialExchangeRateMantissa;\n\n    uint256 public reserveFactorMantissa;\n\n    // Block number that interest is last accrued at\n    uint256 public lastAccrualBlock;\n\n    // Accumulator for calculating interest\n    uint256 public borrowIndex;\n\n    uint256 public totalCash;\n\n    uint256 public totalBorrows;\n\n    uint256 public totalReserves;\n\n    // Track user borrowing state\n    struct BorrowSnapshot {\n        // Borrow balance when last was made\n        uint256 principal;\n        // borrowIndex when last borrow was made\n        uint256 interestIndex;\n    }\n\n    mapping(address => BorrowSnapshot) internal accountBorrows;\n\n    // Percentage of seized tokens that goes to market reserve, 0 by default\n    uint256 public protocolSeizeShareMantissa;\n\n    struct LiquidationProtection {\n        address borrower;\n        address liquidator;\n        uint128 value;\n        uint128 tokenSeized;\n    }\n\n    // Block timestamp -> liquidation protectin detail\n    mapping(uint256 => LiquidationProtection) public liquidationProtection;\n}\n\ncontract FErc20Storage {\n    address public underlying;\n}\n"
    },
    "contracts/money-market/ExponentialNoError.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\n *         `Exp({mantissa: 5100000000000000000})`.\n */\ncontract ExponentialNoError {\n    uint256 constant expScale = 1e18;\n    uint256 constant doubleScale = 1e36;\n    uint256 constant halfExpScale = expScale / 2;\n    uint256 constant mantissaOne = expScale;\n\n    struct Exp {\n        uint256 mantissa;\n    }\n\n    struct Double {\n        uint256 mantissa;\n    }\n\n    /**\n     * @dev Truncates the given exp to a whole number value.\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\n     */\n    function truncate(Exp memory _exp) internal pure returns (uint256) {\n        // Note: We are not using careful math here as we're performing a division that cannot fail\n        return _exp.mantissa / expScale;\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\n     */\n    function mul_ScalarTruncate(Exp memory _a, uint256 _scalar)\n        internal\n        pure\n        returns (uint256)\n    {\n        Exp memory product = mul_(_a, _scalar);\n        return truncate(product);\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\n     */\n    function mul_ScalarTruncateAddUInt(\n        Exp memory _a,\n        uint256 _scalar,\n        uint256 _addend\n    ) internal pure returns (uint256) {\n        Exp memory product = mul_(_a, _scalar);\n        return add_(truncate(product), _addend);\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, truncate, then minus an unsigned integer, returning an unsigned integer.\n     */\n    function mul_ScalarTruncateSubUInt(\n        Exp memory _a,\n        uint256 _scalar,\n        uint256 _minus\n    ) internal pure returns (uint256) {\n        Exp memory product = mul_(_a, _scalar);\n        return sub_(truncate(product), _minus);\n    }\n\n    /**\n     * @dev Checks if first Exp is less than second Exp.\n     */\n    function lessThanExp(Exp memory _left, Exp memory _right)\n        internal\n        pure\n        returns (bool)\n    {\n        return _left.mantissa < _right.mantissa;\n    }\n\n    /**\n     * @dev Checks if left Exp <= right Exp.\n     */\n    function lessThanOrEqualExp(Exp memory _left, Exp memory _right)\n        internal\n        pure\n        returns (bool)\n    {\n        return _left.mantissa <= _right.mantissa;\n    }\n\n    /**\n     * @dev Checks if left Exp > right Exp.\n     */\n    function greaterThanExp(Exp memory _left, Exp memory _right)\n        internal\n        pure\n        returns (bool)\n    {\n        return _left.mantissa > _right.mantissa;\n    }\n\n    /**\n     * @dev returns true if Exp is exactly zero\n     */\n    function isZeroExp(Exp memory _value) internal pure returns (bool) {\n        return _value.mantissa == 0;\n    }\n\n    function safe224(uint256 _n, string memory _errorMessage)\n        internal\n        pure\n        returns (uint224)\n    {\n        require(_n < 2**224, _errorMessage);\n        return uint224(_n);\n    }\n\n    function safe32(uint256 _n, string memory _errorMessage)\n        internal\n        pure\n        returns (uint32)\n    {\n        require(_n < 2**32, _errorMessage);\n        return uint32(_n);\n    }\n\n    function add_(Exp memory _a, Exp memory _b)\n        internal\n        pure\n        returns (Exp memory)\n    {\n        return Exp({mantissa: add_(_a.mantissa, _b.mantissa)});\n    }\n\n    function add_(Double memory _a, Double memory _b)\n        internal\n        pure\n        returns (Double memory)\n    {\n        return Double({mantissa: add_(_a.mantissa, _b.mantissa)});\n    }\n\n    function add_(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a + _b;\n    }\n\n    function sub_(Exp memory _a, Exp memory _b)\n        internal\n        pure\n        returns (Exp memory)\n    {\n        return Exp({mantissa: sub_(_a.mantissa, _b.mantissa)});\n    }\n\n    function sub_(Double memory _a, Double memory _b)\n        internal\n        pure\n        returns (Double memory)\n    {\n        return Double({mantissa: sub_(_a.mantissa, _b.mantissa)});\n    }\n\n    function sub_(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a - _b;\n    }\n\n    function mul_(Exp memory _a, Exp memory _b)\n        internal\n        pure\n        returns (Exp memory)\n    {\n        return Exp({mantissa: mul_(_a.mantissa, _b.mantissa) / expScale});\n    }\n\n    function mul_(Exp memory _a, uint256 _b)\n        internal\n        pure\n        returns (Exp memory)\n    {\n        return Exp({mantissa: mul_(_a.mantissa, _b)});\n    }\n\n    function mul_(uint256 _a, Exp memory _b) internal pure returns (uint256) {\n        return mul_(_a, _b.mantissa) / expScale;\n    }\n\n    function mul_(Double memory _a, Double memory _b)\n        internal\n        pure\n        returns (Double memory)\n    {\n        return Double({mantissa: mul_(_a.mantissa, _b.mantissa) / doubleScale});\n    }\n\n    function mul_(Double memory _a, uint256 _b)\n        internal\n        pure\n        returns (Double memory)\n    {\n        return Double({mantissa: mul_(_a.mantissa, _b)});\n    }\n\n    function mul_(uint256 _a, Double memory _b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return mul_(_a, _b.mantissa) / doubleScale;\n    }\n\n    function mul_(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a * _b;\n    }\n\n    function div_(Exp memory _a, Exp memory _b)\n        internal\n        pure\n        returns (Exp memory)\n    {\n        return Exp({mantissa: div_(mul_(_a.mantissa, expScale), _b.mantissa)});\n    }\n\n    function div_(Exp memory _a, uint256 _b)\n        internal\n        pure\n        returns (Exp memory)\n    {\n        return Exp({mantissa: div_(_a.mantissa, _b)});\n    }\n\n    function div_(uint256 _a, Exp memory _b) internal pure returns (uint256) {\n        return div_(mul_(_a, expScale), _b.mantissa);\n    }\n\n    function div_(Double memory _a, Double memory _b)\n        internal\n        pure\n        returns (Double memory)\n    {\n        return\n            Double({\n                mantissa: div_(mul_(_a.mantissa, doubleScale), _b.mantissa)\n            });\n    }\n\n    function div_(Double memory _a, uint256 _b)\n        internal\n        pure\n        returns (Double memory)\n    {\n        return Double({mantissa: div_(_a.mantissa, _b)});\n    }\n\n    function div_(uint256 _a, Double memory _b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return div_(mul_(_a, doubleScale), _b.mantissa);\n    }\n\n    function div_(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a / _b;\n    }\n\n    function fraction(uint256 _a, uint256 _b)\n        internal\n        pure\n        returns (Double memory)\n    {\n        return Double({mantissa: div_(mul_(_a, doubleScale), _b)});\n    }\n}\n"
    },
    "contracts/money-market/interfaces/IRiskManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IRiskManager {\n    /// @notice Emitted when pendingAdmin is changed\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n    /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\n    event NewAdmin(address oldAdmin, address newAdmin);\n\n    /// @notice Emitted when an admin supports a market\n    event MarketListed(address fToken);\n\n    /// @notice Emitted when an account enters a market\n    event MarketEntered(address fToken, address account);\n\n    /// @notice Emitted when an account exits a market\n    event MarketExited(address fToken, address account);\n\n    /// @notice Emitted when close factor is changed by admin\n    event NewCloseFactor(\n        uint256 oldCloseFactorMantissa,\n        uint256 newCloseFactorMantissa\n    );\n\n    /// @notice Emitted when a collateral factor is changed by admin\n    event NewCollateralFactor(\n        address fToken,\n        uint256 oldCollateralFactorMantissa,\n        uint256 newCollateralFactorMantissa\n    );\n\n    /// @notice Emitted when price oracle is changed\n    event NewPriceOracle(address oldPriceOracle, address newPriceOracle);\n\n    /// @notice Emitted when an action is paused globally\n    event ActionPausedGlobal(string action, bool pauseState);\n\n    /// @notice Emitted when an action is paused on a market\n    event ActionPausedMarket(address fToken, string action, bool pauseState);\n\n    function isRiskManager() external returns (bool);\n\n    function getMarketsEntered(address _account)\n        external\n        view\n        returns (address[] memory);\n\n    function checkListed(address _fToken) external view returns (bool);\n\n    function enterMarkets(address[] memory _fTokens) external;\n\n    function exitMarket(address _fToken) external;\n\n    function supplyAllowed(address _fToken) external view returns (bool);\n\n    function redeemAllowed(\n        address _fToken,\n        address _redeemer,\n        uint256 _redeemTokens\n    ) external view returns (bool);\n\n    function borrowAllowed(\n        address _fToken,\n        address _borrower,\n        uint256 _borrowAmount\n    ) external returns (bool);\n\n    function repayBorrowAllowed(address _fToken) external returns (bool);\n\n    function liquidateBorrowAllowed(\n        address _fTokenBorrowed,\n        address _fTokenCollateral,\n        address _borrower,\n        uint256 _repayAmount\n    ) external returns (bool);\n\n    function seizeAllowed(\n        address _fTokenCollateral,\n        address _fTokenBorrowed,\n        address _borrower,\n        uint256 _seizeTokens\n    ) external view returns (bool allowed, bool isCollateralTier);\n\n    function transferAllowed(\n        address _fToken,\n        address _src,\n        uint256 _amount\n    ) external view returns (bool);\n\n    function initiateLiquidation(address _account) external;\n\n    function closeLiquidation(address _account) external;\n\n    function liquidateCalculateSeizeTokens(\n        address _borrower,\n        address _fTokenBorrowed,\n        address _fTokenCollateral,\n        uint256 _repayAmount\n    ) external view returns (uint256 seizeTokens, uint256 repayValue);\n}\n"
    },
    "contracts/money-market/interfaces/IInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IInterestRateModel {\n    function isInterestRateModel() external view returns (bool);\n\n    /**\n     * @notice Calculates the current borrow interest rate per block\n     * @param _cash The total amount of cash the market has\n     * @param _borrows The total amount of borrows the market has outstanding\n     * @param _reserves The total amount of reserves the market has\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getBorrowRate(\n        uint256 _cash,\n        uint256 _borrows,\n        uint256 _reserves\n    ) external view returns (uint256);\n\n    /**\n     * @notice Calculates the current supply interest rate per block\n     * @param _cash The total amount of cash the market has\n     * @param _borrows The total amount of borrows the market has outstanding\n     * @param _reserves The total amount of reserves the market has\n     * @param _reserveFactorMantissa The current reserve factor the market has\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getSupplyRate(\n        uint256 _cash,\n        uint256 _borrows,\n        uint256 _reserves,\n        uint256 _reserveFactorMantissa\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/money-market/interfaces/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPriceOracle {\n    /**\n     * @notice Get the underlying price of a fToken asset\n     * @param _fToken Address of the fToken to get the underlying price of\n     * @return The underlying asset price mantissa (scaled by 1e18).\n     *  Zero means the price is unavailable.\n     */\n    function getUnderlyingPrice(address _fToken)\n        external\n        view\n        returns (uint256, uint256);\n}\n"
    },
    "contracts/money-market/TokenBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\";\nimport \"./TokenStorages.sol\";\nimport \"./interfaces/ITokenBase.sol\";\nimport \"./interfaces/IRiskManager.sol\";\nimport \"./interfaces/IInterestRateModel.sol\";\nimport \"./interfaces/IPriceOracle.sol\";\nimport \"./interfaces/IFErc20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../IChecker.sol\";\nimport \"hardhat/console.sol\";\n\nabstract contract TokenBase is\n    ERC20PermitUpgradeable,\n    TokenBaseStorage,\n    ITokenBase\n{\n    function __TokenBase_init(\n        address _riskManager,\n        address _interestRateModel,\n        address _priceOracle,\n        address _checker,\n        string memory _name,\n        string memory _symbol\n    ) internal onlyInitializing {\n        __ERC20Permit_init(_name);\n        __ERC20_init(_name, _symbol);\n\n        require(\n            IRiskManager(_riskManager).isRiskManager(),\n            \"TokenBase: Not risk manager contract\"\n        );\n        riskManager = IRiskManager(_riskManager);\n\n        lastAccrualBlock = block.number;\n        borrowIndex = 1e18;\n\n        require(\n            IInterestRateModel(_interestRateModel).isInterestRateModel(),\n            \"TokenBase: Not interst rate model contract\"\n        );\n        interestRateModel = IInterestRateModel(_interestRateModel);\n\n        oracle = IPriceOracle(_priceOracle);\n\n        checker = IChecker(_checker);\n\n        initialExchangeRateMantissa = 50e18;\n\n        admin = msg.sender;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Not authorized to call\");\n        _;\n    }\n\n    /********************************* Admin **********************************/\n\n    /**\n     * @notice Begins transfer of admin rights. The newPendingAdmin MUST call\n     *  `acceptAdmin` to finalize the transfer.\n     * @dev Admin function to begin change of admin. The newPendingAdmin MUST\n     *  call `acceptAdmin` to finalize the transfer.\n     * @param _newPendingAdmin New pending admin.\n     */\n    function setPendingAdmin(address _newPendingAdmin)\n        external\n        override\n        onlyAdmin\n    {\n        // Save current value, if any, for inclusion in log\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store pendingAdmin with value newPendingAdmin\n        pendingAdmin = _newPendingAdmin;\n\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n        emit NewPendingAdmin(oldPendingAdmin, _newPendingAdmin);\n    }\n\n    /**\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n     * @dev Admin function for pending admin to accept role and update admin\n     */\n    function acceptAdmin() external override {\n        // Check caller is pendingAdmin\n        require(msg.sender == pendingAdmin, \"TokenBase: Not pending admin\");\n\n        // Save current values for inclusion in log\n        address oldAdmin = admin;\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store admin with value pendingAdmin\n        admin = pendingAdmin;\n\n        // Clear the pending value\n        pendingAdmin = address(0);\n\n        emit NewAdmin(oldAdmin, admin);\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n    }\n\n    function setReserveFactor(uint256 _newReserveFactorMantissa)\n        external\n        onlyAdmin\n    {\n        accrueInterest();\n\n        // Ensure market state is up-to-date\n        require(\n            lastAccrualBlock == block.number,\n            \"TokenBase: Market state not yet updated\"\n        );\n        require(\n            _newReserveFactorMantissa < RESERVE_FACTOR_MAX_MANTISSA,\n            \"TokenBase: Invalid reserve factor\"\n        );\n\n        uint256 oldReserveFactorMantissa = reserveFactorMantissa;\n        reserveFactorMantissa = _newReserveFactorMantissa;\n\n        emit NewReserveFactor(\n            oldReserveFactorMantissa,\n            _newReserveFactorMantissa\n        );\n    }\n\n    function setPriceOracle(address _newOracle) external onlyAdmin {\n        address oldOracle = address(oracle);\n\n        oracle = IPriceOracle(_newOracle);\n\n        emit NewPriceOracle(oldOracle, _newOracle);\n    }\n\n    /********************************** Core **********************************/\n\n    function isFToken() public pure returns (bool) {\n        return IS_FTOKEN;\n    }\n\n    function getLastAccrualBlock() public view returns (uint256) {\n        return lastAccrualBlock;\n    }\n\n    function getRiskManager() public view returns (address) {\n        return address(riskManager);\n    }\n\n    /**\n     * @notice Get the underlying balance\n     * @dev This also accrues interest in a transaction\n     * @param _account The address of the account to query\n     * @return The amount of underlying underlying asset\n     */\n    function balanceOfUnderlying(address _account)\n        public\n        view\n        returns (uint256)\n    {\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\n        return mul_ScalarTruncate(exchangeRate, balanceOf(_account));\n    }\n\n    /**\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\n     * @param _account Address of the account to snapshot\n     * @return (token balance, borrow balance, exchange rate mantissa)\n     */\n    function getAccountSnapshot(address _account)\n        external\n        view\n        override\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            balanceOf(_account),\n            borrowBalanceCurrent(_account),\n            exchangeRateCurrent()\n        );\n    }\n\n    /**\n     * @notice Returns the current per-block borrow interest rate for this cToken\n     * @return The borrow interest rate per block, scaled by 1e18\n     */\n    function borrowRatePerBlock() external view override returns (uint256) {\n        (\n            uint256 _totalBorrows,\n            uint256 _totalReserves,\n\n        ) = accrueInterestCalc();\n\n        return\n            interestRateModel.getBorrowRate(\n                totalCash,\n                _totalBorrows,\n                _totalReserves\n            );\n    }\n\n    /**\n     * @notice Returns the current per-block supply interest rate for this cToken\n     * @return The supply interest rate per block, scaled by 1e18\n     */\n    function supplyRatePerBlock() external view override returns (uint256) {\n        (\n            uint256 _totalBorrows,\n            uint256 _totalReserves,\n\n        ) = accrueInterestCalc();\n\n        return\n            interestRateModel.getSupplyRate(\n                totalCash,\n                _totalBorrows,\n                _totalReserves,\n                reserveFactorMantissa\n            );\n    }\n\n    /**\n     * @notice Returns the current total borrows plus accrued interest\n     * @return The total borrows with interest\n     */\n    function totalBorrowsCurrent() public view returns (uint256) {\n        (uint256 _totalBorrows, , ) = accrueInterestCalc();\n\n        return _totalBorrows;\n    }\n\n    function borrowBalanceCurrent(address _account)\n        public\n        view\n        returns (uint256)\n    {\n        (, , uint256 _borrowIndex) = accrueInterestCalc();\n\n        // Get borrowBalance and borrowIndex\n        BorrowSnapshot memory snapshot = accountBorrows[_account];\n\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\n         * Rather than failing the calculation with a division by 0, we immediately\n         * return 0 in this case.\n         */\n        if (snapshot.principal == 0) {\n            return 0;\n        }\n\n        /* Calculate new borrow balance using the interest index:\n         *  principal * how much borrowIndex has increased\n         */\n        return (snapshot.principal * _borrowIndex) / snapshot.interestIndex;\n    }\n\n    /**\n     * @notice Return the borrow balance of account based on stored data\n     * @param _account The address whose balance should be calculated\n     * @return The calculated balance\n     *\n     * NOTE: Despite being free to call, it may not be accurate when called externally\n     * by non-Furion contracts because lastAccrualBlock will not be equal to current\n     * block number provided that accrueInterest() is not called beforehand, meaning\n     * that market is not up-to-date when the function is called. Call 'current' version\n     * functions for accurate results.\n     */\n    function borrowBalanceStored(address _account)\n        public\n        view\n        returns (uint256)\n    {\n        // Get borrowBalance and borrowIndex\n        BorrowSnapshot memory snapshot = accountBorrows[_account];\n\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\n         * Rather than failing the calculation with a division by 0, we immediately\n         * return 0 in this case.\n         */\n        if (snapshot.principal == 0) {\n            return 0;\n        }\n\n        /* Calculate new borrow balance using the interest index:\n         *  principal * how much borrowIndex has increased\n         */\n        return (snapshot.principal * borrowIndex) / snapshot.interestIndex;\n    }\n\n    function exchangeRateCurrent() public view returns (uint256) {\n        (\n            uint256 _totalBorrows,\n            uint256 _totalReserves,\n\n        ) = accrueInterestCalc();\n\n        uint256 _totalSupply = totalSupply();\n        if (_totalSupply == 0) {\n            /*\n             * If there are no tokens minted:\n             *  exchangeRate = initialExchangeRate\n             */\n            return initialExchangeRateMantissa;\n        } else {\n            /*\n             * Otherwise:\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\n             */\n            uint256 cashPlusBorrowsMinusReserves = totalCash +\n                _totalBorrows -\n                _totalReserves;\n            uint256 exchangeRate = (cashPlusBorrowsMinusReserves * expScale) /\n                _totalSupply;\n\n            return exchangeRate;\n        }\n    }\n\n    /**\n     * @notice Calculates the exchange rate from the underlying to the fToken\n     * @dev This function does not accrue interest before calculating the exchange rate\n     * @return calculated exchange rate scaled by 1e18\n     *\n     * NOTE: Despite being free to call, it may not be accurate when called externally\n     * by non-Furion contracts because lastAccrualBlock will not be equal to current\n     * block number provided that accrueInterest() is not called beforehand, meaning\n     * that market is not up-to-date when the function is called. Call 'current' version\n     * functions for accurate results.\n     */\n    function exchangeRateStored() public view returns (uint256) {\n        uint256 _totalSupply = totalSupply();\n        if (_totalSupply == 0) {\n            /*\n             * If there are no tokens minted:\n             *  exchangeRate = initialExchangeRate\n             */\n            return initialExchangeRateMantissa;\n        } else {\n            /*\n             * Otherwise:\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\n             */\n            uint256 cashPlusBorrowsMinusReserves = totalCash +\n                totalBorrows -\n                totalReserves;\n            uint256 exchangeRate = (cashPlusBorrowsMinusReserves * expScale) /\n                _totalSupply;\n\n            return exchangeRate;\n        }\n    }\n\n    /**\n     * @notice CALCULATE borrow index and market info of current block\n     * @return New total borrow, new total reserve, new borrow index\n     */\n    function accrueInterestCalc()\n        internal\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 currentBlockNumber = block.number;\n        uint256 _lastAccrualBlock = lastAccrualBlock;\n\n        if (currentBlockNumber == _lastAccrualBlock) {\n            return (totalBorrows, totalReserves, borrowIndex);\n        }\n\n        uint256 borrowsPrior = totalBorrows;\n        uint256 reservesPrior = totalReserves;\n        uint256 borrowIndexPrior = borrowIndex;\n\n        // Calculate the current borrow interest rate\n        uint256 borrowRatePerBlockMantissa = interestRateModel.getBorrowRate(\n            totalCash,\n            borrowsPrior,\n            reservesPrior\n        );\n        require(\n            borrowRatePerBlockMantissa <= BORROW_RATE_MAX_MANTISSA,\n            \"borrow rate is absurdly high\"\n        );\n\n        // Calculate the number of blocks elapsed since the last accrual\n        uint256 blockDelta = currentBlockNumber - _lastAccrualBlock;\n\n        /*\n         * Calculate the interest accumulated into borrows and reserves and the new index:\n         *  simpleInterestFactor = borrowRate * blockDelta\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\n         */\n\n        Exp memory simpleInterestFactor = mul_(\n            Exp({mantissa: borrowRatePerBlockMantissa}),\n            blockDelta\n        );\n        uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(\n            simpleInterestFactor,\n            borrowIndexPrior,\n            borrowIndexPrior\n        );\n\n        // Need to use the same method used to calculate borrow balance (i.e. multiply\n        // by how much borrowIndex increased) of an account to prevent mismatch due\n        // to roudings during arithmetic operations\n        uint256 totalBorrowsNew = (borrowsPrior * borrowIndexNew) /\n            borrowIndexPrior;\n        uint256 interestAccumulated = totalBorrowsNew - borrowsPrior;\n        uint256 totalReservesNew = mul_ScalarTruncateAddUInt(\n            Exp({mantissa: reserveFactorMantissa}),\n            interestAccumulated,\n            reservesPrior\n        );\n\n        return (totalBorrowsNew, totalReservesNew, borrowIndexNew);\n    }\n\n    /**\n     * @notice WRITE & UPDATE borrow index and market info\n     */\n    function accrueInterest() public {\n        // Short-circuit accumulating 0 interest\n        if (lastAccrualBlock == block.number) {\n            return;\n        }\n\n        // We write the calculated values into storage\n        (totalBorrows, totalReserves, borrowIndex) = accrueInterestCalc();\n        lastAccrualBlock = block.number;\n    }\n\n    /**\n     * @notice User supplies assets into the market and receives cTokens in exchange\n     * @dev Assumes interest has already been accrued up to the current block\n     * @param _supplyAmount The amount of the underlying asset to supply\n     */\n    function supplyInternal(address _supplier, uint256 _supplyAmount) internal {\n        // Update market state\n        accrueInterest();\n\n        require(\n            riskManager.supplyAllowed(address(this)),\n            \"TokenBase: Supply disallowed by risk manager\"\n        );\n        // Ensure market state is up-to-date\n        require(\n            lastAccrualBlock == block.number,\n            \"TokenBase: Market state not yet updated\"\n        );\n\n        // We can call the stored version here because accrueInterest() has already\n        // been called earlier\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStored()});\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         *  We call `doTransferIn` giving the supplier and the supplyAmount.\n         *  Note: The fToken must handle variations between ERC-20 and ETH underlying.\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\n         *  side-effects occurred. On success, the fToken (market) holds\n         *  an additional `_supplyAmount` of cash.\n         */\n        doTransferIn(_supplier, _supplyAmount);\n\n        /*\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\n         *  mintTokens = actualMintAmount / exchangeRate\n         */\n\n        uint256 mintTokens = div_(_supplyAmount, exchangeRate);\n        _mint(_supplier, mintTokens);\n\n        /* We emit a Supply event, and a Transfer event */\n        emit Supply(_supplier, _supplyAmount, mintTokens);\n    }\n\n    /**\n     * @notice User redeems cTokens in exchange for the underlying asset\n     * @dev Assumes interest has already been accrued up to the current block\n     * @param _redeemer The address of the account which is redeeming the tokens\n     * @param _redeemTokens The number of fTokens to redeem into underlying\n     * @param _redeemAmount The number of underlying tokens to receive from redeeming fTokens\n     */\n    function redeemInternal(\n        address _redeemer,\n        uint256 _redeemTokens,\n        uint256 _redeemAmount\n    ) internal {\n        // Update market state\n        accrueInterest();\n\n        require(\n            _redeemTokens == 0 || _redeemAmount == 0,\n            \"TokenBase: One of redeemTokens or redeemAmount must be zero\"\n        );\n\n        // We can call the stored version because accrueInterest() has already been\n        // called earlier\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStored()});\n\n        uint256 redeemTokens;\n        uint256 redeemAmount;\n        // Calculate amount that can be redeemed given tokens supplied OR\n        // tokens needed for redeeming the given amount of underlying asset\n        if (_redeemTokens > 0) {\n            redeemTokens = _redeemTokens;\n            redeemAmount = mul_ScalarTruncate(exchangeRate, _redeemTokens);\n        } else {\n            redeemTokens = div_(_redeemAmount, exchangeRate);\n            redeemAmount = _redeemAmount;\n        }\n\n        require(\n            riskManager.redeemAllowed(address(this), _redeemer, redeemTokens),\n            \"TokenBase: Redeem disallowed by risk manager\"\n        );\n        // Ensure market is up-to-date\n        require(\n            lastAccrualBlock == block.number,\n            \"TokenBase: Market state not yet updated\"\n        );\n        // Fail gracefully if protocol has insufficient cash\n        require(\n            totalCash > redeemAmount,\n            \"TokenBase: Market has insufficient cash\"\n        );\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        _burn(_redeemer, redeemTokens);\n\n        /*\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  On success, the cToken has redeemAmount less of cash.\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n         */\n        doTransferOut(payable(_redeemer), redeemAmount);\n\n        emit Redeem(_redeemer, redeemAmount, redeemTokens);\n    }\n\n    /**\n     * @notice Users borrow assets from the protocol to their own address\n     * @param _borrowAmount The amount of the underlying asset to borrow\n     */\n    function borrowInternal(address _borrower, uint256 _borrowAmount) internal {\n        // Update market state\n        accrueInterest();\n\n        require(\n            riskManager.borrowAllowed(address(this), _borrower, _borrowAmount),\n            \"TokenBase: Borrow disallowed by risk manager\"\n        );\n        // Ensure market is up-to-date\n        require(\n            lastAccrualBlock == block.number,\n            \"TokenBase: Market state not yet updated\"\n        );\n        // Fail gracefully if protocol has insufficient cash\n        require(\n            totalCash > _borrowAmount,\n            \"TokenBase: Market has insufficient cash\"\n        );\n\n        // We calculate the new borrower and total borrow balances, failing on overflow\n        //\n        // stored version can be used here because accrueInterest() has already\n        // been called earlier\n        uint256 borrowBalancePrev = borrowBalanceStored(_borrower);\n        uint256 borrowBalanceNew = borrowBalancePrev + _borrowAmount;\n        uint256 totalBorrowsNew = totalBorrows + _borrowAmount;\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         * We write the previously calculated values into storage.\n         *  Note: Avoid token reentrancy attacks by writing increased borrow before external transfer.\n        `*/\n        accountBorrows[_borrower].principal = borrowBalanceNew;\n        accountBorrows[_borrower].interestIndex = borrowIndex;\n        totalBorrows = totalBorrowsNew;\n\n        /*\n         * We invoke doTransferOut for the borrower and the borrowAmount.\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  On success, the cToken borrowAmount less of cash.\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n         */\n        doTransferOut(payable(_borrower), _borrowAmount);\n\n        /* We emit a Borrow event */\n        emit Borrow(\n            _borrower,\n            _borrowAmount,\n            borrowBalanceNew,\n            totalBorrowsNew\n        );\n    }\n\n    /**\n     * @notice Borrows are repaid by another user (possibly the borrower).\n     * @param _payer the account paying off the borrow\n     * @param _borrower the account with the debt being payed off\n     * @param _repayAmount the amount of underlying tokens being returned, or -1 for the full outstanding amount\n     */\n    function repayBorrowInternal(\n        address _payer,\n        address _borrower,\n        uint256 _repayAmount\n    ) internal {\n        // Update market state\n        accrueInterest();\n\n        require(\n            riskManager.repayBorrowAllowed(address(this)),\n            \"TokenBase: Repay disallowed by risk manager\"\n        );\n        // Ensure market is up-to-date\n        require(\n            lastAccrualBlock == block.number,\n            \"TokenBase: Market state not yet updated\"\n        );\n\n        // We fetch the amount the borrower owes, with accumulated interest\n        //\n        // Stored version can be used here because accrueInterest() has already\n        // been called earlier\n        uint256 borrowBalancePrev = borrowBalanceStored(_borrower);\n\n        // If repayAmount == max value of uint256, repay total amount owed,\n        // else repay given amount\n        uint256 actualRepayAmount = _repayAmount == type(uint256).max\n            ? borrowBalancePrev\n            : _repayAmount;\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         * We call doTransferIn for the payer and the repayAmount\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  On success, the cToken holds an additional repayAmount of cash.\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\n         *   it returns the amount actually transferred, in case of a fee.\n         */\n        doTransferIn(_payer, actualRepayAmount);\n\n        /*\n         * We calculate the new borrower and total borrow balances, failing on underflow:\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\n         */\n        uint256 borrowBalanceNew = actualRepayAmount > borrowBalancePrev\n            ? 0\n            : borrowBalancePrev - actualRepayAmount;\n        uint256 totalBorrowsNew = actualRepayAmount > totalBorrows\n            ? 0\n            : totalBorrows - actualRepayAmount;\n\n        /* We write the previously calculated values into storage */\n        accountBorrows[_borrower].principal = borrowBalanceNew;\n        accountBorrows[_borrower].interestIndex = borrowIndex;\n        totalBorrows = totalBorrowsNew;\n\n        /* We emit a RepayBorrow event */\n        emit RepayBorrow(\n            _payer,\n            _borrower,\n            actualRepayAmount,\n            borrowBalanceNew,\n            totalBorrowsNew\n        );\n    }\n\n    /**\n     * @notice The liquidator liquidates the borrower's collateral.\n     *  The collateral seized is transferred to the liquidator.\n     * @param _borrower The borrower of this fToken to be liquidated\n     * @param _liquidator The address repaying the borrow and seizing collateral\n     * @param _repayAmount The amount of the underlying borrowed asset to repay\n     * @param _fTokenCollateral The market in which to seize collateral from the borrower\n     */\n    function liquidateBorrowInternal(\n        address _liquidator,\n        address _borrower,\n        uint256 _repayAmount,\n        address _fTokenCollateral\n    ) internal {\n        // Update market state\n        accrueInterest();\n\n        ITokenBase collateral = ITokenBase(_fTokenCollateral);\n        // Update collateeral asset market state\n        collateral.accrueInterest();\n\n        /* Fail if liquidate not allowed */\n        require(\n            riskManager.liquidateBorrowAllowed(\n                address(this),\n                _fTokenCollateral,\n                _borrower,\n                _repayAmount\n            ),\n            \"TokenBase: Liquidation disallowed by risk manager\"\n        );\n        // Ensure borrow market is up-to-date\n        require(\n            lastAccrualBlock == block.number,\n            \"TokenBase: Market state not yet updated\"\n        );\n        // Ensure collateral market is also up-to-date\n        require(\n            collateral.getLastAccrualBlock() == block.number,\n            \"TokenBase: Collateral market state not yet updated\"\n        );\n        // Fail if borrower = liquidator\n        require(\n            _borrower != _liquidator,\n            \"TokenBase: Cannot liquidate yourself\"\n        );\n        // Fail if repayAmount = 0 or -1\n        require(\n            _repayAmount > 0 && _repayAmount != type(uint256).max,\n            \"TokenBase: Invalid repay amount\"\n        );\n\n        // Fail if repayBorrow fails\n        repayBorrowInternal(_liquidator, _borrower, _repayAmount);\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point\n\n        // Call seize functions of fTokenCollateral contract for token seizure.\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy,\n        // otherwise make an external call\n        if (_fTokenCollateral == address(this)) {\n            seizeInternal(address(this), _liquidator, _borrower, _repayAmount);\n        } else {\n            collateral.seize(_liquidator, _borrower, _repayAmount);\n        }\n\n        // Reset liquidation tracker if there are no more bad debts\n        riskManager.closeLiquidation(_borrower);\n\n        // We emit a LiquidateBorrow event\n        emit LiquidateBorrow(\n            _liquidator,\n            _borrower,\n            _repayAmount,\n            _fTokenCollateral\n        );\n    }\n\n    /**\n     * @notice Transfers collateral tokens (this market) to the liquidator.\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during\n     *  the liquidation of another fToken. Its absolutely critical to use msg.sender\n     *  as the seizer fToken and not a parameter.\n     * @param _seizer The contract calling the function for seizing the collateral\n     *   (i.e. borrowed fToken)\n     * @param _liquidator The account receiving seized collateral\n     * @param _borrower The account having collateral seized\n     * @param _repayAmount Amount of underlying tokens of seizer market the liquidator paid\n     */\n    function seizeInternal(\n        address _seizer,\n        address _liquidator,\n        address _borrower,\n        uint256 _repayAmount\n    ) internal {\n        // We calculate the number of collateral tokens that will be seized\n        (uint256 seizeTotal, uint256 repayValue) = riskManager\n            .liquidateCalculateSeizeTokens(\n                _borrower,\n                _seizer,\n                address(this),\n                _repayAmount\n            );\n\n        // Params: fTokenCollateral, fTokenBorrowed, liquidator, borrower\n        (bool allowed, bool isCollateralTier) = riskManager.seizeAllowed(\n            address(this),\n            _seizer,\n            _borrower,\n            seizeTotal\n        );\n        require(allowed, \"TokenBase: Token seizure disallowed by risk manager\");\n\n        // Fail if borrower = liquidator, already checked in `liquidaetBorrowInterna()`\n        // require(borrower != liquidator);\n\n        // Initiate liquidation protection if seized asset is collateral tier\n        if (isCollateralTier && checker.isFurionToken(address(this))) {\n            // Indirect token transfer through minting and burning\n            _burn(_borrower, seizeTotal);\n            // Store seized tokens in market contract\n            _mint(address(this), seizeTotal);\n\n            LiquidationProtection storage lp = liquidationProtection[\n                block.timestamp\n            ];\n            lp.borrower = _borrower;\n            lp.liquidator = _liquidator;\n            lp.value = uint128(repayValue);\n            lp.tokenSeized = uint128(seizeTotal);\n        } else {\n            (\n                uint256 liquidatorSeizeTokens,\n                uint256 protocolSeizeAmount,\n                uint256 totalReservesNew\n            ) = seizeAllocation(seizeTotal);\n\n            /////////////////////////\n            // EFFECTS & INTERACTIONS\n            // (No safe failures beyond this point)\n\n            // Indirect token transfer through minting and burning\n            _burn(_borrower, seizeTotal);\n            _mint(_liquidator, liquidatorSeizeTokens);\n            // We write the calculated values into storage\n            totalReserves = totalReservesNew;\n\n            emit TokenSeized(_borrower, _liquidator, liquidatorSeizeTokens);\n            emit ReservesAdded(\n                address(this),\n                protocolSeizeAmount,\n                totalReservesNew\n            );\n        }\n    }\n\n    /**\n     * @dev It is safe to set external visibility as seizeAllowed checks whether\n     *  msg.sender is listed and has the same comptroller as current market (the\n     *  market where tokens are seized)\n     */\n    function seize(\n        address _liquidator,\n        address _borrower,\n        uint256 _repayAmount\n    ) external {\n        seizeInternal(msg.sender, _liquidator, _borrower, _repayAmount);\n    }\n\n    /**\n     * @notice Calculate how much liquidators get as rewards and how much the market\n     *  gets as reserves given amount of tokens seized\n     */\n    function seizeAllocation(uint256 _seizeTotal)\n        internal\n        view\n        returns (\n            uint256 liquidatorSeizeTokens,\n            uint256 protocolSeizeAmount,\n            uint256 totalReservesNew\n        )\n    {\n        // mul_: uint, exp -> uint\n        uint256 protocolSeizeTokens = mul_(\n            _seizeTotal,\n            Exp({mantissa: protocolSeizeShareMantissa})\n        );\n\n        liquidatorSeizeTokens = _seizeTotal - protocolSeizeTokens;\n\n        // Convert amount of fToken for reserve to underlying asset\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStored()});\n        // mul_ScalarTruncate: exp, uint -> uint\n        protocolSeizeAmount = mul_ScalarTruncate(\n            exchangeRate,\n            protocolSeizeTokens\n        );\n\n        totalReservesNew = totalReserves + protocolSeizeAmount;\n    }\n\n    /**\n     * @notice Liquidators can claim seized tokens locked for liquidation protection\n     *  if the liquidated account did not pay 1.2x to reclaim tokens after 24 hours\n     *  of the liquidation.\n     * @param _timestamp Block timestamp of when the protection is initiated\n     */\n    function claimLiquidation(uint256 _timestamp) external {\n        LiquidationProtection memory lp = liquidationProtection[_timestamp];\n\n        require(\n            block.timestamp > _timestamp + 1 days,\n            \"TokenBase: Time limit not passed\"\n        );\n        require(\n            lp.value != 0,\n            \"TokenBase: Liquidation protection closed / never existed\"\n        );\n        require(\n            msg.sender == lp.liquidator,\n            \"TokenBase: Not liquidator of this liquidation\"\n        );\n\n        uint256 tokenSeized256 = uint256(lp.tokenSeized);\n\n        (\n            uint256 liquidatorSeizeTokens,\n            uint256 protocolSeizeAmount,\n            uint256 totalReservesNew\n        ) = seizeAllocation(tokenSeized256);\n\n        // Indirect token transfer through minting and burning\n        _burn(address(this), tokenSeized256);\n        _mint(msg.sender, liquidatorSeizeTokens);\n        // We write the calculated values into storage\n        totalReserves = totalReservesNew;\n\n        emit TokenSeized(lp.borrower, lp.liquidator, liquidatorSeizeTokens);\n        emit ReservesAdded(\n            address(this),\n            protocolSeizeAmount,\n            totalReservesNew\n        );\n\n        delete liquidationProtection[_timestamp];\n    }\n\n    /**\n     * @notice Borrowers who get liquidated can reclaim the seized tokens if they\n     *  pay 1.2x the amount liquidators repaid within 24 hours after liquidation.\n     * @param _timestamp Block timestamp of when the protection is initiated\n     *\n     * NOTE: Unit for getUnderlyingPrice of price oracle is ETH, therefore no need\n     * to query value.\n     */\n    function repayLiquidationWithEth(uint256 _timestamp) external payable {\n        LiquidationProtection memory lp = liquidationProtection[_timestamp];\n\n        require(\n            block.timestamp < _timestamp + 1 days,\n            \"TokenBase: Time limit passed\"\n        );\n        require(\n            lp.value != 0,\n            \"TokenBase: Liquidation protection closed / never existed\"\n        );\n\n        // 1.2x multiplier\n        uint256 valueAfterMultiplier = (uint256(lp.value) * 120) / 100;\n\n        require(\n            msg.value >= valueAfterMultiplier,\n            \"TokenBase: Not enough ETH given\"\n        );\n\n        uint256 spareEth = msg.value - valueAfterMultiplier;\n\n        // Contract immediately transfers received ETH to liquidator\n        payable(lp.liquidator).transfer(valueAfterMultiplier);\n        // Refund spare ETH\n        if (spareEth > 0) {\n            payable(msg.sender).transfer(spareEth);\n        }\n\n        // Transfer collateral fToken to borrower (msg.sender)\n        uint256 tokenSeized256 = uint256(lp.tokenSeized);\n        _burn(address(this), tokenSeized256);\n        _mint(lp.borrower, tokenSeized256);\n\n        delete liquidationProtection[_timestamp];\n    }\n\n    /**\n     * @notice Borrowers who get liquidated can reclaim the seized tokens if they\n     *  pay 1.2x the amount liquidators repaid within 24 hours after liquidation.\n     * @param _timestamp Block timestamp of when the protection is initiated\n     * @param _fToken Address of market where the underlying asset is used for repaying\n     */\n    function repayLiquidationWithErc(uint256 _timestamp, address _fToken)\n        external\n    {\n        LiquidationProtection memory lp = liquidationProtection[_timestamp];\n\n        require(\n            block.timestamp < _timestamp + 1 days,\n            \"TokenBase: Time limit passed\"\n        );\n        require(\n            riskManager.checkListed(_fToken),\n            \"TokenBase: Market not listed\"\n        );\n        require(\n            lp.value != 0,\n            \"TokenBase: Liquidation protection closed / never existed\"\n        );\n        require(\n            msg.sender == lp.borrower,\n            \"TokenBase: Not borrower of this liquidation\"\n        );\n\n        // 1.2x multiplier\n        uint256 valueAfterMultiplier = (uint256(lp.value) * 120) / 100;\n\n        address underlyingAsset = IFErc20(_fToken).getUnderlying();\n        (uint256 underlyingPriceMantissa, ) = oracle.getUnderlyingPrice(\n            _fToken\n        );\n        // div_: uint, exp -> uint\n        uint256 underlyingToRepay = div_(\n            valueAfterMultiplier,\n            Exp({mantissa: underlyingPriceMantissa})\n        );\n\n        // Pay liquidator\n        IERC20(underlyingAsset).transferFrom(\n            msg.sender,\n            lp.liquidator,\n            underlyingToRepay\n        );\n\n        // Transfer collateral fToken to borrower (msg.sender)\n        uint256 tokenSeized256 = uint256(lp.tokenSeized);\n        _burn(address(this), tokenSeized256);\n        _mint(msg.sender, tokenSeized256);\n\n        delete liquidationProtection[_timestamp];\n    }\n\n    /***************************** ERC20 Override *****************************/\n\n    /**\n     * Transferring invokes transferAllowed check which further invokes redeemAllowed\n     * check. Therefore, market should be up-to-date before transfer to make sure\n     * liquidity calculation in redeemAllowed is accurate.\n     */\n\n    /**\n     * @dev ERC20 transfer funtions with risk manager trasfer check\n     */\n    function transfer(address to, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        // Update market state\n        accrueInterest();\n\n        address owner = _msgSender();\n        // Risk manager transferAllowed\n        require(\n            riskManager.transferAllowed(address(this), owner, amount),\n            \"TokenBase: Transfer disallowed by risk manager\"\n        );\n\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public override returns (bool) {\n        // Update market state\n        accrueInterest();\n\n        // Risk manager transferAllowed\n        require(\n            riskManager.transferAllowed(address(this), from, amount),\n            \"TokenBase: Transfer disallowed by risk manager\"\n        );\n\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /******************************* Safe Token *******************************/\n\n    // Functions with different logics for ERC20 tokens and ETH\n\n    /**\n     * @dev Performs a transfer in (transfer assets from caller to this contract), reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\n     */\n    function doTransferIn(address _from, uint256 _amount) internal virtual;\n\n    /**\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\n     */\n    function doTransferOut(address payable _to, uint256 _amount)\n        internal\n        virtual;\n}\n"
    },
    "contracts/money-market/interfaces/ITokenBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ITokenBase {\n    /**\n     * @notice Event emitted when interest is accrued\n     */\n    event AccrueInterest(\n        uint256 cashPrior,\n        uint256 interestAccumulated,\n        uint256 borrowIndex,\n        uint256 totalBorrows\n    );\n\n    /**\n     * @notice Event emitted when tokens are minted\n     */\n    event Supply(address supplier, uint256 supplyAmount, uint256 tokensMinted);\n\n    /**\n     * @notice Event emitted when tokens are redeemed\n     */\n    event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\n\n    /**\n     * @notice Event emitted when underlying is borrowed\n     */\n    event Borrow(\n        address borrower,\n        uint256 borrowAmount,\n        uint256 accountBorrows,\n        uint256 totalBorrows\n    );\n\n    /**\n     * @notice Event emitted when a borrow is repaid\n     */\n    event RepayBorrow(\n        address payer,\n        address borrower,\n        uint256 repayAmount,\n        uint256 accountBorrows,\n        uint256 totalBorrows\n    );\n\n    /**\n     * @notice Event emitted when a borrow is liquidated\n     */\n    event LiquidateBorrow(\n        address liquidator,\n        address borrower,\n        uint256 repayAmount,\n        address fTokenCollateral\n    );\n\n    event TokenSeized(address from, address to, uint256 amount);\n\n    /**\n     * @notice Event emitted when the reserves are added\n     */\n    event ReservesAdded(\n        address benefactor,\n        uint256 addAmount,\n        uint256 newTotalReserves\n    );\n\n    /*** Admin Events ***/\n\n    /**\n     * @notice Event emitted when pendingAdmin is changed\n     */\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n    /**\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\n     */\n    event NewAdmin(address oldAdmin, address newAdmin);\n\n    event NewReserveFactor(uint256 oldReserveFactor, uint256 newReserveFactor);\n\n    event NewPriceOracle(address oldOracle, address newOracle);\n\n    function isFToken() external view returns (bool);\n\n    function balanceOfUnderlying(address _account) external returns (uint256);\n\n    function getAccountSnapshot(address _account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function getLastAccrualBlock() external view returns (uint256);\n\n    function getRiskManager() external view returns (address);\n\n    function borrowRatePerBlock() external view returns (uint256);\n\n    function supplyRatePerBlock() external view returns (uint256);\n\n    //function totalBorrowsCurrent() external  returns (uint256);\n\n    function borrowBalanceCurrent(address _account)\n        external\n        view\n        returns (uint256);\n\n    function borrowBalanceStored(address _account)\n        external\n        view\n        returns (uint256);\n\n    function exchangeRateCurrent() external view returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function accrueInterest() external;\n\n    function seize(\n        address _liquidator,\n        address _borrower,\n        uint256 _seizeTokens\n    ) external;\n\n    /*** Admin ***/\n    function setPendingAdmin(address newPendingAdmin) external;\n\n    function acceptAdmin() external;\n}\n"
    },
    "contracts/money-market/interfaces/IFErc20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IFErc20 {\n    function getUnderlying() external view returns (address);\n\n    function supply(uint256 _mintAmount) external;\n\n    function redeem(uint256 _redeemTokens) external;\n\n    function redeemUnderlying(uint256 _redeemAmount) external;\n\n    function borrow(uint256 _borrowAmount) external;\n\n    function repayBorrow(uint256 _repayAmount) external;\n\n    function repayBorrowBehalf(address _borrower, uint256 _repayAmount)\n        external;\n\n    function liquidateBorrow(\n        address _borrower,\n        uint256 _repayAmount,\n        address _fTokenCollateral\n    ) external;\n\n    //function sweepToken(address _token) external;\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20PermitUpgradeable.sol\";\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/cryptography/draft-EIP712Upgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 51\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __EIP712_init_unchained(name, \"1\");\n    }\n\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/income-sharing/IncomeSharingVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {PausableUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport {IVeFUR} from \"../furion-staking/interfaces/IVeFUR.sol\";\n\nimport \"hardhat/console.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title Furion's Income Sharing Contract with veFUR\n * @notice This contract will receive part of the income from Furion products\n *         And the income will be shared by FUR holders (in the form of veFUR staking)\n *         All income come out as one same token(income token, FUR by default)\n *\n *         It is designed to be an ever-lasting reward\n *\n *         To enter the income sharing vault, you need to lock some veFUR\n *             - When your veFUR is locked, it can not be withdrawed\n *\n *         The reward is FIStributed per second like a farming pool\n *         The income will come from (to be updated)\n *             - IncomeMaker: Collect swap fee in furion swap pool\n */\n\ncontract IncomeSharingVault is\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    using SafeERC20 for IERC20;\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Variables **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    uint256 public constant SCALE = 1e30;\n\n    // How long one single round would last\n    uint256 public roundTime;\n\n    IVeFUR public veFUR;\n\n    struct PoolInfo {\n        bool available;\n        address rewardToken;\n        uint256 totalAmount;\n        uint256 rewardPerSecond;\n        uint256 accRewardPerShare;\n        uint256 lastRewardTimestamp;\n    }\n\n    // PoolId => PoolInfo, different pool with different reward token\n    mapping(uint256 => PoolInfo) public pools;\n\n    struct UserInfo {\n        uint256 totalAmount;\n        uint256 rewardDebt;\n    }\n\n    // poolId => user address => user info\n    mapping(uint256 => mapping(address => UserInfo)) public users;\n\n    // next pool id, starting from 1\n    uint256 public nextPool;\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    event RoundTimeChanged(uint256 oldRoundTime, uint256 newRoundTime);\n    event NewRewardPoolStart(uint256 poolId, address rewardToken);\n    event RewardSpeedSet(uint256 poolId, uint256 rewardPerSecond);\n    event PoolUpdated(uint256 poolId, uint256 accRewardPerSecond);\n    event Harvest(address user, uint256 poolId, uint256 amount);\n    event Deposit(address user, uint256 poolId, uint256 amount);\n    event Withdraw(address user, uint256 poolId, uint256 amount);\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Errors ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    // Errors start with FIS(Furion Income Sharing)\n    error FIS__PoolNotAvailable();\n    error FIS__ZeroAmount();\n    error FIS__NotEnoughVeFUR();\n    error FIS__WrongSpeed();\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constructor ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    function initialize(address _veFUR) public initializer {\n        __Ownable_init();\n        __Pausable_init();\n        __ReentrancyGuard_init();\n\n        veFUR = IVeFUR(_veFUR);\n\n        nextPool = 1;\n\n        // 7 days every round by default\n        // roundTime = 3600 * 24 * 7;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ View Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Pending reward\n     * @param _poolId Pool Id\n     * @param _user   User address\n     * @return pendingReward Amount of pending reward\n     */\n    function pendingReward(uint256 _poolId, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        PoolInfo memory pool = pools[_poolId];\n\n        if (\n            pool.lastRewardTimestamp == 0 ||\n            block.timestamp < pool.lastRewardTimestamp\n        ) return 0;\n\n        uint256 accRewardPerShare = pool.accRewardPerShare;\n\n        if (pool.totalAmount == 0) return 0;\n        else {\n            UserInfo memory user = users[_poolId][_user];\n\n            uint256 timePassed = block.timestamp - pool.lastRewardTimestamp;\n            uint256 reward = timePassed * pool.rewardPerSecond;\n\n            // Remainging reward inside the pool\n            uint256 remainingReward = IERC20(pool.rewardToken).balanceOf(\n                address(this)\n            );\n\n            uint256 finalReward = reward > remainingReward\n                ? remainingReward\n                : reward;\n\n            accRewardPerShare += (finalReward * SCALE) / pool.totalAmount;\n\n            uint256 pending = (user.totalAmount * accRewardPerShare) /\n                SCALE -\n                user.rewardDebt;\n\n            return pending;\n        }\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Set Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Set round time\n     * @dev Round time is only used for checking reward speed\n     * @param _roundTime Round time in seconds\n     */\n    function setRoundTime(uint256 _roundTime) external onlyOwner {\n        emit RoundTimeChanged(roundTime, _roundTime);\n        roundTime = _roundTime;\n    }\n\n    /**\n     * @notice Start a new income sharing pool\n     * @dev Every pool would have its own reward token\n     * @param _rewardToken Reward token address\n     */\n    function startPool(address _rewardToken) external onlyOwner {\n        PoolInfo storage pool = pools[nextPool++];\n\n        pool.available = true;\n        pool.rewardToken = _rewardToken;\n\n        emit NewRewardPoolStart(nextPool - 1, _rewardToken);\n    }\n\n    /**\n     * @notice Set reward speed for a pool\n     * @param _poolId Pool id\n     * @param _rewardPerSecond Reward speed\n     */\n    function setRewardSpeed(uint256 _poolId, uint256 _rewardPerSecond)\n        external\n    {\n        updatePool(_poolId);\n\n        PoolInfo memory pool = pools[_poolId];\n\n        // Ensure there is enough reward for this round\n        if (\n            roundTime * _rewardPerSecond >\n            IERC20(pool.rewardToken).balanceOf(address(this))\n        ) revert FIS__WrongSpeed();\n\n        pools[_poolId].rewardPerSecond = _rewardPerSecond;\n\n        emit RewardSpeedSet(_poolId, _rewardPerSecond);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Main Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Deposit\n     * @param _poolId Pool Id\n     * @param _amount Amount of tokens to deposit\n     */\n    function deposit(uint256 _poolId, uint256 _amount) external nonReentrant {\n        if (!pools[_poolId].available) revert FIS__PoolNotAvailable();\n        if (_amount == 0) revert FIS__ZeroAmount();\n        if (veFUR.balanceOf(msg.sender) < _amount) revert FIS__NotEnoughVeFUR();\n\n        updatePool(_poolId);\n\n        // Lock some veFUR to participate\n        veFUR.lockVeFUR(msg.sender, _amount);\n\n        PoolInfo storage pool = pools[_poolId];\n        UserInfo storage user = users[_poolId][msg.sender];\n\n        if (user.totalAmount > 0) {\n            uint256 pending = (pool.accRewardPerShare * user.totalAmount) /\n                SCALE -\n                user.rewardDebt;\n\n            uint256 reward = _safeRewardTransfer(\n                pool.rewardToken,\n                msg.sender,\n                pending\n            );\n            emit Harvest(msg.sender, _poolId, reward);\n        }\n\n        // Update pool amount\n        pool.totalAmount += _amount;\n\n        // Update user amount\n        user.totalAmount += _amount;\n\n        user.rewardDebt = (pool.accRewardPerShare * user.totalAmount) / SCALE;\n\n        emit Deposit(msg.sender, _poolId, _amount);\n    }\n\n    /**\n     * @notice Withdraw all veFUR\n     * @param _poolId Pool Id\n     */\n    function withdrawAll(uint256 _poolId) external {\n        withdraw(_poolId, users[_poolId][msg.sender].totalAmount);\n    }\n\n    /**\n     * @notice Withdraw the reward from the pool\n     * @param _poolId Pool Id\n     * @param _amount Amount to withdraw\n     */\n    function withdraw(uint256 _poolId, uint256 _amount) public nonReentrant {\n        if (_amount == 0) revert FIS__ZeroAmount();\n\n        PoolInfo storage pool = pools[_poolId];\n        UserInfo storage user = users[_poolId][msg.sender];\n\n        if (user.totalAmount < _amount) revert FIS__NotEnoughVeFUR();\n\n        updatePool(_poolId);\n\n        uint256 pending = (pool.accRewardPerShare * user.totalAmount) /\n            SCALE -\n            user.rewardDebt;\n\n        uint256 reward = _safeRewardTransfer(\n            pool.rewardToken,\n            msg.sender,\n            pending\n        );\n        emit Harvest(msg.sender, _poolId, reward);\n\n        // Update user info\n        pool.totalAmount -= _amount;\n\n        user.totalAmount -= _amount;\n        user.rewardDebt = (user.totalAmount * pool.accRewardPerShare) / SCALE;\n\n        // Unlock veFUR\n        veFUR.unlockVeFUR(msg.sender, _amount);\n\n        emit Withdraw(msg.sender, _poolId, _amount);\n    }\n\n    /**\n     * @notice Harvest income reward\n     * @param _poolId Pool Id\n     * @param _to Reward receiver address\n     */\n    function harvest(uint256 _poolId, address _to)\n        public\n        nonReentrant\n        whenNotPaused\n    {\n        updatePool(_poolId);\n\n        PoolInfo memory pool = pools[_poolId];\n        UserInfo storage user = users[_poolId][msg.sender];\n\n        // pending reward\n        uint256 pending = (user.totalAmount * pool.accRewardPerShare) /\n            SCALE -\n            user.rewardDebt;\n\n        user.rewardDebt = (user.totalAmount * pool.accRewardPerShare) / SCALE;\n\n        uint256 reward = _safeRewardTransfer(pool.rewardToken, _to, pending);\n\n        emit Harvest(msg.sender, _poolId, reward);\n    }\n\n    /**\n     * @notice Update pool\n     * @param _poolId Pool id\n     */\n    function updatePool(uint256 _poolId) public {\n        PoolInfo storage pool = pools[_poolId];\n\n        if (block.timestamp <= pool.lastRewardTimestamp) return;\n\n        uint256 totalAmount = pool.totalAmount;\n        uint256 rewardPerSecond = pool.rewardPerSecond;\n\n        if (totalAmount == 0 || rewardPerSecond == 0) {\n            pool.lastRewardTimestamp = block.timestamp;\n            return;\n        }\n\n        // Time passed in seconds and total rewards\n        uint256 timePassed = block.timestamp - pool.lastRewardTimestamp;\n        uint256 reward = timePassed * rewardPerSecond;\n\n        // Remainging reward inside the pool\n        uint256 remainingReward = IERC20(pool.rewardToken).balanceOf(\n            address(this)\n        );\n\n        // Can not exceed the max balance of the pool\n        uint256 finalReward = reward > remainingReward\n            ? remainingReward\n            : reward;\n\n        pool.accRewardPerShare += (finalReward * SCALE) / totalAmount;\n\n        pool.lastRewardTimestamp = block.timestamp;\n\n        emit PoolUpdated(_poolId, pool.accRewardPerShare);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Internal Functions ********************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Finish the reward token transfer\n     * @dev Safe means not transfer exceeds the balance of contract\n     *      Manually change the reward speed\n     * @param _to Address to transfer\n     * @param _amount Amount to transfer\n     * @return realAmount Real amount transferred\n     */\n    function _safeRewardTransfer(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal returns (uint256) {\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n\n        if (_amount > balance) {\n            IERC20(_token).safeTransfer(_to, balance);\n            return balance;\n        } else {\n            IERC20(_token).safeTransfer(_to, _amount);\n            return _amount;\n        }\n    }\n}\n"
    },
    "contracts/furion-staking/interfaces/IVeFUR.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"./IVeERC20.sol\";\n\n/**\n * @dev Interface of the VeFUR\n */\ninterface IVeFUR is IVeERC20 {\n    function isUser(address _addr) external view returns (bool);\n\n    function deposit(uint256 _amount) external;\n\n    function claim() external;\n\n    function withdraw(uint256 _amount) external;\n\n    function getStakedFur(address _addr) external view returns (uint256);\n\n    function getVotes(address _account) external view returns (uint256);\n\n    function lockVeFUR(address _to, uint256 _amount) external;\n\n    function unlockVeFUR(address _to, uint256 _amount) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/furion-staking/interfaces/IVeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface IVeERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n}\n"
    },
    "contracts/aggregate-pool/AggregatePoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./AggregatePool.sol\";\nimport \"./interfaces/IAggregatePool.sol\";\nimport \"./interfaces/IAggregatePoolFactory.sol\";\nimport \"../IChecker.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"hardhat/console.sol\";\n\ncontract AggregatePoolFactory is IAggregatePoolFactory, Ownable {\n    using Counters for Counters.Counter;\n\n    address public fur;\n    address public oracle;\n    address public immutable checker;\n    address public immutable spFactory;\n\n    // Starts from 1\n    Counters.Counter private poolId;\n    // Pool ID to pool address\n    mapping(uint256 => address) public getPool;\n    //mapping(bytes32 => bool) private alreadyExist;\n\n    // No use for now\n    // address[] public allPools;\n\n    event PoolCreated(address poolAddress, uint256 id);\n\n    constructor(\n        address _checker,\n        address _fur,\n        address _oracle,\n        address _spFactory\n    ) {\n        checker = _checker;\n        fur = _fur;\n        oracle = _oracle;\n        spFactory = _spFactory;\n    }\n\n    /**\n     * @dev Get total number of root pools in existence\n     */\n    function allPoolsLength() external view returns (uint256) {\n        return poolId.current();\n    }\n\n    /**\n     * @dev Change owner/fee receiver for all project pools\n     */\n    function transferOwnership(address _newOwner) public override onlyOwner {\n        require(\n            _newOwner != address(0),\n            \"Ownable: New owner is the zero address\"\n        );\n\n        _transferOwnership(_newOwner);\n\n        // ID starts from 1\n        for (uint256 i = 1; i < poolId.current() + 1; ) {\n            IAggregatePool(getPool[i]).changeOwner(_newOwner);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function setFur(address _newFur) public onlyOwner {\n        for (uint256 i = 1; i < poolId.current() + 1; ) {\n            IAggregatePool(getPool[i]).setFur(_newFur);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev Initialize root pool and grant FFT minting and burning permissions\n     *\n     * @param _tokens Addresses of project pools to be included in the root pool\n     */\n    function createPool(\n        address[] memory _tokens,\n        string memory _name,\n        string memory _symbol\n    ) external returns (address poolAddress) {\n        require(\n            checker != address(0),\n            \"AggregatePoolFactory: Checker not set.\"\n        );\n        poolId.increment();\n\n        // Act as identifier for pools to ensure no duplications\n        bytes32 _salt = keccak256(abi.encodePacked(_tokens));\n        /*require(\n            !alreadyExist[_salt],\n            \"AggregatePoolFactory: Root pool for these NFTs already exists.\"\n        );*/\n        poolAddress = address(\n            new AggregatePool{salt: _salt}(\n                fur,\n                oracle,\n                spFactory,\n                owner(),\n                _tokens,\n                string.concat(\"FurionFungibleToken \", _name),\n                string.concat(\"FFT-\", _symbol)\n            )\n        );\n\n        getPool[poolId.current()] = poolAddress;\n        // Only tracks token list at the time of creation, useless\n        //alreadyExist[_salt] = true;\n        IChecker(checker).addToken(poolAddress);\n\n        emit PoolCreated(poolAddress, poolId.current());\n    }\n}\n"
    },
    "contracts/aggregate-pool/AggregatePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IFurionPricingOracle.sol\";\nimport \"../separate-pool/interfaces/ISeparatePoolFactory.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\n// For F-* token and FUR\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"hardhat/console.sol\";\n\n// In this contract, pools refer to root pools and tokens refer to project pool\n// tokens (i.e. project pools)\n\ncontract AggregatePool is ERC20Permit {\n    IERC20 FUR;\n    IFurionPricingOracle oracle;\n    ISeparatePoolFactory spFactory;\n\n    address public immutable factory;\n    // Will be immutable for income sharing vault\n    // Fees in this contract are in the form of FFT\n    address public owner;\n\n    // Accepted pool tokens for this root pool\n    mapping(address => bool) public registered;\n    // Access all tokens for calculating sum of F-* reference price\n    // ID to token address\n    mapping(uint256 => address) private getToken;\n\n    // Fees in FUR\n    uint256 public stakeFee = 100e18;\n    uint256 public unstakeFee = 100e18;\n    // Serves as ID for F-* tokens in this pool (ID for next token to be registered)\n    uint256 public tokenTypes;\n\n    event RegisteredToken(address tokenAddress);\n    event StakedToken(\n        address indexed tokenAddress,\n        address indexed staker,\n        uint256 tokenAmount\n    );\n    event UnstakedToken(\n        address indexed tokenAddress,\n        address indexed unstaker,\n        uint256 tokenAmount\n    );\n\n    constructor(\n        address _fur,\n        address _oracle,\n        address _spFactory,\n        address _owner,\n        address[] memory _tokens,\n        string memory _tokenName,\n        string memory _tokenSymbol\n    ) ERC20Permit(_tokenName) ERC20(_tokenName, _tokenSymbol) {\n        factory = msg.sender;\n        FUR = IERC20(_fur);\n        oracle = IFurionPricingOracle(_oracle);\n        spFactory = ISeparatePoolFactory(_spFactory);\n        owner = _owner;\n\n        uint256 length = _tokens.length;\n\n        // Checked support at factory, register tokens upon pool creation\n        for (uint256 i; i < length; ) {\n            registered[_tokens[i]] = true;\n            getToken[i] = _tokens[i];\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        tokenTypes = length;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"AggregatePool: Not permitted to call.\");\n        _;\n    }\n\n    modifier onlyFactory() {\n        require(msg.sender == factory, \"AggregatePool: Not permitted to call.\");\n        _;\n    }\n\n    // Check if pool token is registered\n    modifier tokenRegistered(address _tokenAddress) {\n        require(\n            registered[_tokenAddress] == true,\n            \"AggregatePool: Token not accepted in this pool.\"\n        );\n        _;\n    }\n\n    function circulatingSupply() public view returns (uint256) {\n        // Total supply - balance of all contracts that locked FFT\n        // return totalSupply() - balanceOf()\n        return totalSupply();\n    }\n\n    function setStakeFee(uint256 _newStakeFee) external onlyOwner {\n        stakeFee = _newStakeFee;\n    }\n\n    function setUnstakeFee(uint256 _newUnstakeFee) external onlyOwner {\n        unstakeFee = _newUnstakeFee;\n    }\n\n    /**\n     * @dev Change pool admin/fee receiver\n     */\n    function changeOwner(address _newOwner) external onlyFactory {\n        owner = _newOwner;\n    }\n\n    function setFur(address _newFur) external onlyFactory {\n        FUR = IERC20(_newFur);\n    }\n\n    /**\n     * @dev Add F-* token to pool\n     */\n    function registerToken(address _tokenAddress) external onlyOwner {\n        registered[_tokenAddress] = true;\n        getToken[tokenTypes] = _tokenAddress;\n        tokenTypes++;\n\n        emit RegisteredToken(_tokenAddress);\n    }\n\n    /**\n     * @dev Stake F-* tokens and mint FFT\n     *\n     * @param _tokenAddress Address of F-* token to stake\n     * @param _amount Amount of F-* tokens to stake\n     */\n    function stake(address _tokenAddress, uint256 _amount)\n        external\n        tokenRegistered(_tokenAddress)\n    {\n        // Both are enlarged by MULTIPLIER which cancels out in mint amount calculation\n        uint256 tokenRefPrice = _refPricePerToken(_tokenAddress);\n        uint256 fftRefPrice = _refPricePerFFT(_tokenAddress);\n        // Amount of FFT to get before fee\n        uint256 mintAmount = (_amount * tokenRefPrice) / fftRefPrice;\n\n        // Transfer FUR (fees)\n        FUR.transferFrom(msg.sender, owner, stakeFee);\n        // Transfer pool tokens to be staked\n        IERC20(_tokenAddress).transferFrom(msg.sender, address(this), _amount);\n        // Mint FFT\n        _mint(msg.sender, mintAmount);\n\n        emit StakedToken(_tokenAddress, msg.sender, _amount);\n    }\n\n    /**\n     * @dev Burn FFT and get F-* tokens\n     *\n     * @param _tokenAddress Address of F-* token to get\n     * @param _amount Amount of FFT to burn\n     */\n    function unstake(address _tokenAddress, uint256 _amount)\n        external\n        tokenRegistered(_tokenAddress)\n    {\n        // Both are enlarged by MULTIPLIER which cancels out in retrieve amount calculation\n        uint256 tokenRefPrice = _refPricePerToken(_tokenAddress);\n        uint256 fftRefPrice = _refPricePerFFT(_tokenAddress);\n\n        // Amount of F-* tokens to get back\n        uint256 retrieveAmount = (_amount * fftRefPrice) / tokenRefPrice;\n\n        // Transfer FUR (fees)\n        FUR.transferFrom(msg.sender, owner, unstakeFee);\n        // Burn FFT used for exchange\n        _burn(msg.sender, _amount);\n\n        // Transfer pool tokens to caller\n        IERC20(_tokenAddress).transfer(msg.sender, retrieveAmount);\n\n        emit UnstakedToken(_tokenAddress, msg.sender, retrieveAmount);\n    }\n\n    /**\n     * @dev Get reference price of 1 F-* token (in ETH)\n     *\n     * @return Reference price scaled by 1e18\n     */\n    function _refPricePerToken(address _tokenAddress)\n        private\n        view\n        returns (uint256)\n    {\n        address nft = spFactory.getNftByPool(_tokenAddress);\n        require(\n            nft != address(0),\n            \"AggregatePool: Unrecognized separate pool provided\"\n        );\n\n        // Price of 1000 F-* tokens in terms of ETH\n        uint256 refPrice = oracle.getNFTPrice(nft, 0);\n\n        // (refPrice / (1000 * 1e18)) * MULTIPLIER = (refPrice / 1000) * (MULTIPLIER / MULTIPLIER)\n        return refPrice / 1000;\n    }\n\n    /**\n     * @dev Get total value of all staked F-* tokens in this pool (in ETH)\n     *\n     * @return Total value scaled by 1e18\n     */\n    function _refPriceSum(address _tokenAddress)\n        private\n        view\n        returns (uint256)\n    {\n        uint256 sum;\n\n        for (uint256 i; i < tokenTypes; ) {\n            address token = getToken[i];\n\n            uint256 refPrice = _refPricePerToken(_tokenAddress);\n            // Number of F-* tokens in the contract\n            uint256 balance = IERC20(token).balanceOf(address(this));\n\n            sum += refPrice * balance;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return sum;\n    }\n\n    /**\n     * @dev Get reference price of 1 FFT (in ETH)\n     *\n     * @return Price of 1 FFT enlarged by MULTIPLIER\n     */\n    function _refPricePerFFT(address _tokenAddress)\n        private\n        view\n        returns (uint256)\n    {\n        uint256 _circulatingSupply = circulatingSupply();\n\n        // For first mint\n        if (_circulatingSupply == 0) {\n            return 0.01 ether;\n        } else {\n            return _refPriceSum(_tokenAddress) / _circulatingSupply;\n        }\n    }\n}\n"
    },
    "contracts/aggregate-pool/interfaces/IAggregatePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IAggregatePool {\n    function factory() external view returns (address);\n\n    function owner() external view returns (address);\n\n    function changeOwner(address _newOwner) external;\n\n    function setFur(address _newFur) external;\n\n    function stake(\n        address _tokenAddress,\n        uint256 _amount,\n        uint256 _price\n    ) external;\n\n    function unstake(\n        address _tokenAddress,\n        uint256 _amount,\n        uint256 _price\n    ) external;\n}\n"
    },
    "contracts/aggregate-pool/interfaces/IAggregatePoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IAggregatePoolFactory {\n    function oracle() external view returns (address);\n\n    function getPool(uint256 _poolId) external view returns (address);\n\n    //function allPools(uint256 _index) external view returns (address);\n\n    function allPoolsLength() external view returns (uint256);\n\n    function createPool(\n        address[] memory _tokens,\n        string memory _name,\n        string memory _symbol\n    ) external returns (address poolAddress);\n}\n"
    },
    "contracts/aggregate-pool/interfaces/IFurionPricingOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IFurionPricingOracle {\n    function getNFTPrice(address _token, uint256 _id)\n        external\n        view\n        returns (uint256 price);\n}\n"
    },
    "contracts/test-only/NFTest1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract NFTest1 is ERC721, Ownable {\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIdCounter;\n\n    constructor(address[] memory _receivers) ERC721(\"NFTest1\", \"NFT1\") {\n        uint256 length = _receivers.length;\n        for (uint256 i = 0; i < length; ) {\n            safeMint(_receivers[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function safeMint(address to) public onlyOwner {\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n        _safeMint(to, tokenId);\n    }\n}\n"
    },
    "contracts/test-only/NFTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract NFTest is ERC721, Ownable {\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIdCounter;\n\n    constructor(address[] memory _receivers) ERC721(\"NFTest\", \"NFT\") {\n        uint256 length = _receivers.length;\n        for (uint256 i = 0; i < length; ) {\n            safeMint(_receivers[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function safeMint(address to) public onlyOwner {\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n        _safeMint(to, tokenId);\n    }\n}\n"
    },
    "contracts/money-market/RiskManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./RiskManagerStorage.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/ITokenBase.sol\";\nimport \"./interfaces/IRiskManager.sol\";\nimport \"./interfaces/IPriceOracle.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"hardhat/console.sol\";\n\ncontract RiskManager is Initializable, RiskManagerStorage, IRiskManager {\n    function initialize(address _priceOracle) public initializer {\n        admin = msg.sender;\n\n        maxTier = 3;\n        discountInterval = 10;\n        discountIncreaseMantissa = 0.01e18;\n\n        oracle = IPriceOracle(_priceOracle);\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"RiskManager: Not authorized to call\");\n        _;\n    }\n\n    modifier onlyListed(address _fToken) {\n        require(markets[_fToken].isListed, \"RiskManager: Market is not listed\");\n        _;\n    }\n\n    function isRiskManager() public pure returns (bool) {\n        return IS_RISK_MANAGER;\n    }\n\n    /**\n     * @dev Returns the markets an account has entered.\n     */\n    function getMarketsEntered(address _account)\n        external\n        view\n        returns (address[] memory)\n    {\n        // getAssetsIn\n        address[] memory entered = marketsEntered[_account]; // accountAssets[]\n\n        return entered;\n    }\n\n    /**\n     * @dev Check if the given account has entered in the given asset.\n     */\n    function checkMembership(address _account, address _fToken)\n        external\n        view\n        returns (bool)\n    {\n        return markets[_fToken].isMember[_account];\n    }\n\n    function checkListed(address _fToken) external view returns (bool) {\n        return markets[_fToken].isListed;\n    }\n\n    /**\n     * @dev Add assets to be included in account liquidity calculation\n     */\n    function enterMarkets(address[] memory _fTokens) public override {\n        uint256 len = _fTokens.length;\n\n        for (uint256 i; i < len; ) {\n            addToMarketInternal(_fTokens[i], msg.sender);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @dev Add the asset for liquidity calculations of borrower\n     */\n    function addToMarketInternal(address _fToken, address _borrower)\n        internal\n        onlyListed(_fToken)\n    {\n        Market storage marketToJoin = markets[_fToken];\n\n        if (marketToJoin.isMember[_borrower] == true) {\n            return;\n        }\n\n        // survived the gauntlet, add to list\n        // NOTE: we store these somewhat redundantly as a significant optimization\n        //  this avoids having to iterate through the list for the most common use cases\n        //  that is, only when we need to perform liquidity checks\n        //  and not whenever we want to check if an account is in a particular market\n        marketToJoin.isMember[_borrower] = true;\n        marketsEntered[_borrower].push(_fToken);\n\n        emit MarketEntered(_fToken, _borrower);\n    }\n\n    /**\n     * @dev Removes asset from sender's account liquidity calculation.\n     *\n     * Sender must not have an outstanding borrow balance in the asset,\n     * or be providing necessary collateral for an outstanding borrow.\n     */\n    function exitMarket(address _fToken) external override {\n        /// Get fToken balance and amount of underlying asset borrowed\n        (uint256 tokensHeld, uint256 amountOwed, ) = ITokenBase(_fToken)\n            .getAccountSnapshot(msg.sender);\n        // Fail if the sender has a borrow balance\n        require(amountOwed == 0, \"RiskManager: Borrow balance is not zero\");\n\n        // Fail if the sender is not permitted to redeem all of their tokens\n        require(\n            redeemAllowed(_fToken, msg.sender, tokensHeld),\n            \"RiskManager: Cannot withdraw all tokens\"\n        );\n\n        Market storage marketToExit = markets[_fToken];\n\n        // Already exited market\n        if (!marketToExit.isMember[msg.sender]) {\n            return;\n        }\n\n        // Set fToken membership to false\n        delete marketToExit.isMember[msg.sender];\n\n        // Delete fToken from the account’s list of assets\n        // load into memory for faster iteration\n        address[] memory assets = marketsEntered[msg.sender];\n        uint256 len = assets.length;\n        uint256 assetIndex;\n        for (uint256 i; i < len; i++) {\n            if (assets[i] == _fToken) {\n                assetIndex = i;\n                break;\n            }\n        }\n\n        // We *must* have found the asset in the list or our redundant data structure is broken\n        assert(assetIndex < len);\n\n        // Copy last item in list to location of item to be removed, reduce length by 1\n        address[] storage storedList = marketsEntered[msg.sender];\n        storedList[assetIndex] = storedList[storedList.length - 1];\n        storedList.pop();\n\n        emit MarketExited(_fToken, msg.sender);\n    }\n\n    /********************************* Admin *********************************/\n\n    /**\n     * @notice Begins transfer of admin rights. The newPendingAdmin MUST call\n     *  `acceptAdmin` to finalize the transfer.\n     * @dev Admin function to begin change of admin. The newPendingAdmin MUST\n     *  call `acceptAdmin` to finalize the transfer.\n     * @param _newPendingAdmin New pending admin.\n     */\n    function setPendingAdmin(address _newPendingAdmin) external onlyAdmin {\n        // Save current value, if any, for inclusion in log\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store pendingAdmin with value newPendingAdmin\n        pendingAdmin = _newPendingAdmin;\n\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n        emit NewPendingAdmin(oldPendingAdmin, _newPendingAdmin);\n    }\n\n    /**\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n     * @dev Admin function for pending admin to accept role and update admin\n     */\n    function acceptAdmin() external {\n        // Check caller is pendingAdmin\n        require(msg.sender == pendingAdmin, \"TokenBase: Not pending admin\");\n\n        // Save current values for inclusion in log\n        address oldAdmin = admin;\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store admin with value pendingAdmin\n        admin = pendingAdmin;\n\n        // Clear the pending value\n        pendingAdmin = address(0);\n\n        emit NewAdmin(oldAdmin, admin);\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n    }\n\n    /**\n     * @notice Sets a new price oracle for the comptroller\n     * @dev Admin function to set a new price oracle\n     */\n    function setPriceOracle(address _newOracle) external onlyAdmin {\n        // Track the old oracle for the comptroller\n        address oldOracle = address(oracle);\n\n        // Set comptroller's oracle to newOracle\n        oracle = IPriceOracle(_newOracle);\n\n        // Emit NewPriceOracle(oldOracle, newOracle)\n        emit NewPriceOracle(oldOracle, _newOracle);\n    }\n\n    function setVeToken(address _newVetoken) external onlyAdmin {\n        veToken = IERC20(_newVetoken);\n    }\n\n    function setCloseFactor(uint256 _newCloseFactorMantissa)\n        external\n        onlyAdmin\n    {\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\n        closeFactorMantissa = _newCloseFactorMantissa;\n\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\n    }\n\n    /**\n     * @notice Sets the collateralFactor for a market\n     * @dev Admin function to set per-market collateralFactor\n     * @param _fToken The market to set the factor on\n     * @param _newCollateralFactorMantissa The new collateral factor, scaled by 1e18\n     */\n    function setCollateralFactor(\n        address _fToken,\n        uint256 _newCollateralFactorMantissa\n    ) external onlyAdmin onlyListed(_fToken) {\n        Market storage market = markets[_fToken];\n\n        Exp memory newCollateralFactorExp = Exp({\n            mantissa: _newCollateralFactorMantissa\n        });\n\n        // Check collateral factor <= 0.9\n        Exp memory limit = Exp({mantissa: COLLATERAL_FACTOR_MAX_MANTISSA});\n        require(\n            lessThanExp(newCollateralFactorExp, limit),\n            \"RiskManager: Collateral factor larger than limit\"\n        );\n\n        // Fail if price == 0\n        (uint256 price, ) = oracle.getUnderlyingPrice(_fToken);\n        require(price > 0, \"RiskManager: Oracle price is 0\");\n\n        // Set market's collateral factor to new collateral factor, remember old value\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\n        market.collateralFactorMantissa = _newCollateralFactorMantissa;\n\n        // Emit event with asset, old collateral factor, and new collateral factor\n        emit NewCollateralFactor(\n            _fToken,\n            oldCollateralFactorMantissa,\n            _newCollateralFactorMantissa\n        );\n    }\n\n    function setTier(address _fToken, uint256 _tier) external onlyAdmin {\n        require(_tier > 0 && _tier <= maxTier, \"RiskManager: Invalid tier\");\n\n        markets[_fToken].tier = _tier;\n    }\n\n    /**\n     * @notice Add the market to the markets mapping and set it as listed\n     * @dev Admin function to set isListed and add support for the market\n     * @param _fToken The address of the market (token) to list\n     * @param _tier Tier of the market\n     */\n    function supportMarket(\n        address _fToken,\n        uint256 _collateralFactorMantissa,\n        uint256 _tier\n    ) external onlyAdmin {\n        require(\n            !markets[_fToken].isListed,\n            \"RiskManager: Market already listed\"\n        );\n        require(\n            _collateralFactorMantissa <= COLLATERAL_FACTOR_MAX_MANTISSA,\n            \"RiskManager: Invalid collateral factor\"\n        );\n        require(_tier <= maxTier, \"RiskManager: Invalid tier\");\n\n        ITokenBase(_fToken).isFToken(); // Sanity check to make sure its really a CToken\n\n        Market storage newMarket = markets[_fToken];\n        newMarket.isListed = true;\n        newMarket.collateralFactorMantissa = _collateralFactorMantissa;\n        newMarket.tier = _tier;\n\n        emit MarketListed(_fToken);\n    }\n\n    function setSupplyPaused(address _fToken, bool _state)\n        external\n        onlyListed(_fToken)\n        onlyAdmin\n        returns (bool)\n    {\n        supplyGuardianPaused[_fToken] = _state;\n        emit ActionPausedMarket(_fToken, \"Supply\", _state);\n        return _state;\n    }\n\n    function setBorrowPaused(address _fToken, bool _state)\n        external\n        onlyListed(_fToken)\n        onlyAdmin\n        returns (bool)\n    {\n        borrowGuardianPaused[_fToken] = _state;\n        emit ActionPausedMarket(_fToken, \"Borrow\", _state);\n        return _state;\n    }\n\n    function setTransferPaused(bool _state) external onlyAdmin returns (bool) {\n        transferGuardianPaused = _state;\n        emit ActionPausedGlobal(\"Transfer\", _state);\n        return _state;\n    }\n\n    function setSeizePaused(bool _state) external onlyAdmin returns (bool) {\n        seizeGuardianPaused = _state;\n        emit ActionPausedGlobal(\"Seize\", _state);\n        return _state;\n    }\n\n    /********************************* Hooks *********************************/\n\n    /**\n     * NOTE: Although the hooks are free to call externally, it is important to\n     * note that they may not be accurate when called externally by non-Furion\n     * contracts because accrueInterest() is not called and lastAccrualBlock may\n     * not be the same as current block number. In other words, market state may\n     * not be up-to-date.\n     */\n\n    /**\n     * @dev Checks if the account should be allowed to supply tokens in the given market.\n     */\n    function supplyAllowed(address _fToken)\n        external\n        view\n        onlyListed(_fToken)\n        returns (bool)\n    {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(\n            !supplyGuardianPaused[_fToken],\n            \"RiskManager: Supplying is paused\"\n        );\n\n        return true;\n    }\n\n    /**\n     * @dev Checks if the account should be allowed to redeem fTokens for underlying\n     *  asset in the given market.\n     * @param _redeemTokens Amount of fTokens used for redemption.\n     */\n    function redeemAllowed(\n        address _fToken,\n        address _redeemer,\n        uint256 _redeemTokens\n    ) public view onlyListed(_fToken) returns (bool) {\n        // Can freely redeem if redeemer never entered market, as liquidity calculation is not affected\n        if (!markets[_fToken].isMember[_redeemer]) {\n            return true;\n        }\n\n        // Otherwise, perform a hypothetical liquidity check to guard against shortfall\n        (, uint256 shortfall, ) = getHypotheticalAccountLiquidity(\n            _redeemer,\n            _fToken,\n            _redeemTokens,\n            0\n        );\n        require(shortfall == 0, \"RiskManager: Insufficient liquidity\");\n\n        return true;\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to borrow the underlying\n     *  asset of the given market.\n     * @param _fToken The market to verify the borrow against.\n     * @param _borrower The account which would borrow the asset.\n     * @param _borrowAmount The amount of underlying the account would borrow.\n     *\n     * NOTE: Borrowing is disallowed whenever a bad debt is found, no matter there\n     * is spare liquidity in other tiers or not because the spare liquidity may be\n     * used for liquidation (e.g. There may be spare liquidity for cross-tier +\n     * isolation tier but a shortfall in collateral tier. If liquidation of\n     * collateral tier collaterals are not enough to cover the debt, cross-tier\n     * collaterals will also be used).\n     */\n    function borrowAllowed(\n        address _fToken,\n        address _borrower,\n        uint256 _borrowAmount\n    ) external override onlyListed(_fToken) returns (bool) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(\n            !borrowGuardianPaused[_fToken],\n            \"RiskManager: Borrow is paused\"\n        );\n\n        if (!markets[_fToken].isMember[_borrower]) {\n            // only fToken contract may call borrowAllowed if borrower not in market\n            require(\n                msg.sender == _fToken,\n                \"RiskManager: Sender must be fToken contract\"\n            );\n\n            // attempt to add borrower to the market\n            addToMarketInternal(_fToken, _borrower);\n\n            // it should be impossible to break the important invariant\n            assert(markets[_fToken].isMember[_borrower]);\n        }\n\n        (uint256 price, ) = oracle.getUnderlyingPrice(_fToken);\n        require(price > 0, \"RiskManager: Oracle price is 0\");\n\n        (, uint256 shortfall, ) = getHypotheticalAccountLiquidity(\n            _borrower,\n            _fToken,\n            0,\n            _borrowAmount\n        );\n        require(\n            shortfall == 0,\n            \"RiskManager: Shortfall created, cannot borrow\"\n        );\n\n        /*\n        uint256 spareLiquidity;\n        marketTier = markets[_fToken].tier;\n\n        for (uint i = 1; i <= marketTier; ) {\n            spareLiquidity += liquidities[liquidities.length - i];\n\n            unchecked {\n                ++i;\n            }\n        }\n        require(spareLiquidity >= 0);\n        */\n\n        return true;\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to repay a borrow in the\n     *  given market (if a market is listed)\n     * @param _fToken The market to verify the repay against\n     */\n    function repayBorrowAllowed(address _fToken)\n        external\n        view\n        onlyListed(_fToken)\n        returns (bool)\n    {\n        return true;\n    }\n\n    /**\n     * @notice Checks if the liquidation should be allowed to occur\n     * @param _fTokenBorrowed Asset which was borrowed by the borrower\n     * @param _fTokenCollateral Asset which was used as collateral and will be seized\n     * @param _borrower The address of the borrower\n     * @param _repayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowAllowed(\n        address _fTokenBorrowed,\n        address _fTokenCollateral,\n        address _borrower,\n        uint256 _repayAmount\n    ) external view returns (bool) {\n        uint256 initiationBlockNumber = liquidatableTime[_borrower];\n        require(\n            initiationBlockNumber > 0,\n            \"RiskManager: Liquidation not yet initiated\"\n        );\n        // Cannot liquidate if auction has expired (60 blocks passed since last initiation)\n        require(\n            initiationBlockNumber + 60 > block.number,\n            \"RiskManager: Reset auction required\"\n        );\n\n        require(\n            markets[_fTokenBorrowed].isListed &&\n                markets[_fTokenCollateral].isListed,\n            \"RiskManager: Market is not listed\"\n        );\n\n        // Stored version used because accrueInterest() has been called at the\n        // beginning of liquidateBorrowInternal()\n        uint256 borrowBalance = ITokenBase(_fTokenBorrowed).borrowBalanceStored(\n            _borrower\n        );\n\n        (, uint256 shortfall, uint256 highestBorrowTier) = getAccountLiquidity(\n            _borrower\n        );\n        // The borrower must have shortfall in order to be liquidatable\n        require(shortfall > 0, \"RiskManager: Insufficient shortfall\");\n        // Liquidation should start from highest tier borrows\n        // (i.e. first repay collateral tier borrows then cross-tier...)\n        require(\n            markets[_fTokenBorrowed].tier == highestBorrowTier,\n            \"RiskManager: Liquidation should start from highest tier\"\n        );\n\n        // The liquidator may not repay more than what is allowed by the closeFactor\n        uint256 maxClose = mul_ScalarTruncate(\n            Exp({mantissa: closeFactorMantissa}),\n            borrowBalance\n        );\n        require(maxClose > _repayAmount, \"RiskManager: Repay too much\");\n\n        return true;\n    }\n\n    /**\n     * @notice Checks if the seizing of assets should be allowed to occur\n     * @param _fTokenCollateral Asset which was used as collateral and will be seized\n     * @param _fTokenBorrowed Asset which was borrowed by the borrower\n     * @param _borrower The address of the borrower\n     */\n    function seizeAllowed(\n        address _fTokenCollateral,\n        address _fTokenBorrowed,\n        address _borrower,\n        uint256 _seizeTokens\n    ) external view returns (bool allowed, bool isCollateralTier) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!seizeGuardianPaused, \"RiskManager: Seize is paused\");\n\n        // Revert if borrower collateral token balance < seizeTokens\n        require(\n            IERC20Upgradeable(_fTokenCollateral).balanceOf(_borrower) >=\n                _seizeTokens,\n            \"RiskManager: Seize token amount exceeds collateral\"\n        );\n\n        require(\n            markets[_fTokenBorrowed].isListed ||\n                markets[_fTokenCollateral].isListed,\n            \"RiskManager: Market is not listed\"\n        );\n\n        require(\n            ITokenBase(_fTokenCollateral).getRiskManager() ==\n                ITokenBase(_fTokenBorrowed).getRiskManager(),\n            \"RiskManager: Risk manager mismatch\"\n        );\n\n        allowed = true;\n\n        if (markets[_fTokenCollateral].tier == 1) {\n            isCollateralTier = true;\n        } else {\n            isCollateralTier = false;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\n     * @param _fToken The market to verify the transfer against\n     * @param _src The account which sources the tokens\n     * @param _amount The number of fTokens to transfer\n     */\n    function transferAllowed(\n        address _fToken,\n        address _src,\n        uint256 _amount\n    ) external view returns (bool) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!transferGuardianPaused, \"transfer is paused\");\n\n        // Currently the only consideration is whether or not\n        // the src is allowed to redeem this many tokens\n        require(\n            redeemAllowed(_fToken, _src, _amount),\n            \"RiskManager: Source not allowed to redeem that much fTokens\"\n        );\n\n        return true;\n    }\n\n    /****************************** Liquidation *******************************/\n\n    /**\n     * @notice Mark an account as liquidatable, start dutch-auction.\n     * @param _account Address of account to be marked liquidatable.\n     *\n     * NOTE: Auction has to be reset if it didn't close within 60 blocks after\n     * initiation, either because shortfall is not cleared or there are price\n     * changes that cleared the shortfall which makes the account no longer\n     * subject to liquidation.\n     */\n    function initiateLiquidation(address _account) external {\n        uint256 initiationBlockNumber = liquidatableTime[_account];\n        // Either never initiated or auction has to be reset\n        require(\n            initiationBlockNumber == 0 ||\n                block.number > initiationBlockNumber + 60,\n            \"RiskManager: Already initiated liquidation\"\n        );\n\n        (, uint256 shortfall, ) = getAccountLiquidity(_account);\n        // The borrower must have shortfall in order to be liquidatable\n        require(shortfall > 0, \"RiskManager: Insufficient shortfall\");\n\n        liquidatableTime[_account] = block.number;\n    }\n\n    /**\n     * @notice Account no longer susceptible to liquidation\n     * @param _account Address of account to reset tracker\n     *\n     * NOTE: The modifier checks if function caller is fToken contract. Only listed\n     * fTokens will have isLited set as true.\n     */\n    function closeLiquidation(address _account)\n        external\n        onlyListed(msg.sender)\n    {\n        (, uint256 shortfall, ) = getAccountLiquidity(_account);\n\n        // Reset tracker only if there are no more bad debts\n        if (shortfall == 0) {\n            delete liquidatableTime[_account];\n        }\n    }\n\n    function collateralFactorBoost(address _account)\n        public\n        view\n        returns (uint256 boostMantissa)\n    {\n        uint256 veBalance = veToken.balanceOf(_account);\n        // How many 0.1% the collateral factor will be increased by.\n        // Result is rounded down by default which is fine\n        uint256 multiplier = veBalance / COLLATERAL_FACTOR_BOOST_REQUIRED_TOKEN;\n\n        boostMantissa = COLLATERAL_FACTOR_BOOST_INCREASE_MANTISSA * multiplier;\n\n        if (boostMantissa > COLLATERAL_FACTOR_MAX_BOOST_MANTISSA) {\n            boostMantissa = COLLATERAL_FACTOR_MAX_BOOST_MANTISSA;\n        }\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return liquidities Hypothetical spare liquidity for each asset tier from low to high\n     * @return shortfall Account shortfall below collateral requirements\n     */\n    function getAccountLiquidity(address _account)\n        public\n        view\n        returns (\n            uint256[] memory liquidities,\n            uint256 shortfall,\n            uint256 highestBorrowTier\n        )\n    {\n        // address(0) -> no iteractions with market\n        (\n            liquidities,\n            shortfall,\n            highestBorrowTier\n        ) = getHypotheticalAccountLiquidity(_account, address(0), 0, 0);\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts\n     *  were redeemed/borrowed\n     * @param _account The account to determine liquidity for\n     * @param _fToken The market to hypothetically redeem/borrow in\n     * @param _redeemToken The number of fTokens to hypothetically redeem\n     * @param _borrowAmount The amount of underlying to hypothetically borrow\n     * @dev Note that we calculate the exchangeRateStored for each collateral\n     *  cToken using stored data, without calculating accumulated interest.\n     * @return liquidities Hypothetical spare liquidity for each asset tier from low to high\n     * @return shortfall Hypothetical account shortfall below collateral requirements\n     *\n     * NOTE: liquidities return sequence [tier 1 liquidity, tier 2 liquidity,\n     * tier 3 liquidity]\n     */\n    function getHypotheticalAccountLiquidity(\n        address _account,\n        address _fToken,\n        uint256 _redeemToken,\n        uint256 _borrowAmount\n    )\n        public\n        view\n        returns (\n            uint256[] memory liquidities,\n            uint256 shortfall,\n            uint256 highestBorrowTier\n        )\n    {\n        // First assume highest collateral tier is isolation tier, because if\n        // left uninitialized, it will remain to be the invalid 0 tier\n        highestBorrowTier = 3;\n\n        // Holds all our calculation results, see { RiskManagerStorage }\n        AccountLiquidityLocalVars memory vars;\n\n        vars.maxTierMem = maxTier;\n\n        uint256[] memory tierCollateralValues = new uint256[](vars.maxTierMem);\n        uint256[] memory tierBorrowValues = new uint256[](vars.maxTierMem);\n        liquidities = new uint256[](vars.maxTierMem);\n\n        // For each asset the account is in\n        // Loop through to calculate colalteral and borrow values for each tier\n        address[] memory assets = marketsEntered[_account];\n        for (uint256 i; i < assets.length; ) {\n            vars.asset = assets[i];\n            vars.assetTier = markets[vars.asset].tier;\n\n            // Read the balances and exchange rate from the asset (market)\n            (\n                vars.tokenBalance,\n                vars.borrowBalance,\n                vars.exchangeRateMantissa\n            ) = ITokenBase(vars.asset).getAccountSnapshot(_account);\n\n            // If account borrowed in asset market, and has higher tier than the\n            // current highestBorrowTier\n            if (vars.borrowBalance > 0 && vars.assetTier < highestBorrowTier) {\n                highestBorrowTier = vars.assetTier;\n            }\n\n            vars.collateralFactor = Exp({\n                mantissa: markets[vars.asset].collateralFactorMantissa + 0 //collateralFactorBoost(_account)\n            });\n\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\n\n            // Get the normalized price of the underlying asset of fToken\n            (vars.oraclePriceMantissa, vars.decimal) = oracle\n                .getUnderlyingPrice(vars.asset);\n            require(\n                vars.oraclePriceMantissa > 0,\n                \"RiskManager: Oracle price is 0\"\n            );\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\n\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\n            vars.collateralValuePerToken = mul_(\n                mul_(vars.oraclePrice, vars.exchangeRate),\n                vars.collateralFactor\n            );\n\n            // Divide by decimal of underlying token because we want the price in mantissa, not in decimals of\n            // underlying asset\n            tierCollateralValues[vars.assetTier - 1] +=\n                (vars.tokenBalance * vars.collateralValuePerToken.mantissa) /\n                vars.decimal;\n\n            tierBorrowValues[vars.assetTier - 1] +=\n                (vars.borrowBalance * vars.oraclePriceMantissa) /\n                vars.decimal;\n\n            // Calculate effects of interacting with fToken\n            if (vars.asset == _fToken) {\n                // Redeem effect\n                // Collateral reduced after redemption\n                tierCollateralValues[vars.assetTier - 1] -=\n                    (_redeemToken * vars.collateralValuePerToken.mantissa) /\n                    vars.decimal;\n\n                // Add amount to hypothetically borrow\n                // Borrow increased after borrowing\n                tierBorrowValues[vars.assetTier - 1] +=\n                    (_borrowAmount * vars.oraclePriceMantissa) /\n                    vars.decimal;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // In most cases, borrowers would prefer to back borrows with the lowest\n        // tier assets possible (i.e. isolation tier collateral -> isolation tier\n        // borrow, instead of collateral tier collateral -> isolation tier borrow).\n        // Therefore, we calculate starting from lowest tier (i.e. highest tier number).\n        //\n        // e.g. First iteration (accumulatedShortfall = 0):\n        // isolation tier collateral > isolation tier borrow, push difference\n        // to liquidities array; isolation collateral < isolation tier borrow,\n        // add difference to `accumulatedShortfall` and see if higher tier collaterals\n        // can back all borrows.\n        // Second iteration (Assume accumulatedShortfall > 0):\n        // cross-tier collateral > cross-tier borrow + accumulatedShortfall, push difference\n        // to liquidities array; cross-tier collateral < cross-tier borrow + accumulatedShortfall,\n        // accumulate tier shortfall to accumulatedShortfall and see if there are enough\n        // collateral tier collateral to back the total shortfall\n        for (uint256 i = vars.maxTierMem; i > 0; ) {\n            vars.collateral = tierCollateralValues[i - 1];\n            vars.threshold =\n                tierBorrowValues[i - 1] +\n                vars.accumulatedShortfall;\n\n            if (vars.collateral >= vars.threshold) {\n                liquidities[i - 1] = vars.collateral - vars.threshold;\n                vars.accumulatedShortfall = 0;\n            } else {\n                vars.accumulatedShortfall = vars.threshold - vars.collateral;\n                liquidities[i - 1] = 0;\n            }\n\n            unchecked {\n                --i;\n            }\n        }\n\n        // Return value\n        shortfall = vars.accumulatedShortfall;\n    }\n\n    /**\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\n     * @dev Used in liquidation (called in fToken.liquidateBorrowInternal)\n     * @param _fTokenBorrowed The address of the borrowed cToken\n     * @param _fTokenCollateral The address of the collateral cToken\n     * @param _repayAmount The amount of fTokenBorrowed underlying to convert into fTokenCollateral tokens\n     * @return seizeTokens Number of fTokenCollateral tokens to be seized in a liquidation\n     */\n    function liquidateCalculateSeizeTokens(\n        address _borrower,\n        address _fTokenBorrowed,\n        address _fTokenCollateral,\n        uint256 _repayAmount\n    ) external view override returns (uint256 seizeTokens, uint256 repayValue) {\n        // Read oracle prices for borrowed and collateral markets\n        (uint256 priceBorrowedMantissa, uint256 borrowedDecimal) = oracle\n            .getUnderlyingPrice(_fTokenBorrowed);\n        (uint256 priceCollateralMantissa, ) = oracle.getUnderlyingPrice(\n            _fTokenCollateral\n        );\n        require(\n            priceBorrowedMantissa > 0 && priceCollateralMantissa > 0,\n            \"RiskManager: Oracle price is 0\"\n        );\n\n        /**\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\n         *  seizeTokens = seizeAmount / exchangeRate\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\n         */\n        uint256 amountAfterDiscount = mul_ScalarTruncate(\n            Exp({mantissa: liquidateCalculateDiscount(_borrower)}),\n            _repayAmount\n        );\n        uint256 valueAfterDiscount = (priceBorrowedMantissa *\n            amountAfterDiscount) / borrowedDecimal;\n\n        // Stored version used because accrueInterest() already called at the\n        // beginning of liquidateBorrowInternal()\n        uint256 collateralExchangeRateMantissa = ITokenBase(_fTokenCollateral)\n            .exchangeRateStored(); // Note: reverts on error\n\n        //   (value / underyling) * exchangeRate\n        // = (value /underlying) * (underlying / token)\n        // = value per token\n        Exp memory valuePerToken = mul_(\n            Exp({mantissa: priceCollateralMantissa}),\n            Exp({mantissa: collateralExchangeRateMantissa})\n        );\n\n        // div_: uint, exp -> uint\n        seizeTokens = div_(valueAfterDiscount, valuePerToken);\n        repayValue = (priceBorrowedMantissa * _repayAmount) / borrowedDecimal;\n    }\n\n    /**\n     * @notice Get the discount for liquidating borrower at current moment\n     * @param _borrower The account getting liquidated\n     */\n    function liquidateCalculateDiscount(address _borrower)\n        public\n        view\n        returns (uint256 discountMantissa)\n    {\n        uint256 startBlock = liquidatableTime[_borrower];\n        uint256 currentBlock = block.number;\n        // Solidity rounds down result by default, which is fine\n        uint256 discountIntervalPassed = (currentBlock - startBlock) /\n            discountInterval;\n\n        discountMantissa =\n            LIQUIDATION_INCENTIVE_MIN_MANTISSA +\n            discountIncreaseMantissa *\n            discountIntervalPassed;\n        if (discountMantissa > LIQUIDATION_INCENTIVE_MAX_MANTISSA) {\n            discountMantissa = LIQUIDATION_INCENTIVE_MAX_MANTISSA;\n        }\n    }\n}\n"
    },
    "contracts/money-market/RiskManagerStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ExponentialNoError.sol\";\nimport \"./interfaces/IPriceOracle.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract RiskManagerStorage is ExponentialNoError {\n    bool public constant IS_RISK_MANAGER = true;\n\n    // closeFactorMantissa must be strictly greater than this value\n    uint256 internal constant CLOSE_FACTOR_MIN_MANTISSA = 5e16; // 5%\n\n    // closeFactorMantissa must not exceed this value\n    uint256 internal constant CLOSE_FACTOR_MAX_MANTISSA = 9e17; // 90%\n\n    // No collateralFactorMantissa may exceed this value\n    uint256 internal constant COLLATERAL_FACTOR_MAX_MANTISSA = 9e17; // 90%\n\n    uint256 internal constant COLLATERAL_FACTOR_MAX_BOOST_MANTISSA = 2.5e16; // 2.5%\n\n    uint256 internal constant COLLATERAL_FACTOR_BOOST_INCREASE_MANTISSA = 1e15; // 0.1%\n\n    uint256 internal constant COLLATERAL_FACTOR_BOOST_REQUIRED_TOKEN =\n        1000000e18; // 1000000 veFUR\n\n    uint256 internal constant LIQUIDATION_INCENTIVE_MIN_MANTISSA = 1.05e18; // 105%\n\n    uint256 internal constant LIQUIDATION_INCENTIVE_MAX_MANTISSA = 1.1e18; // 110%\n\n    /// @notice Administrator for this contract\n    address public admin;\n\n    /// @notice Pending administrator for this contract\n    address public pendingAdmin;\n\n    IERC20 public veToken;\n\n    /// @notice Oracle which gives the price of underlying assets\n    IPriceOracle public oracle;\n\n    uint256 public closeFactorMantissa;\n\n    /// @notice List of assets an account has entered, capped by maxAssets\n    mapping(address => address[]) public marketsEntered;\n\n    struct Market {\n        // Whether or not this market is listed\n        bool isListed;\n        //  Must be between 0 and 1, and stored as a mantissa\n        //  For instance, 0.9 to allow borrowing 90% of collateral value\n        uint256 collateralFactorMantissa;\n        // Whether or not an account is entered in this market\n        mapping(address => bool) isMember;\n        /**\n         * @notice Tiers: 1 - collateral, 2 - cross-tier, 3 - isolation\n         *\n         * Isolation assets can only be colalteral for isolation assets.\n         * Cross-tier assets can be colalteral for cross-tier and isolation assets.\n         * Collateral assets can be collateral for all assets.\n         *\n         * NOTE: The smaller the number, the higher the tier. This is because\n         * lower tier assets may be added in the future.\n         */\n        uint256 tier;\n    }\n\n    /**\n     * @notice Mapping of fTokens -> Market metadata\n     * @dev Used e.g. to determine if a market is supported\n     */\n    mapping(address => Market) public markets;\n\n    // Largest tier number that markets can have, i.e. number for worst tier\n    uint256 maxTier;\n\n    /**\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\n     *\n     * Actions which allow users to remove their own assets cannot be paused.\n     * Liquidation / seizing / transfer can only be paused globally, not by market.\n     */\n    address public pauseGuardian;\n    bool public _supplyGuardianPaused;\n    bool public _borrowGuardianPaused;\n    bool public transferGuardianPaused;\n    bool public seizeGuardianPaused;\n    mapping(address => bool) public supplyGuardianPaused;\n    mapping(address => bool) public borrowGuardianPaused;\n\n    /**\n     * @notice Mapping of account -> time when account became liquidatable\n     * @dev Records the block number when liquidation starts. Used for calculating\n     *  liquidation discount rate.\n     */\n    mapping(address => uint256) public liquidatableTime;\n\n    // After how many blocks will discount rate increase\n    uint256 discountInterval;\n\n    // By how much discount rate increases each time\n    uint256 discountIncreaseMantissa;\n\n    /**\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\n     *\n     * Note: `tokenBalance` is the number of fTokens the account owns in the market,\n     * `borrowBalance` is the amount of underlying that the account has borrowed.\n     */\n    struct AccountLiquidityLocalVars {\n        uint256 maxTierMem;\n        address asset;\n        uint256 assetTier;\n        uint256 decimal;\n        uint256 tokenBalance;\n        uint256 borrowBalance;\n        uint256 exchangeRateMantissa;\n        uint256 oraclePriceMantissa;\n        uint256 collateral;\n        uint256 threshold;\n        uint256 accumulatedShortfall;\n        Exp collateralFactor;\n        Exp exchangeRate;\n        Exp oraclePrice;\n        Exp collateralValuePerToken;\n    }\n}\n"
    },
    "contracts/money-market/SimplePriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IPriceOracle.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"./interfaces/IFErc20.sol\";\n\ncontract SimplePriceOracle is IPriceOracle {\n    mapping(address => uint256) prices;\n    // e.g. A token with 18 decimals, decimals[asset] = 1e18, NOT 18\n    mapping(address => uint256) decimals;\n    event PricePosted(\n        address asset,\n        uint256 previousPriceMantissa,\n        uint256 requestedPriceMantissa,\n        uint256 newPriceMantissa\n    );\n\n    function _getUnderlyingAddress(address _fToken)\n        private\n        view\n        returns (address asset)\n    {\n        if (\n            compareStrings(IERC20MetadataUpgradeable(_fToken).symbol(), \"fETH\")\n        ) {\n            asset = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n        } else {\n            asset = IFErc20(_fToken).getUnderlying();\n        }\n    }\n\n    // Price of 1, not 1e18, underlying token in terms of ETH (mantissa)\n    function getUnderlyingPrice(address _fToken)\n        public\n        view\n        override\n        returns (uint256, uint256)\n    {\n        address asset = _getUnderlyingAddress(_fToken);\n        return (prices[asset], decimals[asset]);\n    }\n\n    function setUnderlyingPrice(\n        address _fToken,\n        uint256 _underlyingPriceMantissa,\n        uint256 _decimal\n    ) public {\n        address asset = _getUnderlyingAddress(_fToken);\n        emit PricePosted(\n            asset,\n            prices[asset],\n            _underlyingPriceMantissa,\n            _underlyingPriceMantissa\n        );\n        prices[asset] = _underlyingPriceMantissa;\n        decimals[asset] = _decimal;\n    }\n\n    function setDirectPrice(\n        address _asset,\n        uint256 _price,\n        uint256 _decimal\n    ) public {\n        emit PricePosted(_asset, prices[_asset], _price, _price);\n        prices[_asset] = _price;\n        decimals[_asset] = _decimal;\n    }\n\n    // v1 price oracle interface for use as backing of proxy\n    function assetPrices(address _asset)\n        external\n        view\n        returns (uint256, uint256)\n    {\n        return (prices[_asset], decimals[_asset]);\n    }\n\n    function compareStrings(string memory _a, string memory _b)\n        internal\n        pure\n        returns (bool)\n    {\n        return (keccak256(abi.encodePacked((_a))) ==\n            keccak256(abi.encodePacked((_b))));\n    }\n}\n"
    },
    "contracts/money-market/FErc20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./TokenBase.sol\";\nimport \"./TokenStorages.sol\";\nimport \"./interfaces/IFErc20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract FErc20 is TokenBase, FErc20Storage, IFErc20 {\n    function initialize(\n        address _underlying,\n        address _riskManager,\n        address _interestRateModel,\n        address _priceOracle,\n        address _checker,\n        string memory _name,\n        string memory _symbol\n    ) public initializer {\n        __TokenBase_init(\n            _riskManager,\n            _interestRateModel,\n            _priceOracle,\n            _checker,\n            _name,\n            _symbol\n        );\n\n        underlying = _underlying;\n    }\n\n    function supply(uint256 _supplyAmount) external {\n        // Params: supplier, supply amount\n        supplyInternal(msg.sender, _supplyAmount);\n    }\n\n    function redeem(uint256 _redeemTokens) external {\n        // Params: redeemer, tokens supplied for redemption, amount of underlying to receive\n        redeemInternal(msg.sender, _redeemTokens, 0);\n    }\n\n    function redeemUnderlying(uint256 _redeemAmount) external {\n        // Params: redeemer, tokens supplied for redemption, amount of underlying to receive\n        redeemInternal(msg.sender, 0, _redeemAmount);\n    }\n\n    function borrow(uint256 _borrowAmount) external {\n        // Params: borrower, borrow amount\n        borrowInternal(msg.sender, _borrowAmount);\n    }\n\n    function repayBorrow(uint256 _repayAmount) external {\n        // Params: payer, borrower, repay amount\n        repayBorrowInternal(msg.sender, msg.sender, _repayAmount);\n    }\n\n    function repayBorrowBehalf(address _borrower, uint256 _repayAmount)\n        external\n    {\n        // Params: payer, borrower, repay amount\n        repayBorrowInternal(msg.sender, _borrower, _repayAmount);\n    }\n\n    function liquidateBorrow(\n        address _borrower,\n        uint256 _repayAmount,\n        address _fTokenCollateral\n    ) external {\n        // Params: liquidator, borrower, repay amount, collateral token to be seized\n        liquidateBorrowInternal(\n            msg.sender,\n            _borrower,\n            _repayAmount,\n            _fTokenCollateral\n        );\n    }\n\n    /******************************* Safe Token *******************************/\n\n    function getUnderlying() public view override returns (address) {\n        return underlying;\n    }\n\n    function doTransferIn(address _from, uint256 _amount) internal override {\n        IERC20 underlyingToken = IERC20(underlying);\n        underlyingToken.transferFrom(_from, address(this), _amount);\n\n        totalCash += _amount;\n    }\n\n    function doTransferOut(address payable _to, uint256 _amount)\n        internal\n        override\n    {\n        IERC20 underlyingToken = IERC20(underlying);\n        underlyingToken.transfer(_to, _amount);\n\n        totalCash -= _amount;\n    }\n}\n"
    },
    "contracts/mock/MockUSD.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @notice This is the MockUSD for test\n */\ncontract MockUSD is ERC20 {\n    uint256 public constant INITIAL_SUPPLY = 100000 * 1e6;\n\n    constructor() ERC20(\"MOCKUSD\", \"USDC\") {\n        // When first deployed, give the owner some coins\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    // Everyone can mint\n    function mint(address _account, uint256 _amount) public {\n        _mint(_account, _amount);\n    }\n\n    // 6 decimals to mock stablecoins\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/TestClaim.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"./tokens/interfaces/IFurionToken.sol\";\nimport \"./mock/MockUSD.sol\";\n\nimport \"./test-only/CoolCats.sol\";\n\n/**\n * @title  Claim necessary tokens for testing Furion\n * @notice We will mint sender specific amount of FurionToken, MockUSD, and NFTs\n */\n\ncontract TestClaim {\n    // Furion has a total supply of 1 billion\n    mapping(address => bool) public claimAlready;\n\n    IFurionToken public furion;\n    MockUSD public usd;\n    CoolCats public coolCats;\n\n    constructor(\n        IFurionToken _furion,\n        MockUSD _usd,\n        CoolCats _coolCats\n    ) {\n        furion = _furion;\n        usd = _usd;\n        coolCats = _coolCats;\n    }\n\n    /**\n     * @notice Claim testing tokens\n     */\n    function claimTest() external {\n        // every account can only claim once\n        require(!claimAlready[msg.sender], \"HAVE_CLAIMED\");\n\n        furion.mintFurion(msg.sender, 10000 ether);\n        usd.mint(msg.sender, 10000000000);\n        coolCats.giveAway(msg.sender, 2);\n    }\n}\n"
    },
    "contracts/tokens/interfaces/IFurionToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IFurionToken is IERC20, IERC20Permit {\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Functions ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n    function CAP() external view returns (uint256);\n\n    /**\n     * @notice Mint Furion native tokens\n     * @param  _account Receiver's address\n     * @param  _amount Amount to be minted\n     */\n    function mintFurion(address _account, uint256 _amount) external;\n\n    /**\n     * @notice Burn Furion native tokens\n     * @param  _account Receiver's address\n     * @param  _amount Amount to be burned\n     */\n    function burnFurion(address _account, uint256 _amount) external;\n}\n"
    },
    "contracts/test-only/CoolCats.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n\ncontract CoolCats is ERC721Enumerable {\n    using Strings for uint256;\n\n    string private _baseTokenURI;\n    uint256 private _reserved = 100;\n    uint256 private _price = 0.06 ether;\n    bool public _paused = true;\n\n    address public owner;\n\n    // Cool Cats are so cool they dont need a lots of complicated code :)\n    // 9999 cats in total, cos cats have 9 lives\n    constructor() ERC721(\"Cool Cats\", \"COOL\") {\n        owner = msg.sender;\n        setBaseURI(\"https://api.coolcatsnft.com/cat/\");\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"ONLY_OWNER\");\n        _;\n    }\n\n    function adopt(uint256 num) public payable {\n        uint256 supply = totalSupply();\n        require(!_paused, \"Sale paused\");\n        require(num < 21, \"You can adopt a maximum of 20 Cats\");\n        require(\n            supply + num < 10000 - _reserved,\n            \"Exceeds maximum Cats supply\"\n        );\n        require(msg.value >= _price * num, \"Ether sent is not correct\");\n\n        for (uint256 i; i < num; i++) {\n            _safeMint(msg.sender, supply + i);\n        }\n    }\n\n    function walletOfOwner(address _owner)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256 tokenCount = balanceOf(_owner);\n\n        uint256[] memory tokensId = new uint256[](tokenCount);\n        for (uint256 i; i < tokenCount; i++) {\n            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\n        }\n        return tokensId;\n    }\n\n    // Just in case Eth does some crazy stuff\n    function setPrice(uint256 _newPrice) public onlyOwner {\n        _price = _newPrice;\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    function setBaseURI(string memory baseURI) public onlyOwner {\n        _baseTokenURI = baseURI;\n    }\n\n    function getPrice() public view returns (uint256) {\n        return _price;\n    }\n\n    function giveAway(address _to, uint256 _amount) external {\n        require(_amount <= _reserved, \"Exceeds reserved Cat supply\");\n\n        uint256 supply = totalSupply();\n        for (uint256 i; i < _amount; i++) {\n            _safeMint(_to, supply + i);\n        }\n\n        _reserved -= _amount;\n    }\n\n    function pause(bool val) public onlyOwner {\n        _paused = val;\n    }\n}\n"
    },
    "contracts/tokens/FurionToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"./interfaces/IFurionToken.sol\";\nimport \"../utils/ERC20PermitWithMultipleMinters.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title  Furion Token\n * @notice FurionToken inherits from ERC20 Permit which contains the basic ERC20 implementation.\n *         FurionToken can use the permit function rather than approve + transferFrom.\n *\n *         FurionToken has an owner, a minterList and a burnerList.\n *         When lauched on mainnet, the owner may be removed or tranferred to a multisig.\n *         By default, the owner & the first minter will be the one that deploys the contract.\n *         The minterList should contain FarmingPool and PurchaseIncentiveVault.\n *         The burnerList should contain EmergencyPool.\n */\ncontract FurionToken is ERC20PermitWithMultipleMinters {\n    // Furion has a total supply of 1 billion\n    uint256 public constant CAP = 1e9 ether;\n\n    /// @notice Indicator that it is one of the Furion Tokens\n    bool public constant isFurionTokens = true;\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Constructor *************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    constructor() ERC20PermitWithMultipleMinters(\"FurionToken\", \"FUR\") {}\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Modifiers **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    // Furion token has a hard cap of 1 billion\n    modifier notExceedCap(uint256 _amount) {\n        require(\n            totalSupply() + _amount <= CAP,\n            \"Exceeds the FUR cap (1 billion)\"\n        );\n        _;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Main Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Mint Furion tokens\n     * @param  _account Receiver's address\n     * @param  _amount  Amount to be minted\n     */\n    function mintFurion(address _account, uint256 _amount)\n        external\n        notExceedCap(_amount)\n    {\n        mint(_account, _amount);\n    }\n\n    /**\n     * @notice Burn Furion tokens\n     * @param  _account Receiver's address\n     * @param  _amount  Amount to be burned\n     */\n    function burnFurion(address _account, uint256 _amount) external {\n        burn(_account, _amount);\n    }\n}\n"
    },
    "contracts/utils/ERC20PermitWithMultipleMinters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport \"./OwnableWithoutContext.sol\";\n\n/**\n * @title  ERC20 with Multiple Minters and Burners\n * @notice This is contract used for ERC20 tokens that has multiple minters and burners.\n * @dev    The minters and burners are some contracts in Furion that need to issue FUR.\n *         It has basic implementations for ERC20 and also the owner control.\n *         Even if the owner is renounced to zero address, the token can still be minted/burned.\n *         FUR is this kind ERC20 token.\n */\ncontract ERC20PermitWithMultipleMinters is ERC20Permit, OwnableWithoutContext {\n    // List of all minters\n    mapping(address => bool) public isMinter;\n\n    // List of all burners\n    mapping(address => bool) public isBurner;\n\n    event MinterAdded(address newMinter);\n    event MinterRemoved(address oldMinter);\n\n    event BurnerAdded(address newBurner);\n    event BurnerRemoved(address oldBurner);\n\n    event Mint(address indexed account, uint256 amount);\n    event Burn(address indexed account, uint256 amount);\n\n    constructor(string memory name, string memory symbol)\n        ERC20(name, symbol)\n        ERC20Permit(name)\n        OwnableWithoutContext(msg.sender)\n    {\n        // After the owner is transferred to multisig governance\n        // This initial minter should be removed\n        isMinter[_msgSender()] = true;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Modifiers ****************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     *@notice Check if the msg.sender is in the minter list\n     */\n    modifier validMinter(address _sender) {\n        require(isMinter[_sender], \"Invalid minter\");\n        _;\n    }\n\n    /**\n     * @notice Check if the msg.sender is in the burner list\n     */\n    modifier validBurner(address _sender) {\n        require(isBurner[_sender], \"Invalid burner\");\n        _;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Admin Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Add a new minter into the minterList\n     * @param _newMinter Address of the new minter\n     */\n    function addMinter(address _newMinter) external onlyOwner {\n        require(!isMinter[_newMinter], \"Already a minter\");\n\n        isMinter[_newMinter] = true;\n\n        emit MinterAdded(_newMinter);\n    }\n\n    /**\n     * @notice Remove a minter from the minterList\n     * @param _oldMinter Address of the minter to be removed\n     */\n    function removeMinter(address _oldMinter) external onlyOwner {\n        require(isMinter[_oldMinter], \"Not a minter\");\n\n        isMinter[_oldMinter] = false;\n\n        emit MinterRemoved(_oldMinter);\n    }\n\n    /**\n     * @notice Add a new burner into the burnerList\n     * @param _newBurner Address of the new burner\n     */\n    function addBurner(address _newBurner) external onlyOwner {\n        require(!isBurner[_newBurner], \"Already a burner\");\n\n        isBurner[_newBurner] = true;\n\n        emit BurnerAdded(_newBurner);\n    }\n\n    /**\n     * @notice Remove a minter from the minterList\n     * @param _oldBurner Address of the minter to be removed\n     */\n    function removeBurner(address _oldBurner) external onlyOwner {\n        require(isMinter[_oldBurner], \"Not a burner\");\n\n        isBurner[_oldBurner] = false;\n\n        emit BurnerRemoved(_oldBurner);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Internal Functions ********************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Mint tokens\n     * @param _account Receiver's address\n     * @param _amount Amount to be minted\n     */\n    function mint(address _account, uint256 _amount)\n        internal\n        validMinter(_msgSender())\n    {\n        _mint(_account, _amount); // ERC20 method with an event\n        emit Mint(_account, _amount);\n    }\n\n    /**\n     * @notice Burn tokens\n     * @param _account address\n     * @param _amount amount to be burned\n     */\n    function burn(address _account, uint256 _amount)\n        internal\n        validBurner(_msgSender())\n    {\n        _burn(_account, _amount);\n        emit Burn(_account, _amount);\n    }\n}\n"
    },
    "contracts/utils/OwnableWithoutContext.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\n/**\n * @dev The owner can be set during deployment, not default to be msg.sender\n */\nabstract contract OwnableWithoutContext {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor(address _initialOwner) {\n        _transferOwnership(_initialOwner);\n    }\n\n    /**\n     * @notice Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @notice Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @notice Leaves the contract without owner. It will not be possible to call\n     *         `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * @dev    Renouncing ownership will leave the contract without an owner,\n     *         thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\n     * @dev    Can only be called by the current owner.\n     * @param  newOwner Address of the new owner\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\n     * @dev    Internal function without access restriction.\n     * @param  newOwner Address of the new owner\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/furion-farming/FarmingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {OwnableWithoutContext} from \"../utils/OwnableWithoutContext.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport {IFurionToken} from \"../tokens/interfaces/IFurionToken.sol\";\nimport {Math} from \"../libraries/Math.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title  Farming Pool\n * @notice This contract is for Furion tokens and Furion LPTokens mining on Furion\n * @dev    The pool id starts from 1 rather than 0\n *         The FUR reward is calculated by timestamp rather than block number\n *         Farming rate will be reset daily according to their TVL in previous date\n *         Only top five pools + another random one will be rewarded\n */\n\ncontract FarmingPool is OwnableWithoutContext, ReentrancyGuard, Pausable {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IFurionToken;\n    using Math for uint256;\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Variables **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    string public constant name = \"Furion LP Farming Pool\";\n\n    // The reward token is Furion\n    IFurionToken public furion;\n\n    // SCALE/Precision used for calculating rewards\n    uint256 public constant SCALE = 1e12;\n\n    // PoolId starts from 1\n    uint256 public _nextPoolId;\n\n    // Farming starts from a certain block timestamp\n    uint256 public startTimestamp;\n\n    struct PoolInfo {\n        address lpToken; // LPToken address to farm FUR\n        uint256 basicFurionPerSecond; // Basic Reward speed\n        uint256 lastRewardTimestamp; // Last reward timestamp\n        uint256 accFurionPerShare; // Accumulated Furion per share\n    }\n\n    PoolInfo[] public poolList;\n\n    // lptoken address => poolId\n    mapping(address => uint256) public poolMapping;\n\n    // poolId => is farming or not\n    mapping(uint256 => bool) public isFarming;\n\n    struct UserInfo {\n        uint256 rewardDebt; // Furion reward debt\n        uint256 stakingBalance; // the amount of a user's staking in the pool\n    }\n\n    // poolId => userAddress => userInfo\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n    event StartTimestampChanged(uint256 startTimestamp);\n    event Stake(address staker, uint256 poolId, uint256 amount);\n    event Withdraw(address staker, uint256 poolId, uint256 amount);\n    event Harvest(\n        address staker,\n        address rewardReceiver,\n        uint256 poolId,\n        uint256 pendingReward\n    );\n\n    event NewPoolAdded(address lpToken, uint256 basicFurionPerSecond);\n    event FarmingPoolStarted(uint256 poolId, uint256 timestamp);\n    event FarmingPoolStopped(uint256 poolId, uint256 timestamp);\n    event FurionRewardChanged(uint256 poolId, uint256 basicFurionPerSecond);\n    event PoolUpdated(uint256 poolId, uint256 accFurionPerShare);\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constructor ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    constructor(address _furion) OwnableWithoutContext(msg.sender) {\n        furion = IFurionToken(_furion);\n\n        // Start from 1\n        _nextPoolId = 1;\n\n        // add one empty pool to make array index align with poolId\n        poolList.push(\n            PoolInfo({\n                lpToken: address(0),\n                basicFurionPerSecond: 0,\n                lastRewardTimestamp: 0,\n                accFurionPerShare: 0\n            })\n        );\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************** Modifiers *************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice The address can not be zero\n     */\n    modifier notZeroAddress(address _address) {\n        require(_address != address(0), \"FARMING_POOL: ZERO_ADDRESS\");\n        _;\n    }\n\n    /**\n     * @notice The pool is still in farming\n     */\n    modifier stillFarming(uint256 _poolId) {\n        require(isFarming[_poolId], \"FARMING_POOL: POOL_NOT_FARMING\");\n        _;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Main Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Add a new lp into the pool\n     * @dev Can only be called by the owner\n     *      The reward speed can be 0 and set later by setFurionReward function\n     * @param _lpToken LP token address\n     * @param _basicFurionPerSecond Basic reward speed(per second) for this new pool\n     * @param _withUpdate Whether update all pools' status\n     */\n    function add(\n        address _lpToken,\n        uint256 _basicFurionPerSecond,\n        bool _withUpdate\n    ) public notZeroAddress(_lpToken) onlyOwner whenNotPaused {\n        // Check if already exists, if the poolId is 0, that means not in the pool\n        require(!_alreadyInPool(_lpToken), \"FARMING_POOL: ALREADY_IN_POOL\");\n\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\n            ? block.timestamp\n            : startTimestamp;\n\n        // Push this new pool into the list\n        poolList.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                basicFurionPerSecond: _basicFurionPerSecond,\n                lastRewardTimestamp: lastRewardTimestamp,\n                accFurionPerShare: 0\n            })\n        );\n\n        // Store the poolId and set the farming status to true\n        if (_basicFurionPerSecond > 0) isFarming[_nextPoolId] = true;\n\n        poolMapping[_lpToken] = _nextPoolId++;\n\n        emit NewPoolAdded(_lpToken, _basicFurionPerSecond);\n    }\n\n    /**\n     * @notice Update the FurionPerSecond for a specific pool (set to 0 to stop farming)\n     * @param _poolId Id of the farming pool\n     * @param _basicFurionPerSecond New basic reward amount per second\n     * @param _withUpdate Whether update all pools\n     */\n    function setFurionReward(\n        uint256 _poolId,\n        uint256 _basicFurionPerSecond,\n        bool _withUpdate\n    ) public onlyOwner whenNotPaused {\n        // Ensure there already exists this pool\n        require(\n            poolList[_poolId].lastRewardTimestamp != 0,\n            \"FARMING_POOL: POOL_NOT_EXIST\"\n        );\n\n        if (_withUpdate) massUpdatePools();\n        else updatePool(_poolId);\n\n        // Not farming now + reward > 0 => Restart\n        if (isFarming[_poolId] == false && _basicFurionPerSecond > 0) {\n            isFarming[_poolId] = true;\n            emit FarmingPoolStarted(_poolId, block.timestamp);\n        }\n\n        if (_basicFurionPerSecond == 0) {\n            isFarming[_poolId] = false;\n            poolList[_poolId].basicFurionPerSecond = 0;\n            emit FarmingPoolStopped(_poolId, block.timestamp);\n        } else {\n            poolList[_poolId].basicFurionPerSecond = _basicFurionPerSecond;\n            emit FurionRewardChanged(_poolId, _basicFurionPerSecond);\n        }\n    }\n\n    /**\n     * @notice Update the FurionPerSecond for a bundle of pools (used for daily updating farming rate)\n     * @param _poolId Id collection of the farming pool\n     * @param _basicFurionPerSecond New basic reward amount per second\n     */\n    function setFurionRewards(\n        uint256[] calldata _poolId,\n        uint256[] calldata _basicFurionPerSecond\n    ) public onlyOwner whenNotPaused {\n        uint256 length = _poolId.length;\n        require(length <= 9, \"FARMING_POOL: MORE_THAN_NINE\");\n\n        for (uint256 i = 0; i < length; ) {\n            setFurionReward(_poolId[i], _basicFurionPerSecond[i], false);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Stake LP token into the farming pool\n     * @dev Can only stake to the pools that are still farming\n     * @param _poolId Id of the farming pool\n     * @param _amount Staking amount\n     */\n    function stake(uint256 _poolId, uint256 _amount)\n        public\n        nonReentrant\n        whenNotPaused\n        stillFarming(_poolId)\n    {\n        require(_amount > 0, \"FARMING_POOL: STAKE_ZERO\");\n\n        PoolInfo storage pool = poolList[_poolId];\n        UserInfo storage user = userInfo[_poolId][msg.sender];\n\n        // Must update first\n        updatePool(_poolId);\n\n        // First distribute the reward if exists\n        if (user.stakingBalance > 0) {\n            uint256 pending = (user.stakingBalance * pool.accFurionPerShare) /\n                SCALE -\n                user.rewardDebt;\n\n            // Real reward amount\n            uint256 reward = _safeFurionTransfer(msg.sender, pending);\n            emit Harvest(msg.sender, msg.sender, _poolId, reward);\n        }\n\n        // Actual deposit amount\n        uint256 actualAmount = _safeLPTransfer(\n            false,\n            pool.lpToken,\n            msg.sender,\n            _amount\n        );\n\n        user.stakingBalance += actualAmount;\n\n        user.rewardDebt =\n            (user.stakingBalance * pool.accFurionPerShare) /\n            SCALE;\n\n        emit Stake(msg.sender, _poolId, actualAmount);\n    }\n\n    /**\n     * @notice Withdraw lptoken from the pool\n     * @param _poolId Id of the farming pool\n     * @param _amount Amount of lp tokens to withdraw\n     */\n    function withdraw(uint256 _poolId, uint256 _amount)\n        public\n        nonReentrant\n        whenNotPaused\n    {\n        require(_amount > 0, \"FARMING_POOL: WITHDRAW_ZERO\");\n\n        PoolInfo storage pool = poolList[_poolId];\n        UserInfo storage user = userInfo[_poolId][msg.sender];\n\n        require(\n            user.stakingBalance >= _amount,\n            \"FARMING_POOL: NO_ENOUGH_STAKING_BALANCE\"\n        );\n\n        // Update if the pool is still farming\n        // Users can withdraw even after the pool stopped\n        if (isFarming[_poolId]) updatePool(_poolId);\n\n        uint256 pending = (user.stakingBalance * pool.accFurionPerShare) /\n            SCALE -\n            user.rewardDebt;\n\n        uint256 reward = _safeFurionTransfer(msg.sender, pending);\n        emit Harvest(msg.sender, msg.sender, _poolId, reward);\n\n        uint256 actualAmount = _safeLPTransfer(\n            true,\n            pool.lpToken,\n            msg.sender,\n            _amount\n        );\n\n        user.stakingBalance -= actualAmount;\n\n        user.rewardDebt =\n            (user.stakingBalance * pool.accFurionPerShare) /\n            SCALE;\n\n        emit Withdraw(msg.sender, _poolId, actualAmount);\n    }\n\n    /**\n     * @notice Harvest the Furion reward and can be sent to another address\n     * @param _poolId Id of the farming pool\n     * @param _to Receiver of Furion rewards\n     */\n    function harvest(uint256 _poolId, address _to)\n        public\n        nonReentrant\n        whenNotPaused\n    {\n        // Only update the pool when it is still in farming\n        if (isFarming[_poolId]) updatePool(_poolId);\n\n        PoolInfo memory pool = poolList[_poolId];\n        UserInfo storage user = userInfo[_poolId][msg.sender];\n\n        uint256 pendingReward = (user.stakingBalance * pool.accFurionPerShare) /\n            SCALE -\n            user.rewardDebt;\n\n        require(pendingReward > 0, \"FARMING_POOL: NO_PENDING_REWARD\");\n\n        // Update the reward debt\n        user.rewardDebt =\n            (user.stakingBalance * pool.accFurionPerShare) /\n            SCALE;\n\n        // Transfer the reward\n        uint256 reward = _safeFurionTransfer(_to, pendingReward);\n\n        emit Harvest(msg.sender, _to, _poolId, reward);\n    }\n\n    /**\n     * @notice Update the pool's reward status\n     * @param _poolId Id of the farming pool\n     */\n    function updatePool(uint256 _poolId) public {\n        PoolInfo storage pool = poolList[_poolId];\n        if (block.timestamp <= pool.lastRewardTimestamp) {\n            return;\n        }\n\n        uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));\n\n        // No LP deposited, then just update the lastRewardTimestamp\n        if (lpSupply == 0) {\n            pool.lastRewardTimestamp = block.timestamp;\n            return;\n        }\n\n        uint256 timePassed = block.timestamp - pool.lastRewardTimestamp;\n\n        uint256 basicReward = timePassed * pool.basicFurionPerSecond;\n\n        pool.accFurionPerShare += (basicReward * SCALE) / lpSupply;\n\n        // Don't forget to set the farming pool as minter\n        furion.mintFurion(address(this), basicReward);\n\n        pool.lastRewardTimestamp = block.timestamp;\n\n        emit PoolUpdated(_poolId, pool.accFurionPerShare);\n    }\n\n    /**\n     * @notice Update all farming pools (except for those stopped ones)\n     * @dev Can be called by anyone\n     *      Only update those active pools\n     */\n    function massUpdatePools() public {\n        uint256 length = poolList.length;\n        for (uint256 poolId; poolId < length; poolId++) {\n            if (isFarming[poolId] == false) continue;\n            else updatePool(poolId);\n        }\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** View Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Check the amount of pending Furion reward\n     * @param _poolId PoolId of this farming pool\n     * @param _user User address\n     * @return pendingFurionAmount Amount of pending Furion\n     */\n    function pendingFurion(uint256 _poolId, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        PoolInfo memory poolInfo = poolList[_poolId];\n\n        if (\n            poolInfo.lastRewardTimestamp == 0 ||\n            block.timestamp < poolInfo.lastRewardTimestamp ||\n            block.timestamp < startTimestamp\n        ) return 0;\n\n        UserInfo memory user = userInfo[_poolId][_user];\n\n        // Total lp token balance\n        uint256 lpBalance = IERC20(poolInfo.lpToken).balanceOf(address(this));\n\n        // Accumulated shares to be calculated\n        uint256 accFurionPerShare = poolInfo.accFurionPerShare;\n\n        if (lpBalance == 0) return 0;\n        else {\n            // If the pool is still farming, update the info\n            if (isFarming[_poolId]) {\n                // Deigs amount given to this pool\n                uint256 timePassed = block.timestamp -\n                    poolInfo.lastRewardTimestamp;\n                uint256 basicReward = poolInfo.basicFurionPerSecond *\n                    timePassed;\n                // Update accFurionPerShare\n                // LPToken may have different decimals\n                accFurionPerShare += (basicReward * SCALE) / lpBalance;\n            }\n\n            // If the pool has stopped, not update the info\n            uint256 pending = (user.stakingBalance * accFurionPerShare) /\n                SCALE -\n                user.rewardDebt;\n\n            return pending;\n        }\n    }\n\n    /**\n     * @notice Get the total pool list\n     * @return pooList Total pool list\n     */\n    function getPoolList() external view returns (PoolInfo[] memory) {\n        return poolList;\n    }\n\n    /**\n     * @notice Get a user's balance\n     * @param _poolId Id of the pool\n     * @param _user User address\n     * @return balance User's balance (lpToken)\n     */\n    function getUserBalance(uint256 _poolId, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        return userInfo[_poolId][_user].stakingBalance;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Set Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @notice Set the start block timestamp\n     * @param _startTimestamp New start block timestamp\n     */\n    function setStartTimestamp(uint256 _startTimestamp)\n        external\n        onlyOwner\n        whenNotPaused\n    {\n        // Can only be set before any pool is added\n        require(_nextPoolId == 1, \"ALREADY_HAVING_POOLS\");\n\n        startTimestamp = _startTimestamp;\n        emit StartTimestampChanged(_startTimestamp);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ********************************** Internal Functions ********************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Check if a lptoken has been added into the pool before\n     * @dev This can also be written as a modifier\n     * @param _lpToken LP token address\n     * @return _isInPool Wether this lp is already in pool\n     */\n    function _alreadyInPool(address _lpToken)\n        internal\n        view\n        returns (bool _isInPool)\n    {\n        uint256 poolId = poolMapping[_lpToken];\n\n        _isInPool = (poolId != 0) ? true : false;\n    }\n\n    /**\n     * @notice Safe Furion transfer (check if the pool has enough Furion token, if not, transfer balance)\n     * @param _to User's address\n     * @param _amount Amount to transfer\n     */\n    function _safeFurionTransfer(address _to, uint256 _amount)\n        internal\n        returns (uint256)\n    {\n        uint256 poolFurionBalance = furion.balanceOf(address(this));\n        require(poolFurionBalance > 0, \"FARMING_POOL: NO_FUR_IN_POOL\");\n\n        if (_amount > poolFurionBalance) {\n            furion.safeTransfer(_to, poolFurionBalance);\n            return (poolFurionBalance);\n        } else {\n            furion.safeTransfer(_to, _amount);\n            return _amount;\n        }\n    }\n\n    /**\n     * @notice Finish the transfer of LP Token\n     * @dev The lp token may have loss during transfer\n     * @param _out Whether the lp token is out\n     * @param _lpToken LP token address\n     * @param _user User address\n     * @param _amount Amount of lp tokens\n     */\n    function _safeLPTransfer(\n        bool _out,\n        address _lpToken,\n        address _user,\n        uint256 _amount\n    ) internal returns (uint256) {\n        uint256 poolBalanceBefore = IERC20(_lpToken).balanceOf(address(this));\n\n        if (_out) IERC20(_lpToken).safeTransfer(_user, _amount);\n        else IERC20(_lpToken).safeTransferFrom(_user, address(this), _amount);\n\n        uint256 poolBalanceAfter = IERC20(_lpToken).balanceOf(address(this));\n\n        return\n            _out\n                ? poolBalanceBefore - poolBalanceAfter\n                : poolBalanceAfter - poolBalanceBefore;\n    }\n}\n"
    },
    "contracts/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nlibrary Math {\n    uint256 internal constant WAD = 10**18;\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n\n    //rounds to zero if x*y < WAD / 2\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\n        return ((x * y) + (WAD / 2)) / WAD;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/furion-swap/FurionSwapPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {Math} from \"../libraries/Math.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ReentrancyGuard} from \"../utils/ReentrancyGuard.sol\";\nimport {IFurionSwapFactory} from \"./interfaces/IFurionSwapFactory.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title  FurionSwap Pair\n * @notice This is the contract for the FurionSwap swapping pair.\n *         Every time a new pair of tokens is available on FurionSwap\n *         The contract will be initialized with two tokens and a deadline.\n *         The swaps are only availale before the deadline.\n */\n\ncontract FurionSwapPair is\n    ERC20(\"Furion Swap Pool LP\", \"FSL\"),\n    ReentrancyGuard\n{\n    using SafeERC20 for IERC20;\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Variables **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    // Minimum liquidity locked\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\n\n    // FurionSwapFactory contract address\n    address public factory;\n\n    // Token addresses in the pool, here token0 < token1\n    address public token0;\n    address public token1;\n\n    uint256 private reserve0;\n    uint256 private reserve1;\n\n    // Fee Rate, given to LP holders (0 ~ 1000)\n    uint256 public feeRate = 3;\n\n    // reserve0 * reserve1\n    uint256 public kLast;\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    event ReserveUpdated(uint256 reserve0, uint256 reserve1);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n\n    constructor() {\n        factory = msg.sender; // deployed by factory contract\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Init Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Initialize the contract status after the deployment by factory\n     * @param _tokenA TokenA address\n     * @param _tokenB TokenB address\n     */\n    function initialize(address _tokenA, address _tokenB) external {\n        require(\n            msg.sender == factory,\n            \"can only be initialized by the factory contract\"\n        );\n        (token0, token1) = _tokenA < _tokenB\n            ? (_tokenA, _tokenB)\n            : (_tokenB, _tokenA);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ View Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Get reserve0 and reserve1\n     * @dev The result will depend on token orders\n     * @return _reserve0 Reserve of token0\n     * @return _reserve1 Reserve of token1\n     */\n    function getReserves()\n        public\n        view\n        returns (uint256 _reserve0, uint256 _reserve1)\n    {\n        (_reserve0, _reserve1) = (reserve0, reserve1);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Main Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Mint LP Token to liquidity providers\n     *         Called when adding liquidity.\n     * @param _to The user address\n     * @return liquidity The LP token amount\n     */\n    function mint(address _to)\n        external\n        nonReentrant\n        returns (uint256 liquidity)\n    {\n        (uint256 _reserve0, uint256 _reserve1) = getReserves(); // gas savings\n\n        uint256 balance0 = IERC20(token0).balanceOf(address(this)); // token0 balance after deposit\n        uint256 balance1 = IERC20(token1).balanceOf(address(this)); // token1 balance after deposit\n\n        uint256 amount0 = balance0 - _reserve0; // just deposit\n        uint256 amount1 = balance1 - _reserve1;\n\n        // Distribute part of the fee to income maker\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n\n        uint256 _totalSupply = totalSupply(); // gas savings\n\n        if (_totalSupply == 0) {\n            // No liquidity = First add liquidity\n            liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\n            // Keep minimum liquidity to this contract\n            _mint(factory, MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n        } else {\n            liquidity = min(\n                (amount0 * _totalSupply) / _reserve0,\n                (amount1 * _totalSupply) / _reserve1\n            );\n        }\n\n        require(liquidity > 0, \"insufficient liquidity minted\");\n        _mint(_to, liquidity);\n\n        _update(balance0, balance1);\n\n        if (feeOn) kLast = reserve0 * reserve1;\n\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n    /**\n     * @notice Burn LP tokens give back the original tokens\n     * @param _to User address\n     * @return amount0 Amount of token0 to be sent back\n     * @return amount1 Amount of token1 to be sent back\n     */\n    function burn(address _to)\n        external\n        nonReentrant\n        returns (uint256 amount0, uint256 amount1)\n    {\n        address _token0 = token0;\n        address _token1 = token1;\n\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\n\n        uint256 liquidity = balanceOf(address(this));\n\n        bool feeOn = _mintFee(reserve0, reserve1);\n\n        uint256 _totalSupply = totalSupply(); // gas savings\n\n        // How many tokens to be sent back\n        amount0 = (liquidity * balance0) / _totalSupply;\n        amount1 = (liquidity * balance1) / _totalSupply;\n\n        require(amount0 > 0 && amount1 > 0, \"Insufficient liquidity burned\");\n\n        // Currently all the liquidity in the pool was just sent by the user, so burn all\n        _burn(address(this), liquidity);\n\n        // Transfer tokens out and update the balance\n        IERC20(_token0).safeTransfer(_to, amount0);\n        IERC20(_token1).safeTransfer(_to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1);\n\n        if (feeOn) kLast = reserve0 * reserve1;\n\n        emit Burn(msg.sender, amount0, amount1, _to);\n    }\n\n    /**\n     * @notice Finish the swap process\n     * @param _amount0Out Amount of token0 to be given out (may be 0)\n     * @param _amount1Out Amount of token1 to be given out (may be 0)\n     * @param _to Address to receive the swap result\n     */\n    function swap(\n        uint256 _amount0Out,\n        uint256 _amount1Out,\n        address _to\n    ) external nonReentrant {\n        require(\n            _amount0Out > 0 || _amount1Out > 0,\n            \"Output amount need to be positive\"\n        );\n\n        (uint256 _reserve0, uint256 _reserve1) = getReserves(); // gas savings\n        require(\n            _amount0Out < _reserve0 && _amount1Out < _reserve1,\n            \"Not enough liquidity\"\n        );\n\n        uint256 balance0;\n        uint256 balance1;\n        {\n            // scope for _token{0,1}, avoids stack too deep errors\n            address _token0 = token0;\n            address _token1 = token1;\n            require(_to != _token0 && _to != _token1, \"INVALID_TO\");\n\n            if (_amount0Out > 0) IERC20(_token0).safeTransfer(_to, _amount0Out);\n            if (_amount1Out > 0) IERC20(_token1).safeTransfer(_to, _amount1Out);\n\n            balance0 = IERC20(_token0).balanceOf(address(this));\n            balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint256 amount0In = balance0 > _reserve0 - _amount0Out\n            ? balance0 - (_reserve0 - _amount0Out)\n            : 0;\n        uint256 amount1In = balance1 > _reserve1 - _amount1Out\n            ? balance1 - (_reserve1 - _amount1Out)\n            : 0;\n\n        require(amount0In > 0 || amount1In > 0, \"INSUFFICIENT_INPUT_AMOUNT\");\n\n        {\n            uint256 balance0Adjusted = balance0 * 1000 - amount0In * feeRate;\n            uint256 balance1Adjusted = balance1 * 1000 - amount1In * feeRate;\n\n            require(\n                balance0Adjusted * balance1Adjusted >=\n                    _reserve0 * _reserve1 * (1000**2),\n                \"The remaining x*y is less than K\"\n            );\n        }\n\n        _update(balance0, balance1);\n\n        emit Swap(\n            msg.sender,\n            amount0In,\n            amount1In,\n            _amount0Out,\n            _amount1Out,\n            _to\n        );\n    }\n\n    /**\n     * @notice Syncrinize the status of this pool\n     */\n    function sync() external nonReentrant {\n        _update(\n            IERC20(token0).balanceOf(address(this)),\n            IERC20(token1).balanceOf(address(this))\n        );\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ********************************** Internal Functions ********************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Update the reserves of the pool\n     * @param balance0 Balance of token0\n     * @param balance1 Balance of token1\n     */\n    function _update(uint256 balance0, uint256 balance1) private {\n        uint256 MAX_NUM = type(uint256).max;\n        require(balance0 <= MAX_NUM && balance1 <= MAX_NUM, \"uint OVERFLOW\");\n\n        reserve0 = uint256(balance0);\n        reserve1 = uint256(balance1);\n\n        emit ReserveUpdated(reserve0, reserve1);\n    }\n\n    /**\n     * @notice Collect the income sharing from trading pair\n     * @param _reserve0 Reserve of token0\n     * @param _reserve1 Reserve of token1\n     */\n    function _mintFee(uint256 _reserve0, uint256 _reserve1)\n        private\n        returns (bool feeOn)\n    {\n        address incomeMaker = IFurionSwapFactory(factory).incomeMaker();\n\n        // If incomeMaker is not zero address, fee is on\n        feeOn = incomeMaker != address(0);\n\n        uint256 _k = kLast;\n\n        if (feeOn) {\n            if (_k != 0) {\n                uint256 rootK = Math.sqrt(_reserve0 * _reserve1);\n                uint256 rootKLast = Math.sqrt(_k);\n\n                if (rootK > rootKLast) {\n                    uint256 numerator = totalSupply() *\n                        (rootK - rootKLast) *\n                        10;\n\n                    // (1 / φ) - 1\n                    // Proportion got from factory is based on 100\n                    // Use 1000/proportion to make it divided (donominator and numerator both * 10)\n                    // p = 40 (2/5) => 1000/40 = 25\n                    uint256 incomeMakerProportion = IFurionSwapFactory(factory)\n                        .incomeMakerProportion();\n                    uint256 denominator = rootK *\n                        (1000 / incomeMakerProportion - 100) +\n                        rootKLast *\n                        100;\n\n                    uint256 liquidity = numerator / denominator;\n\n                    // Mint the liquidity to income maker contract\n                    if (liquidity > 0) _mint(incomeMaker, liquidity);\n                }\n            }\n        } else if (_k != 0) {\n            kLast = 0;\n        }\n    }\n\n    /**\n     * @notice Get the smaller one of two numbers\n     * @param x The first number\n     * @param y The second number\n     * @return z The smaller one\n     */\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x < y ? x : y;\n    }\n}\n"
    },
    "contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.10;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/furion-swap/interfaces/IFurionSwapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface IFurionSwapFactory {\n    function getPair(address _token0, address _token1)\n        external\n        view\n        returns (address);\n\n    function isFurionPairs(address _token0, address _token1)\n        external\n        view\n        returns (bool);\n\n    function createPair(address _token0, address _token1)\n        external\n        returns (address _pair);\n\n    function allPairs(uint256) external view returns (address _pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function incomeMaker() external view returns (address);\n\n    function incomeMakerProportion() external view returns (uint256);\n}\n"
    },
    "contracts/income-sharing/IncomeMaker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../furion-swap/interfaces/IFurionSwapFactory.sol\";\nimport \"../furion-swap/interfaces/IFurionSwapPair.sol\";\nimport \"../furion-swap/interfaces/IFurionSwapV2Router.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title Furion Income Maker Contract\n * @dev This contract will receive the transaction fee from swap pool\n *      All tx fees will be converted into FUR firstly, then transfer to income maker vault\n */\ncontract IncomeMaker is OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constants **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    uint256 public constant uint_MAX = type(uint256).max;\n    uint256 public constant PRICE_SCALE = 1e6;\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Variables **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    IFurionSwapV2Router public router;\n\n    IFurionSwapFactory public factory;\n\n    address public incomeSharingVault;\n\n    // all income would be converted to one uniform token, default by FUR\n    address public incomeToken;\n\n    // proportion allocated to income sharing vault, 0-100, 80 by default\n    uint256 public incomeProportion;\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n    event IncomeTokenChanged(address oldToken, address newToken);\n    event IncomeProportionChanged(uint256 oldProportion, uint256 newProportion);\n\n    event IncomeToToken(\n        address otherTokenAddress,\n        address incomeTokenAddress,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    event EmergencyWithdraw(address token, uint256 amount);\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constructor ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Initialize function\n     * @param _incomeToken Address of income token, default by FUR\n     * @param _router Address of the FurionSwap router\n     * @param _factory Address of the FurionSwap factory\n     * @param _vault Address of the income sharing vault\n     */\n    function initialize(\n        address _incomeToken,\n        address _router,\n        address _factory,\n        address _vault\n    ) public initializer {\n        __Ownable_init();\n\n        incomeToken = _incomeToken;\n        router = IFurionSwapV2Router(_router);\n        factory = IFurionSwapFactory(_factory);\n\n        incomeSharingVault = _vault;\n\n        incomeProportion = 80; // default by 80\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Main Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Collect income from furion swap, turn token into incomeToken, and transfer to the incomeSharingVault\n     * @param _tokenA Address of tokenA for trading pair\n     * @param _tokenB Address of tokenB for trading pair\n     * @return amountIncome Amount of income collected\n     */\n    function collectIncomeFromSwap(address _tokenA, address _tokenB)\n        external\n        returns (uint256 amountIncome)\n    {\n        // Get the pair\n        IFurionSwapPair pair = IFurionSwapPair(\n            factory.getPair(_tokenA, _tokenB)\n        );\n        require(address(pair) != address(0), \"INCOME_MAKER: PAIR_NOT_EXIST\");\n\n        (address token0, address token1) = _tokenA < _tokenB\n            ? (_tokenA, _tokenB)\n            : (_tokenB, _tokenA);\n\n        // Transfer lp token to the pool and get two tokens\n        IERC20(address(pair)).safeTransfer(\n            address(pair),\n            pair.balanceOf(address(this))\n        );\n\n        // Directly call the pair to burn lp tokens\n        (uint256 amount0, uint256 amount1) = pair.burn(address(this));\n\n        uint256 amountIncome0 = _convertIncome(token0, amount0);\n        uint256 amountIncome1 = _convertIncome(token1, amount1);\n\n        amountIncome = amountIncome0 + amountIncome1;\n\n        // Transfer all incomeTokens to income sharing vault\n        IERC20(incomeToken).safeTransfer(\n            incomeSharingVault,\n            (IERC20(incomeToken).balanceOf(address(this)) * incomeProportion) /\n                100\n        );\n    }\n\n    /**\n     * @notice Emergency withdraw by the owner\n     * @param _token Address of the token\n     * @param _amount Amount of the token\n     */\n    function emergencyWithdraw(address _token, uint256 _amount)\n        external\n        onlyOwner\n    {\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n        emit EmergencyWithdraw(_token, _amount);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Set Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    function setIncomeToken(address _newIncomeToken) external onlyOwner {\n        require(_newIncomeToken != address(0), \"INCOME_MAKER: ZERO_ADDRESS\");\n        emit IncomeTokenChanged(incomeToken, _newIncomeToken);\n\n        incomeToken = _newIncomeToken;\n    }\n\n    function setIncomeProportion(uint8 _newIncomeProportion)\n        external\n        onlyOwner\n    {\n        require(\n            _newIncomeProportion <= 100,\n            \"INCOME_MAKER: EXCEED_PROPORTION_RANGE\"\n        );\n        emit IncomeProportionChanged(incomeProportion, _newIncomeProportion);\n\n        incomeProportion = _newIncomeProportion;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Internal Functions ********************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Convert the income to incomeToken and transfer to the incomeSharingVault\n     * @param _otherToken Address of the other token\n     */\n    function _convertIncome(address _otherToken, uint256 _amountToken)\n        internal\n        returns (uint256 amountIncome)\n    {\n        if (_otherToken != incomeToken) {\n            // Get the pair\n            IFurionSwapPair pair = IFurionSwapPair(\n                factory.getPair(_otherToken, incomeToken)\n            );\n            require(\n                address(pair) != address(0),\n                \"INCOME_MAKER: PAIR_NOT_EXIST\"\n            );\n\n            amountIncome = _swap(_otherToken, _amountToken, address(this));\n\n            emit IncomeToToken(\n                _otherToken,\n                incomeToken,\n                _amountToken,\n                amountIncome\n            );\n        }\n    }\n\n    /**\n     * @notice Swap other tokens to incomeToken\n     * @param _otherToken Address of other token\n     * @param _amount Amount of other token\n     * @param _to Address of the receiver\n     */\n    function _swap(\n        address _otherToken,\n        uint256 _amount,\n        address _to\n    ) internal returns (uint256 amountOut) {\n        // Get the pair\n        IFurionSwapPair pair = IFurionSwapPair(\n            factory.getPair(_otherToken, incomeToken)\n        );\n        require(address(pair) != address(0), \"INCOME_MAKER: PAIR_NOT_EXIST\");\n\n        (uint256 reserve0, uint256 reserve1) = pair.getReserves();\n\n        (uint256 reserveIn, uint256 reserveOut) = _otherToken < incomeToken\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n\n        uint256 feeRate = pair.feeRate();\n\n        // Calculate amountIn - fee\n        uint256 amountInWithFee = _amount * (1000 - feeRate);\n\n        // Calculate amountOut\n        amountOut =\n            (amountInWithFee * reserveOut) /\n            (reserveIn * 1000 + amountInWithFee);\n\n        // Transfer other token and swap\n        IERC20(_otherToken).safeTransfer(address(pair), _amount);\n\n        (uint256 amount0Out, uint256 amount1Out) = _otherToken < incomeToken\n            ? (uint256(0), amountOut)\n            : (amountOut, uint256(0));\n        pair.swap(amount0Out, amount1Out, _to);\n    }\n}\n"
    },
    "contracts/furion-swap/interfaces/IFurionSwapPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IFurionSwapPair is IERC20 {\n    function initialize(address _token0, address _token1) external;\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function feeRate() external view returns (uint256);\n\n    function deadline() external view returns (uint256);\n\n    function getReserves()\n        external\n        view\n        returns (uint112 _reserve0, uint112 _reserve1);\n\n    function swap(\n        uint256,\n        uint256,\n        address\n    ) external;\n\n    function burn(address) external returns (uint256, uint256);\n\n    function mint(address) external returns (uint256);\n\n    function sync() external;\n}\n"
    },
    "contracts/furion-swap/interfaces/IFurionSwapV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface IFurionSwapV2Router {\n    function factory() external view returns (address);\n\n    function WETH() external view returns (address);\n\n    function addLiquidity(\n        address _tokenA,\n        address _tokenB,\n        uint256 _amountADesired,\n        uint256 _amountBDesired,\n        uint256 _amountAMin,\n        uint256 _amountBMin,\n        address _to,\n        uint256 _deadline\n    )\n        external\n        returns (\n            uint256 _amountA,\n            uint256 _amountB,\n            uint256 _liquidity\n        );\n\n    function addLiquidityETH(\n        address _token,\n        uint256 _amountTokenDesired,\n        uint256 _amountTokenMin,\n        uint256 _amountETHMin,\n        address _to,\n        uint256 _deadline\n    )\n        external\n        payable\n        returns (\n            uint256 _amountToken,\n            uint256 _amountETH,\n            uint256 _liquidity\n        );\n\n    function removeLiquidity(\n        address _tokenA,\n        address _tokenB,\n        uint256 _liquidity,\n        uint256 _amountAMin,\n        uint256 _amountBMin,\n        address _to,\n        uint256 _deadline\n    ) external returns (uint256 _amountA, uint256 _amountB);\n\n    function removeLiquidityETH(\n        address _token,\n        uint256 _liquidity,\n        uint256 _amountTokenMin,\n        uint256 _amountETHMin,\n        address _to,\n        uint256 _deadline\n    ) external returns (uint256 _amountToken, uint256 _amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 _amountIn,\n        uint256 _amountOutMin,\n        address[] calldata _path,\n        address _to,\n        uint256 _deadline\n    ) external returns (uint256[] memory _amounts);\n\n    function swapTokensForExactTokens(\n        uint256 _amountOut,\n        uint256 _amountInMax,\n        address[] calldata _path,\n        address _to,\n        uint256 _deadline\n    ) external returns (uint256[] memory _amounts);\n\n    function swapExactETHForTokens(\n        uint256 _amountOutMin,\n        address[] calldata _path,\n        address _to,\n        uint256 _deadline\n    ) external payable returns (uint256[] memory _amounts);\n\n    function swapTokensForExactETH(\n        uint256 _amountOut,\n        uint256 _amountInMax,\n        address[] calldata _path,\n        address _to,\n        uint256 _deadline\n    ) external returns (uint256[] memory _amounts);\n\n    function swapExactTokensForETH(\n        uint256 _amountIn,\n        uint256 _amountOutMin,\n        address[] calldata _path,\n        address _to,\n        uint256 _deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 _amountOut,\n        address[] calldata _path,\n        address _to,\n        uint256 _deadline\n    ) external payable returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/furion-staking/VoteEscrowedFurion.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {VeERC20Upgradeable} from \"./VeERC20Upgradeable.sol\";\nimport {Math} from \"../libraries/Math.sol\";\n\nimport {IFarmingPool} from \"../furion-farming/interfaces/IFarmingPool.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title Vote Escrowed Furion\n * @notice The staking contract for FUR -> veFUR\n *         veFUR:\n *            - Governance\n *            - Income sharing\n *            - etc.\n *         If you stake Furion, you generate veFUR at the current `generationRate` until you reach `maxCap`\n *         If you unstake any amount of Furion, you will lose all of your veFUR tokens\n *\n *         There is also an option that you lock your FUR for the max time\n *         and get the maximum veFUR balance immediately.\n *         !! Attention !!\n *         If you stake FUR for the max time for more than once, the lockUntil timestamp will\n *         be updated to the latest one.\n */\n\ncontract VoteEscrowedFurion is\n    Initializable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable,\n    VeERC20Upgradeable\n{\n    using SafeERC20 for IERC20;\n\n    struct UserInfo {\n        // Furion staked by user\n        uint256 amount;\n        // time of last veFUR claim or first deposit if user has not claimed yet\n        uint256 lastRelease;\n        // Amount locked for max time\n        uint256 amountLocked;\n        // Lock until timestamp\n        uint256 lockUntil;\n    }\n\n    // User info\n    mapping(address => UserInfo) public users;\n\n    // Furion token\n    IERC20 public furion;\n\n    // Max veFUR for one single staked FUR\n    // Max veFUR amount = maxCap * FUR staked\n    uint256 public maxCapRatio;\n\n    // Rate of veFUR generated per second, per Furion staked\n    uint256 public generationRate;\n\n    // Calculation scale\n    uint256 public constant SCALE = 1e18;\n\n    // contract address => whether able to receive staked veFUR\n    // Contract addresses are by default unable to stake Furion, they must be whitelisted\n    mapping(address => bool) public whitelist;\n\n    // account => lock amount, lock amount for specific account\n    mapping(address => uint256) public locked;\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n    event GenerationRateChanged(uint256 oldRate, uint256 newRate);\n    event MaxCapRatioChanged(uint256 oldMaxCapRatio, uint256 newMaxCapRatio);\n    event WhiteListAdded(address newWhiteList);\n    event WhiteListRemoVEF(address oldWhiteList);\n\n    event Deposit(address indexed user, uint256 amount);\n    event DepositMaxTime(\n        address indexed user,\n        uint256 amount,\n        uint256 lockUntil\n    );\n    event Withdraw(address indexed user, uint256 amount);\n\n    event Claimed(address indexed user, uint256 amount);\n\n    event BurnVeFUR(\n        address indexed caller,\n        address indexed user,\n        uint256 amount\n    );\n\n    event LockVeFUR(\n        address indexed caller,\n        address indexed user,\n        uint256 amount\n    );\n\n    event UnlockVeFUR(\n        address indexed caller,\n        address indexed user,\n        uint256 amount\n    );\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Errors ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    error VEF__NotWhiteListed();\n    error VEF__StillLocked();\n    error VEF__ZeroAddress();\n    error VEF__ZeroAmount();\n    error VEF__NotEnoughBalance();\n\n    error VEF__TimeNotPassed();\n    error VEF__OverLocked();\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constructor ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    function initialize(address _furion) public initializer {\n        if (_furion == address(0)) revert VEF__ZeroAddress();\n\n        // Initialize veFUR\n        __ERC20_init(\"Vote Escrowed Furion\", \"veFUR\");\n        __Ownable_init();\n        __ReentrancyGuard_init_unchained();\n        __Pausable_init_unchained();\n\n        // Set generationRate (veFUR per sec per Furion staked)\n        generationRate = 10**18;\n\n        // Set maxCap ratio\n        maxCapRatio = 100;\n\n        // Set Furion token\n        furion = IERC20(_furion);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************** Modifiers *************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Not callable by smart contract\n     * @dev Checked first by msg.sender == tx.origin\n     *      Then if the contract is whitelisted, it will still pass the check\n     */\n    modifier notContract(address _addr) {\n        if (_addr != tx.origin) {\n            if (!whitelist[_addr]) revert VEF__NotWhiteListed();\n        }\n        _;\n    }\n\n    /**\n     * @notice No locked veFUR\n     * @dev Check the locked balance of a user\n     */\n    modifier noLocked(address _user) {\n        if (locked[_user] > 0) revert VEF__StillLocked();\n        _;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Main Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Depisit Furion for veFUR\n     * @dev Only EOA or whitelisted contract address\n     * @param _amount Amount to deposit\n     */\n    function deposit(uint256 _amount)\n        external\n        nonReentrant\n        whenNotPaused\n        notContract(msg.sender)\n    {\n        if (_amount == 0) revert VEF__ZeroAmount();\n\n        if (users[msg.sender].amount > 0) {\n            // If the user has amount deposited, claim veFUR\n            _claim(msg.sender);\n\n            // Update the amount\n            users[msg.sender].amount += _amount;\n        } else {\n            // add new user to mapping\n            users[msg.sender].lastRelease = block.timestamp;\n            users[msg.sender].amount = _amount;\n        }\n\n        // Request Furion from user\n        furion.safeTransferFrom(msg.sender, address(this), _amount);\n\n        emit Deposit(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Deposit for the max time\n     * @dev Release the max amount one time\n     */\n    function depositMaxTime(uint256 _amount)\n        external\n        nonReentrant\n        whenNotPaused\n    {\n        if (_amount == 0) revert VEF__ZeroAmount();\n\n        uint256 currentMaxTime = (maxCapRatio * SCALE) / generationRate;\n        uint256 lockUntil = block.timestamp + currentMaxTime * 2;\n\n        users[msg.sender].amountLocked += _amount;\n        users[msg.sender].lockUntil = lockUntil;\n\n        // Request Furion from user\n        furion.safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 realCapRatio = _getCapRatio(msg.sender);\n\n        _mint(msg.sender, realCapRatio * _amount);\n\n        emit DepositMaxTime(msg.sender, _amount, lockUntil);\n    }\n\n    /**\n     * @notice Claims accumulated veFUR for flex deposit\n     */\n    function claim() public nonReentrant whenNotPaused {\n        if (users[msg.sender].amount == 0) revert VEF__ZeroAmount();\n\n        _claim(msg.sender);\n    }\n\n    /**\n     * @notice Withdraw Furion token\n     * @dev User will lose all veFUR once he withdrawed\n     * @param _amount Amount to withdraw\n     */\n    function withdraw(uint256 _amount)\n        external\n        nonReentrant\n        whenNotPaused\n        noLocked(msg.sender)\n    {\n        if (_amount == 0) revert VEF__ZeroAmount();\n\n        UserInfo storage user = users[msg.sender];\n        if (user.amount < _amount) revert VEF__NotEnoughBalance();\n\n        // reset last Release timestamp\n        user.lastRelease = block.timestamp;\n\n        // update his balance before burning or sending back Furion\n        user.amount -= _amount;\n\n        // get user veFUR balance that must be burned\n        // those locked amount will not be calculated\n\n        uint256 realCapRatio = _getCapRatio(msg.sender);\n\n        uint256 userVeFURBalance = balanceOf(msg.sender) -\n            user.amountLocked *\n            realCapRatio;\n\n        _burn(msg.sender, userVeFURBalance);\n\n        // send back the staked Furion\n        furion.safeTransfer(msg.sender, _amount);\n\n        emit Withdraw(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Withdraw all the locked veFUR\n     */\n    function withdrawLocked()\n        external\n        nonReentrant\n        whenNotPaused\n        noLocked(msg.sender)\n    {\n        UserInfo memory user = users[msg.sender];\n\n        if (user.amountLocked == 0) revert VEF__ZeroAmount();\n        if (block.timestamp < user.lockUntil) revert VEF__TimeNotPassed();\n\n        uint256 realCapRatio = _getCapRatio(msg.sender);\n\n        _burn(msg.sender, user.amountLocked * realCapRatio);\n\n        // update his balance before burning or sending back Furion\n        users[msg.sender].amountLocked = 0;\n        users[msg.sender].lockUntil = 0;\n\n        // send back the staked Furion\n        furion.safeTransfer(msg.sender, user.amountLocked);\n    }\n\n    /**\n     * @notice Lock veFUR token\n     * @dev Only whitelisted contract\n     *      Income sharing contract will lock veFUR as entrance\n     * @param _to User address\n     * @param _amount Amount to lock\n     */\n    function lockVeFUR(address _to, uint256 _amount) external {\n        // Only whitelisted contract can lock veFUR\n        if (!whitelist[msg.sender]) revert VEF__NotWhiteListed();\n\n        if (locked[_to] + _amount > balanceOf(_to)) revert VEF__OverLocked();\n\n        _lock(_to, _amount);\n        emit LockVeFUR(msg.sender, _to, _amount);\n    }\n\n    /**\n     * @notice Unlock veFUR token\n     * @param _to User address\n     * @param _amount Amount to unlock\n     */\n    function unlockVeFUR(address _to, uint256 _amount) external {\n        // Only whitelisted contract can unlock veFUR\n        if (!whitelist[msg.sender]) revert VEF__NotWhiteListed();\n\n        if (locked[_to] < _amount) revert VEF__OverLocked();\n\n        _unlock(_to, _amount);\n        emit UnlockVeFUR(msg.sender, _to, _amount);\n    }\n\n    /**\n     * @notice Burn veFUR\n     * @dev Only whitelisted contract\n     *      For future use, some contracts may need veFUR for entrance\n     * @param _to Address to burn\n     * @param _amount Amount to burn\n     */\n    function burnVeFUR(address _to, uint256 _amount) public {\n        // Only whitelisted contract can burn veFUR\n        if (!whitelist[msg.sender]) revert VEF__NotWhiteListed();\n\n        _burn(_to, _amount);\n        emit BurnVeFUR(msg.sender, _to, _amount);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ View Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Calculate the amount of veFUR that can be claimed by user\n     * @param _user User address\n     * @return claimableAmount Claimable amount of the user\n     */\n    function claimable(address _user) public view returns (uint256) {\n        if (_user == address(0)) revert VEF__ZeroAddress();\n\n        UserInfo memory user = users[_user];\n\n        // Seconds passed since last claim\n        uint256 timePassed = block.timestamp - user.lastRelease;\n\n        uint256 realCapRatio = _getCapRatio(_user);\n\n        uint256 pending;\n\n        pending = Math.wmul(user.amount, timePassed * generationRate);\n\n        // get user's veFUR balance\n        uint256 userVeFURBalance = balanceOf(_user) -\n            user.amountLocked *\n            realCapRatio;\n\n        // user veFUR balance cannot go above user.amount * maxCap\n        uint256 veFURCap = user.amount * realCapRatio;\n\n        // first, check that user hasn't reached the max limit yet\n        if (userVeFURBalance < veFURCap) {\n            // then, check if pending amount will make user balance overpass maximum amount\n            if (userVeFURBalance + pending > veFURCap) {\n                return veFURCap - userVeFURBalance;\n            } else {\n                return pending;\n            }\n        }\n        return 0;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Set Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @notice Add a new whitelist address\n     * @dev Only callable by the owner\n     * @param _account Address to add\n     */\n    function addWhitelist(address _account) external onlyOwner {\n        whitelist[_account] = true;\n        emit WhiteListAdded(_account);\n    }\n\n    /**\n     * @notice Remove a new whitelist address\n     * @dev Only callable by the owner\n     * @param _account Address to remove\n     */\n    function removeWhitelist(address _account) external onlyOwner {\n        whitelist[_account] = false;\n        emit WhiteListRemoVEF(_account);\n    }\n\n    /**\n     * @notice Set maxCap ratio\n     * @param _maxCapRatio the new max ratio\n     */\n    function setMaxCapRatio(uint256 _maxCapRatio) external onlyOwner {\n        if (_maxCapRatio == 0) revert VEF__ZeroAmount();\n        emit MaxCapRatioChanged(maxCapRatio, _maxCapRatio);\n        maxCapRatio = _maxCapRatio;\n    }\n\n    /**\n     * @notice Set generationRate\n     * @param _generationRate New generation rate\n     */\n    function setGenerationRate(uint256 _generationRate) external onlyOwner {\n        if (_generationRate == 0) revert VEF__ZeroAmount();\n        emit GenerationRateChanged(generationRate, _generationRate);\n        generationRate = _generationRate;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Internal Functions ********************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Finish claiming veFUR\n     * @param _user User address\n     */\n    function _claim(address _user) internal {\n        uint256 amount = claimable(_user);\n\n        // update last release time\n        users[_user].lastRelease = block.timestamp;\n\n        if (amount > 0) {\n            emit Claimed(_user, amount);\n            _mint(_user, amount);\n        }\n    }\n\n    /**\n     * @notice Lock veFUR token\n     * @param _to User address\n     * @param _amount Amount to lock\n     */\n    function _lock(address _to, uint256 _amount) internal {\n        locked[_to] += _amount;\n    }\n\n    /**\n     * @notice Unlock veFUR token\n     * @param _to User address\n     * @param _amount Amount to unlock\n     */\n    function _unlock(address _to, uint256 _amount) internal {\n        if (locked[_to] < _amount) revert VEF__NotEnoughBalance();\n        locked[_to] -= _amount;\n    }\n\n    /**\n     * @notice Get real cap ratio for a user\n     *         The ratio depends on the boost type\n     *\n     * @param _user User address\n     *\n     * @return realCapRatio Real cap ratio\n     */\n    function _getCapRatio(address _user)\n        internal\n        view\n        returns (uint256 realCapRatio)\n    {\n        if (_user == address(0)) revert VEF__ZeroAddress();\n        realCapRatio = maxCapRatio;\n    }\n}\n"
    },
    "contracts/furion-staking/VeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/IVeERC20.sol\";\n\n/**\n * @title  VeERC20Upgradeable\n * @notice Modified version of ERC20Upgradeable where transfers and allowances are disabled\n * @dev    only minting and burning are allowed. The hook _afterTokenOperation is called after Minting and Burning\n *         This is one upgradeable version\n */\n\ncontract VeERC20Upgradeable is Initializable, ContextUpgradeable, IVeERC20 {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Emitted when `value` tokens are burned and minted\n     */\n    event Burn(address indexed account, uint256 value);\n    event Mint(address indexed beneficiary, uint256 value);\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_)\n        internal\n        onlyInitializing\n    {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_)\n        internal\n        onlyInitializing\n    {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Mint(account, amount);\n\n        _afterTokenOperation(account, _balances[account]);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Burn(account, amount);\n\n        _afterTokenOperation(account, _balances[account]);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any minting and burning.\n     * @param account the account being affected\n     * @param newBalance newBalance after operation\n     */\n    function _afterTokenOperation(address account, uint256 newBalance)\n        internal\n        virtual\n    {}\n\n    uint256[45] private __gap;\n}\n"
    },
    "contracts/furion-farming/interfaces/IFarmingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface IFarmingPool {\n    function pendingFurion(uint256 _poolId, address _user)\n        external\n        returns (uint256);\n\n    function setStartBlock(uint256 _startBlock) external;\n\n    function add(\n        address _lpToken,\n        uint256 _poolId,\n        bool _withUpdate\n    ) external;\n\n    function setFurionReward(\n        uint256 _poolId,\n        uint256 _basicFurionPerBlock,\n        bool _withUpdate\n    ) external;\n\n    function setFurionReward(\n        uint256[] calldata _poolId,\n        uint256[] calldata _basicFurionPerBlock,\n        bool _withUpdate\n    ) external;\n\n    function stake(uint256 _poolId, uint256 _amount) external;\n\n    function withdraw(uint256 _poolId, uint256 _amount) external;\n\n    function updatePool(uint256 _poolId) external;\n\n    function massUpdatePools() external;\n\n    function harvest(uint256 _poolId, address _to) external;\n}\n"
    },
    "contracts/furion-farming/FarmingPoolUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {PausableUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {IFurionToken} from \"../tokens/interfaces/IFurionToken.sol\";\nimport {Math} from \"../libraries/Math.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title  Farming Pool\n * @notice This contract is for LPToken mining on Furion\n * @dev    The pool id starts from 1 rather than 0\n *         The Furion reward is calculated by timestamp rather than block number\n *         This is one upgradeable version\n */\n\ncontract FarmingPoolUpgradeable is\n    Initializable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable\n{\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IFurionToken;\n    using Math for uint256;\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Variables **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    string public constant name = \"Furion LP Farming Pool\";\n\n    // The reward token is Furion\n    IFurionToken public furion;\n\n    // SCALE/Precision used for calculating rewards\n    uint256 public constant SCALE = 1e12;\n\n    // PoolId starts from 1\n    uint256 public _nextPoolId;\n\n    // Farming starts from a certain block timestamp\n    uint256 public startTimestamp;\n\n    struct PoolInfo {\n        address lpToken; // LPToken address\n        uint256 basicFurionPerSecond; // Basic Reward speed\n        uint256 lastRewardTimestamp; // Last reward timestamp\n        uint256 accFurionPerShare; // Accumulated Furion per share\n    }\n    PoolInfo[] public poolList;\n\n    // lptoken address => poolId\n    mapping(address => uint256) public poolMapping;\n\n    // poolId => is farming or not\n    mapping(uint256 => bool) public isFarming;\n\n    struct UserInfo {\n        uint256 rewardDebt; // Furion reward debt\n        uint256 stakingBalance; // the amount of a user's staking in the pool\n    }\n\n    // poolId => userAddress => userInfo\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    event StartTimestampChanged(uint256 startTimestamp);\n    event Stake(address staker, uint256 poolId, uint256 amount);\n    event Withdraw(address staker, uint256 poolId, uint256 amount);\n    event Harvest(\n        address staker,\n        address rewardReceiver,\n        uint256 poolId,\n        uint256 pendingReward\n    );\n\n    event NewPoolAdded(address lpToken, uint256 basicFurionPerSecond);\n    event FarmingPoolStarted(uint256 poolId, uint256 timestamp);\n    event FarmingPoolStopped(uint256 poolId, uint256 timestamp);\n    event FurionRewardChanged(uint256 poolId, uint256 basicFurionPerSecond);\n    event PoolUpdated(uint256 poolId, uint256 accFurionPerShare);\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constructor ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    function initialize(address _furion) public initializer {\n        require(_furion != address(0), \"FARMING_POOL: ZERO_ADDRESS\");\n\n        __Ownable_init();\n        __ReentrancyGuard_init_unchained();\n        __Pausable_init_unchained();\n\n        furion = IFurionToken(_furion);\n\n        // Start from 1\n        _nextPoolId = 1;\n\n        poolList.push(\n            PoolInfo({\n                lpToken: address(0),\n                basicFurionPerSecond: 0,\n                lastRewardTimestamp: 0,\n                accFurionPerShare: 0\n            })\n        );\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************** Modifiers *************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice The address can not be zero\n     */\n    modifier notZeroAddress(address _address) {\n        require(_address != address(0), \"FARMING_POOL: ZERO_ADDRESS\");\n        _;\n    }\n\n    /**\n     * @notice The pool is still in farming\n     */\n    modifier stillFarming(uint256 _poolId) {\n        require(isFarming[_poolId], \"FARMING_POOL: POOL_NOT_FARMING\");\n        _;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Main Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Add a new lp into the pool\n     * @dev Can only be called by the owner\n     *      The reward speed can be 0 and set later by setFurionReward function\n     * @param _lpToken LP token address\n     * @param _basicFurionPerSecond Basic reward speed(per second) for this new pool\n     * @param _withUpdate Whether update all pools' status\n     */\n    function add(\n        address _lpToken,\n        uint256 _basicFurionPerSecond,\n        bool _withUpdate\n    ) public notZeroAddress(_lpToken) onlyOwner whenNotPaused {\n        // Check if already exists, if the poolId is 0, that means not in the pool\n        require(!_alreadyInPool(_lpToken), \"FARMING_POOL: ALREADY_IN_POOL\");\n\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\n            ? block.timestamp\n            : startTimestamp;\n\n        // Push this new pool into the list\n        poolList.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                basicFurionPerSecond: _basicFurionPerSecond,\n                lastRewardTimestamp: lastRewardTimestamp,\n                accFurionPerShare: 0\n            })\n        );\n\n        // Store the poolId and set the farming status to true\n        if (_basicFurionPerSecond > 0) isFarming[_nextPoolId] = true;\n\n        poolMapping[_lpToken] = _nextPoolId++;\n\n        emit NewPoolAdded(_lpToken, _basicFurionPerSecond);\n    }\n\n    /**\n     * @notice Update the FurionPerSecond for a specific pool (set to 0 to stop farming)\n     * @param _poolId Id of the farming pool\n     * @param _basicFurionPerSecond New basic reward amount per second\n     * @param _withUpdate Whether update all pools\n     */\n    function setFurionReward(\n        uint256 _poolId,\n        uint256 _basicFurionPerSecond,\n        bool _withUpdate\n    ) public onlyOwner whenNotPaused {\n        // Ensure there already exists this pool\n        require(\n            poolList[_poolId].lastRewardTimestamp != 0,\n            \"FARMING_POOL: POOL_NOT_EXIST\"\n        );\n\n        if (_withUpdate) massUpdatePools();\n        else updatePool(_poolId);\n\n        // Not farming now + reward > 0 => Restart\n        if (isFarming[_poolId] == false && _basicFurionPerSecond > 0) {\n            isFarming[_poolId] = true;\n            emit FarmingPoolStarted(_poolId, block.timestamp);\n        }\n\n        if (_basicFurionPerSecond == 0) {\n            isFarming[_poolId] = false;\n            emit FarmingPoolStopped(_poolId, block.timestamp);\n        } else {\n            poolList[_poolId].basicFurionPerSecond = _basicFurionPerSecond;\n            emit FurionRewardChanged(_poolId, _basicFurionPerSecond);\n        }\n    }\n\n    /**\n     * @notice Update the FurionPerSecond for a bundle of pools (used for daily updating farming rate)\n     * @param _poolId Id collection of the farming pool\n     * @param _basicFurionPerSecond New basic reward amount per second\n     * @param _withUpdate Whether update all pools\n     */\n    function setFurionRewards(\n        uint256[] calldata _poolId,\n        uint256[] calldata _basicFurionPerSecond,\n        bool _withUpdate\n    ) public onlyOwner whenNotPaused {\n        uint256 length = _poolId.length;\n        require(length <= 9, \"FARMING_POOL: MORE_THAN_NINE\");\n\n        for (uint256 i = 0; i < length; ) {\n            setFurionReward(_poolId[i], _basicFurionPerSecond[i], _withUpdate);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Stake LP token into the farming pool\n     * @dev Can only stake to the pools that are still farming\n     * @param _poolId Id of the farming pool\n     * @param _amount Staking amount\n     */\n    function stake(uint256 _poolId, uint256 _amount)\n        public\n        nonReentrant\n        whenNotPaused\n        stillFarming(_poolId)\n    {\n        require(_amount > 0, \"FARMING_POOL: STAKE_ZERO\");\n\n        PoolInfo storage pool = poolList[_poolId];\n        UserInfo storage user = userInfo[_poolId][msg.sender];\n\n        // Must update first\n        updatePool(_poolId);\n\n        // First distribute the reward if exists\n        if (user.stakingBalance > 0) {\n            uint256 pending = (user.stakingBalance * pool.accFurionPerShare) /\n                SCALE -\n                user.rewardDebt;\n\n            // Real reward amount\n            uint256 reward = _safeFurionTransfer(msg.sender, pending);\n            emit Harvest(msg.sender, msg.sender, _poolId, reward);\n        }\n\n        // Actual deposit amount\n        uint256 actualAmount = _safeLPTransfer(\n            false,\n            pool.lpToken,\n            msg.sender,\n            _amount\n        );\n\n        user.stakingBalance += actualAmount;\n\n        user.rewardDebt =\n            (user.stakingBalance * pool.accFurionPerShare) /\n            SCALE;\n\n        emit Stake(msg.sender, _poolId, actualAmount);\n    }\n\n    /**\n     * @notice Withdraw lptoken from the pool\n     * @param _poolId Id of the farming pool\n     * @param _amount Amount of lp tokens to withdraw\n     */\n    function withdraw(uint256 _poolId, uint256 _amount)\n        public\n        nonReentrant\n        whenNotPaused\n    {\n        require(_amount > 0, \"FARMING_POOL: WITHDRAW_ZERO\");\n\n        PoolInfo storage pool = poolList[_poolId];\n        UserInfo storage user = userInfo[_poolId][msg.sender];\n\n        require(\n            user.stakingBalance >= _amount,\n            \"FARMING_POOL: NO_ENOUGH_STAKING_BALANCE\"\n        );\n\n        // Update if the pool is still farming\n        // Users can withdraw even after the pool stopped\n        if (isFarming[_poolId]) updatePool(_poolId);\n\n        uint256 pending = (user.stakingBalance * pool.accFurionPerShare) /\n            SCALE -\n            user.rewardDebt;\n\n        uint256 reward = _safeFurionTransfer(msg.sender, pending);\n        emit Harvest(msg.sender, msg.sender, _poolId, reward);\n\n        uint256 actualAmount = _safeLPTransfer(\n            true,\n            pool.lpToken,\n            msg.sender,\n            _amount\n        );\n\n        user.stakingBalance -= actualAmount;\n\n        user.rewardDebt =\n            (user.stakingBalance * pool.accFurionPerShare) /\n            SCALE;\n\n        emit Withdraw(msg.sender, _poolId, actualAmount);\n    }\n\n    /**\n     * @notice Harvest the Furion reward and can be sent to another address\n     * @param _poolId Id of the farming pool\n     * @param _to Receiver of Furion rewards\n     */\n    function harvest(uint256 _poolId, address _to)\n        public\n        nonReentrant\n        whenNotPaused\n    {\n        // Only update the pool when it is still in farming\n        if (isFarming[_poolId]) updatePool(_poolId);\n\n        PoolInfo memory pool = poolList[_poolId];\n        UserInfo storage user = userInfo[_poolId][msg.sender];\n\n        uint256 pendingReward = (user.stakingBalance * pool.accFurionPerShare) /\n            SCALE -\n            user.rewardDebt;\n\n        require(pendingReward > 0, \"FARMING_POOL: NO_PENDING_REWARD\");\n\n        // Update the reward debt\n        user.rewardDebt =\n            (user.stakingBalance * pool.accFurionPerShare) /\n            SCALE;\n\n        // Transfer the reward\n        uint256 reward = _safeFurionTransfer(_to, pendingReward);\n\n        emit Harvest(msg.sender, _to, _poolId, reward);\n    }\n\n    /**\n     * @notice Update the pool's reward status\n     * @param _poolId Id of the farming pool\n     */\n    function updatePool(uint256 _poolId) public {\n        PoolInfo storage pool = poolList[_poolId];\n        if (block.timestamp <= pool.lastRewardTimestamp) {\n            return;\n        }\n\n        uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));\n\n        // No LP deposited, then just update the lastRewardTimestamp\n        if (lpSupply == 0) {\n            pool.lastRewardTimestamp = block.timestamp;\n            return;\n        }\n\n        uint256 timePassed = block.timestamp - pool.lastRewardTimestamp;\n\n        uint256 basicReward = timePassed * pool.basicFurionPerSecond;\n\n        pool.accFurionPerShare += (basicReward * SCALE) / lpSupply;\n\n        // Don't forget to set the farming pool as minter\n        furion.mintFurion(address(this), basicReward);\n\n        pool.lastRewardTimestamp = block.timestamp;\n\n        emit PoolUpdated(_poolId, pool.accFurionPerShare);\n    }\n\n    /**\n     * @notice Update all farming pools (except for those stopped ones)\n     * @dev Can be called by anyone\n     *      Only update those active pools\n     */\n    function massUpdatePools() public {\n        uint256 length = poolList.length;\n        for (uint256 poolId; poolId < length; poolId++) {\n            if (isFarming[poolId] == false) continue;\n            else updatePool(poolId);\n        }\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** View Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Check the amount of pending Furion reward\n     * @param _poolId PoolId of this farming pool\n     * @param _user User address\n     * @return pendingFurionAmount Amount of pending Furion\n     */\n    function pendingFurion(uint256 _poolId, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        PoolInfo memory poolInfo = poolList[_poolId];\n\n        if (\n            poolInfo.lastRewardTimestamp == 0 ||\n            block.timestamp < poolInfo.lastRewardTimestamp ||\n            block.timestamp < startTimestamp\n        ) return 0;\n\n        UserInfo memory user = userInfo[_poolId][_user];\n\n        // Total lp token balance\n        uint256 lpBalance = IERC20(poolInfo.lpToken).balanceOf(address(this));\n\n        // Accumulated shares to be calculated\n        uint256 accFurionPerShare = poolInfo.accFurionPerShare;\n\n        if (lpBalance == 0) return 0;\n        else {\n            // If the pool is still farming, update the info\n            if (isFarming[_poolId]) {\n                // Deigs amount given to this pool\n                uint256 timePassed = block.timestamp -\n                    poolInfo.lastRewardTimestamp;\n                uint256 basicReward = poolInfo.basicFurionPerSecond *\n                    timePassed;\n                // Update accFurionPerShare\n                // LPToken may have different decimals\n                accFurionPerShare += (basicReward * SCALE) / lpBalance;\n            }\n\n            // If the pool has stopped, not update the info\n            uint256 pending = (user.stakingBalance * accFurionPerShare) /\n                SCALE -\n                user.rewardDebt;\n\n            return pending;\n        }\n    }\n\n    /**\n     * @notice Get the total pool list\n     * @return pooList Total pool list\n     */\n    function getPoolList() external view returns (PoolInfo[] memory) {\n        return poolList;\n    }\n\n    /**\n     * @notice Get a user's balance\n     * @param _poolId Id of the pool\n     * @param _user User address\n     * @return balance User's balance (lpToken)\n     */\n    function getUserBalance(uint256 _poolId, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        return userInfo[_poolId][_user].stakingBalance;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Set Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @notice Set the start block timestamp\n     * @param _startTimestamp New start block timestamp\n     */\n    function setStartTimestamp(uint256 _startTimestamp)\n        external\n        onlyOwner\n        whenNotPaused\n    {\n        // Can only be set before any pool is added\n        require(_nextPoolId == 1, \"ALREADY_HAVING_POOLS\");\n\n        startTimestamp = _startTimestamp;\n        emit StartTimestampChanged(_startTimestamp);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ********************************** Internal Functions ********************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Check if a lptoken has been added into the pool before\n     * @dev This can also be written as a modifier\n     * @param _lpToken LP token address\n     * @return _isInPool Wether this lp is already in pool\n     */\n    function _alreadyInPool(address _lpToken)\n        internal\n        view\n        returns (bool _isInPool)\n    {\n        uint256 poolId = poolMapping[_lpToken];\n\n        _isInPool = (poolId != 0) ? true : false;\n    }\n\n    /**\n     * @notice Safe Furion transfer (check if the pool has enough Furion token, if not, transfer balance)\n     * @param _to User's address\n     * @param _amount Amount to transfer\n     */\n    function _safeFurionTransfer(address _to, uint256 _amount)\n        internal\n        returns (uint256)\n    {\n        uint256 poolFurionBalance = furion.balanceOf(address(this));\n        require(poolFurionBalance > 0, \"FARMING_POOL: NO_FUR_IN_POOL\");\n\n        if (_amount > poolFurionBalance) {\n            furion.safeTransfer(_to, poolFurionBalance);\n            return (poolFurionBalance);\n        } else {\n            furion.safeTransfer(_to, _amount);\n            return _amount;\n        }\n    }\n\n    /**\n     * @notice Finish the transfer of LP Token\n     * @dev The lp token may have loss during transfer\n     * @param _out Whether the lp token is out\n     * @param _lpToken LP token address\n     * @param _user User address\n     * @param _amount Amount of lp tokens\n     */\n    function _safeLPTransfer(\n        bool _out,\n        address _lpToken,\n        address _user,\n        uint256 _amount\n    ) internal returns (uint256) {\n        uint256 poolBalanceBefore = IERC20(_lpToken).balanceOf(address(this));\n\n        if (_out) IERC20(_lpToken).safeTransfer(_user, _amount);\n        else IERC20(_lpToken).safeTransferFrom(_user, address(this), _amount);\n\n        uint256 poolBalanceAfter = IERC20(_lpToken).balanceOf(address(this));\n\n        return\n            _out\n                ? poolBalanceBefore - poolBalanceAfter\n                : poolBalanceAfter - poolBalanceBefore;\n    }\n}\n"
    },
    "contracts/furion-swap/FurionSwapV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../tokens/interfaces/IWETH.sol\";\nimport \"./interfaces/IFurionSwapV2Router.sol\";\nimport \"./interfaces/IFurionSwapFactory.sol\";\nimport \"./interfaces/IFurionSwapPair.sol\";\nimport {IERC20Decimals} from \"../utils/interfaces/IERC20Decimals.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title  FurionSwapRouter\n * @notice Router for the pool, you can add/remove liquidity or swap A for B.\n *         Swapping fee rate is 3‰, 99% of them is given to LP, and 1% to income maker\n *         Very similar logic with Uniswap V2.\n *\n */\n\ncontract FurionSwapV2Router is IFurionSwapV2Router {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IFurionSwapPair;\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Variables **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    // Some other contracts\n    address public immutable override factory;\n    address public immutable override WETH;\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    event LiquidityAdded(\n        address indexed pairAddress,\n        uint256 amountA,\n        uint256 amountB,\n        uint256 liquidity\n    );\n\n    event LiquidityRemoved(\n        address indexed pairAddress,\n        uint256 amountA,\n        uint256 amountB,\n        uint256 liquidity\n    );\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constructor ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    constructor(address _factory, address _weth) {\n        factory = _factory;\n        WETH = _weth;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************** Modifiers *************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Transactions are available only before the deadline\n     * @param _deadline Deadline of the pool\n     */\n    modifier beforeDeadline(uint256 _deadline) {\n        if (_deadline > 0) {\n            if (msg.sender != IFurionSwapFactory(factory).incomeMaker()) {\n                require(block.timestamp < _deadline, \"expired transaction\");\n            }\n        }\n        _;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Main Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    receive() external payable {\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n    }\n\n    /**\n     * @notice Add liquidity function\n     * @param _tokenA Address of tokenA\n     * @param _tokenB Address of tokenB\n     * @param _amountADesired Amount of tokenA desired\n     * @param _amountBDesired Amount of tokenB desired\n     * @param _amountAMin Minimum amoutn of tokenA\n     * @param _amountBMin Minimum amount of tokenB\n     * @param _to Address that receive the lp token, normally the user himself\n     * @param _deadline Transaction will revert after this deadline\n     * @return amountA Amount of tokenA to be input\n     * @return amountB Amount of tokenB to be input\n     * @return liquidity LP token to be mint\n     */\n    function addLiquidity(\n        address _tokenA,\n        address _tokenB,\n        uint256 _amountADesired,\n        uint256 _amountBDesired,\n        uint256 _amountAMin,\n        uint256 _amountBMin,\n        address _to,\n        uint256 _deadline\n    )\n        external\n        beforeDeadline(_deadline)\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        )\n    {\n        (amountA, amountB) = _addLiquidity(\n            _tokenA,\n            _tokenB,\n            _amountADesired,\n            _amountBDesired,\n            _amountAMin,\n            _amountBMin\n        );\n\n        address pair = IFurionSwapFactory(factory).getPair(_tokenA, _tokenB);\n\n        _transferFromHelper(_tokenA, msg.sender, pair, amountA);\n        _transferFromHelper(_tokenB, msg.sender, pair, amountB);\n\n        liquidity = IFurionSwapPair(pair).mint(_to);\n\n        emit LiquidityAdded(pair, amountA, amountB, liquidity);\n    }\n\n    /**\n     * @notice Add liquidity for pair where one token is ETH\n     * @param _token Address of the other token\n     * @param _amountTokenDesired Amount of token desired\n     * @param _amountTokenMin Minimum amount of token\n     * @param _amountETHMin Minimum amount of ETH\n     * @param _to Address that receive the lp token, normally the user himself\n     * @param _deadline Transaction will revert after this deadline\n     * @return amountToken Amount of token to be input\n     * @return amountETH Amount of ETH to be input\n     * @return liquidity LP token to be mint\n     */\n    function addLiquidityETH(\n        address _token,\n        uint256 _amountTokenDesired,\n        uint256 _amountTokenMin,\n        uint256 _amountETHMin,\n        address _to,\n        uint256 _deadline\n    )\n        external\n        payable\n        beforeDeadline(_deadline)\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        )\n    {\n        (amountToken, amountETH) = _addLiquidity(\n            _token,\n            WETH,\n            _amountTokenDesired,\n            msg.value,\n            _amountTokenMin,\n            _amountETHMin\n        );\n\n        address pair = IFurionSwapFactory(factory).getPair(_token, WETH);\n\n        _transferFromHelper(_token, msg.sender, pair, amountToken);\n        IWETH(WETH).deposit{value: amountETH}();\n        assert(IWETH(WETH).transfer(pair, amountETH));\n\n        liquidity = IFurionSwapPair(pair).mint(_to);\n\n        // refund dust eth, if any\n        if (msg.value > amountETH)\n            _safeTransferETH(msg.sender, msg.value - amountETH);\n\n        emit LiquidityAdded(pair, amountToken, amountETH, liquidity);\n    }\n\n    /**\n     * @notice Remove liquidity from the pool\n     * @param _tokenA Address of token A\n     * @param _tokenB Address of token B\n     * @param _liquidity The lp token amount to be removed\n     * @param _amountAMin Minimum amount of tokenA given out\n     * @param _amountBMin Minimum amount of tokenB given out\n     * @param _to User address\n     * @param _deadline Deadline of this transaction\n     * @return amount0 Amount of token0 given out\n     * @return amount1 Amount of token1 given out, here amount0 & 1 is ordered\n     */\n    function removeLiquidity(\n        address _tokenA,\n        address _tokenB,\n        uint256 _liquidity,\n        uint256 _amountAMin,\n        uint256 _amountBMin,\n        address _to,\n        uint256 _deadline\n    )\n        public\n        override\n        beforeDeadline(_deadline)\n        returns (uint256 amount0, uint256 amount1)\n    {\n        address pair = IFurionSwapFactory(factory).getPair(_tokenA, _tokenB);\n\n        IFurionSwapPair(pair).safeTransferFrom(msg.sender, pair, _liquidity); // send liquidity to pair\n\n        // token0 < token1, corresponding amoount\n        (amount0, amount1) = IFurionSwapPair(pair).burn(_to);\n\n        (uint256 amount0Min, uint256 amount1Min) = _tokenA < _tokenB\n            ? (_amountAMin, _amountBMin)\n            : (_amountBMin, _amountAMin);\n\n        require(amount0 >= amount0Min, \"Insufficient amount for token0\");\n        require(amount1 >= amount1Min, \"Insufficient amount for token1\");\n\n        emit LiquidityRemoved(pair, amount0, amount1, _liquidity);\n    }\n\n    /**\n     * @notice Remove liquidity from the pool, one token is ETH\n     * @param _token Address of the other token\n     * @param _liquidity The lp token amount to be removed\n     * @param _amountTokenMin Minimum amount of token given out\n     * @param _amountETHMin Minimum amount of ETH given out\n     * @param _to User address\n     * @param _deadline Deadline of this transaction\n     * @return amountToken Amount of token given out\n     * @return amountETH Amount of ETH given out\n     */\n    function removeLiquidityETH(\n        address _token,\n        uint256 _liquidity,\n        uint256 _amountTokenMin,\n        uint256 _amountETHMin,\n        address _to,\n        uint256 _deadline\n    )\n        external\n        beforeDeadline(_deadline)\n        returns (uint256 amountToken, uint256 amountETH)\n    {\n        (amountToken, amountETH) = removeLiquidity(\n            _token,\n            WETH,\n            _liquidity,\n            _amountTokenMin,\n            _amountETHMin,\n            address(this),\n            _deadline\n        );\n\n        // firstly make tokens inside the contract then transfer out\n        _transferHelper(_token, _to, amountToken);\n\n        IWETH(WETH).withdraw(amountETH);\n        _safeTransferETH(_to, amountETH);\n    }\n\n    /**\n     * @notice Swap exact tokens for another token, input is fixed\n     * @param _amountIn Amount of input token\n     * @param _amountOutMin Minimum amount of token given out\n     * @param _path Address collection of trading path\n     * @param _to Receiver of the output token, generally user address\n     * @param _deadline Deadline of this transaction\n     * @return amounts Amount of tokens\n     */\n    function swapExactTokensForTokens(\n        uint256 _amountIn,\n        uint256 _amountOutMin,\n        address[] calldata _path,\n        address _to,\n        uint256 _deadline\n    )\n        public\n        override\n        beforeDeadline(_deadline)\n        returns (uint256[] memory amounts)\n    {\n        amounts = getAmountsOut(_amountIn, _path);\n\n        require(\n            amounts[amounts.length - 1] >= _amountOutMin,\n            \"FurionSwapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n\n        _transferFromHelper(\n            _path[0],\n            msg.sender,\n            IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\n            amounts[0]\n        );\n        _swap(amounts, _path, _to);\n    }\n\n    /**\n     * @notice Swap token for exact token, output is fixed\n     * @param _amountOut Amount of output token\n     * @param _amountInMax Maxmium amount of token in\n     * @param _path Address collection of trading path\n     * @param _to Receiver of the output token, generally user address\n     * @param _deadline Deadline of this transaction\n     * @return amounts Amount of tokens\n     */\n    function swapTokensForExactTokens(\n        uint256 _amountOut,\n        uint256 _amountInMax,\n        address[] calldata _path,\n        address _to,\n        uint256 _deadline\n    )\n        public\n        override\n        beforeDeadline(_deadline)\n        returns (uint256[] memory amounts)\n    {\n        amounts = getAmountsIn(_amountOut, _path);\n\n        require(\n            amounts[0] <= _amountInMax,\n            \"FurionSwapV2Router: EXCESSIVE_INPUT_AMOUNT\"\n        );\n\n        _transferFromHelper(\n            _path[0],\n            msg.sender,\n            IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\n            amounts[0]\n        );\n        _swap(amounts, _path, _to);\n    }\n\n    /**\n     * @notice Swap exact ETH for another token, input is fixed\n     * @param _amountOutMin Minimum amount of output token\n     * @param _path Address collection of trading path\n     * @param _to Receiver of the output token, generally user address\n     * @param _deadline Deadline of this transaction\n     * @return amounts Amount of tokens\n     */\n    function swapExactETHForTokens(\n        uint256 _amountOutMin,\n        address[] calldata _path,\n        address _to,\n        uint256 _deadline\n    )\n        external\n        payable\n        override\n        beforeDeadline(_deadline)\n        returns (uint256[] memory amounts)\n    {\n        require(_path[0] == WETH, \"FurionSwapV2Router: INVALID_PATH\");\n        amounts = getAmountsOut(msg.value, _path);\n        require(\n            amounts[amounts.length - 1] >= _amountOutMin,\n            \"FurionSwapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(\n            IWETH(WETH).transfer(\n                IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\n                amounts[0]\n            )\n        );\n        _swap(amounts, _path, _to);\n    }\n\n    /**\n     * @notice Swap token for exact ETH, output is fixed\n     * @param _amountOut Amount of output token\n     * @param _amountInMax Maxmium amount of token in\n     * @param _path Address collection of trading path\n     * @param _to Receiver of the output token, generally user address\n     * @param _deadline Deadline of this transaction\n     * @return amounts Amount of tokens\n     */\n    function swapTokensForExactETH(\n        uint256 _amountOut,\n        uint256 _amountInMax,\n        address[] calldata _path,\n        address _to,\n        uint256 _deadline\n    )\n        external\n        override\n        beforeDeadline(_deadline)\n        returns (uint256[] memory amounts)\n    {\n        require(\n            _path[_path.length - 1] == WETH,\n            \"FurionSwapV2Router: INVALID_PATH\"\n        );\n        amounts = getAmountsIn(_amountOut, _path);\n        require(\n            amounts[0] <= _amountInMax,\n            \"FurionSwapV2Router: EXCESSIVE_INPUT_AMOUNT\"\n        );\n\n        _transferFromHelper(\n            _path[0],\n            msg.sender,\n            IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\n            amounts[0]\n        );\n        _swap(amounts, _path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        _safeTransferETH(_to, amounts[amounts.length - 1]);\n    }\n\n    /**\n     * @notice Swap exact tokens for ETH, input is fixed\n     * @param _amountIn Amount of input token\n     * @param _amountOutMin Minimum amount of output token\n     * @param _path Address collection of trading path\n     * @param _to Receiver of the output token, generally user address\n     * @param _deadline Deadline of this transaction\n     * @return amounts Amount of tokens\n     */\n    function swapExactTokensForETH(\n        uint256 _amountIn,\n        uint256 _amountOutMin,\n        address[] calldata _path,\n        address _to,\n        uint256 _deadline\n    )\n        external\n        override\n        beforeDeadline(_deadline)\n        returns (uint256[] memory amounts)\n    {\n        require(\n            _path[_path.length - 1] == WETH,\n            \"FurionSwapV2Router: INVALID_PATH\"\n        );\n        amounts = getAmountsOut(_amountIn, _path);\n        require(\n            amounts[amounts.length - 1] >= _amountOutMin,\n            \"FurionSwapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n\n        _transferFromHelper(\n            _path[0],\n            msg.sender,\n            IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\n            amounts[0]\n        );\n\n        _swap(amounts, _path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        _safeTransferETH(_to, amounts[amounts.length - 1]);\n    }\n\n    /**\n     * @notice Swap token for exact ETH, output is fixed\n     * @param _amountOut Amount of output token\n     * @param _path Address collection of trading path\n     * @param _to Receiver of the output token, generally user address\n     * @param _deadline Deadline of this transaction\n     * @return amounts Amount of tokens\n     */\n    function swapETHForExactTokens(\n        uint256 _amountOut,\n        address[] calldata _path,\n        address _to,\n        uint256 _deadline\n    )\n        external\n        payable\n        override\n        beforeDeadline(_deadline)\n        returns (uint256[] memory amounts)\n    {\n        require(_path[0] == WETH, \"FurionSwapV2Router: INVALID_PATH\");\n        amounts = getAmountsIn(_amountOut, _path);\n        require(\n            amounts[0] <= msg.value,\n            \"FurionSwapV2Router: EXCESSIVE_INPUT_AMOUNT\"\n        );\n\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(\n            IWETH(WETH).transfer(\n                IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\n                amounts[0]\n            )\n        );\n        _swap(amounts, _path, _to);\n\n        // refund dust eth, if any\n        if (msg.value > amounts[0])\n            _safeTransferETH(msg.sender, msg.value - amounts[0]);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Helper Functions *********************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Fetch the reserves for a trading pair\n     * @dev You need to sort the token order by yourself!\n     *      No matter your input order, the return value will always start with lower address\n     *      i.e. _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA)\n     * @param _tokenA Address of tokenA\n     * @param _tokenB Address of tokenB\n     * @return reserve0 Reserve of token0,\n     * @return reserve1 Reserve of token1\n     */\n    function getReserves(address _tokenA, address _tokenB)\n        public\n        view\n        returns (uint112 reserve0, uint112 reserve1)\n    {\n        address pairAddress = IFurionSwapFactory(factory).getPair(\n            _tokenA,\n            _tokenB\n        );\n\n        // (token0 reserve, token1 reserve)\n        (reserve0, reserve1) = IFurionSwapPair(pairAddress).getReserves();\n    }\n\n    /**\n     * @notice Used when swap exact tokens for tokens (in is fixed)\n     * @param _amountIn Amount of tokens put in\n     * @param _tokenIn Address of the input token\n     * @param _tokenOut Address of the output token\n     * @return amountOut Amount of token out\n     */\n    function getAmountOut(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) public view returns (uint256 amountOut) {\n        (uint256 reserve0, uint256 reserve1) = getReserves(_tokenIn, _tokenOut);\n\n        // Get the right order\n        (uint256 reserveIn, uint256 reserveOut) = _tokenIn < _tokenOut\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n\n        require(_amountIn > 0, \"insufficient input amount\");\n        require(reserveIn > 0 && reserveOut > 0, \"insufficient liquidity\");\n\n        // read fee rate from FurionSwapPair\n        uint256 feeRate = IFurionSwapPair(\n            IFurionSwapFactory(factory).getPair(_tokenIn, _tokenOut)\n        ).feeRate();\n\n        uint256 amountInWithFee = _amountIn * (1000 - feeRate);\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\n\n        amountOut = numerator / denominator;\n    }\n\n    /**\n     * @notice Used when swap tokens for exact tokens (out is fixed)\n     * @param _amountOut Amount of tokens given out\n     * @param _tokenIn Address of the input token\n     * @param _tokenOut Address of the output token\n     * @return amountIn Amount of token in\n     */\n    function getAmountIn(\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut\n    ) public view returns (uint256 amountIn) {\n        (uint256 reserve0, uint256 reserve1) = getReserves(_tokenIn, _tokenOut);\n\n        // Get the right order\n        (uint256 reserveIn, uint256 reserveOut) = _tokenIn < _tokenOut\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n\n        require(_amountOut > 0, \"insufficient output amount\");\n        require(reserveIn > 0 && reserveOut > 0, \"insufficient liquidity\");\n\n        // read fee rate from FurionSwapPair\n        uint256 feeRate = IFurionSwapPair(\n            IFurionSwapFactory(factory).getPair(_tokenIn, _tokenOut)\n        ).feeRate();\n\n        uint256 numerator = reserveIn * (_amountOut) * 1000;\n        uint256 denominator = (reserveOut - _amountOut) * (1000 - feeRate);\n\n        amountIn = numerator / denominator + 1;\n    }\n\n    /**\n     * @notice Used when swap exact tokens for tokens (in is fixed), multiple swap\n     * @param _amountIn Amount of tokens put in\n     * @param _path Path of trading routes\n     * @return amounts Amount of tokens\n     */\n    function getAmountsOut(uint256 _amountIn, address[] memory _path)\n        public\n        view\n        returns (uint256[] memory amounts)\n    {\n        require(_path.length >= 2, \"FurionSwap: INVALID_PATH\");\n        amounts = new uint256[](_path.length);\n        amounts[0] = _amountIn;\n        for (uint256 i; i < _path.length - 1; i++) {\n            amounts[i + 1] = getAmountOut(amounts[i], _path[i], _path[i + 1]);\n        }\n    }\n\n    /**\n     * @notice Used when swap exact tokens for tokens (out is fixed), multiple swap\n     * @param _amountOut Amount of tokens get out\n     * @param _path Path of trading routes\n     * @return amounts Amount of tokens\n     */\n    function getAmountsIn(uint256 _amountOut, address[] memory _path)\n        public\n        view\n        returns (uint256[] memory amounts)\n    {\n        require(_path.length >= 2, \"FurionSwap: INVALID_PATH\");\n        amounts = new uint256[](_path.length);\n        amounts[amounts.length - 1] = _amountOut;\n\n        for (uint256 i = _path.length - 1; i > 0; i--) {\n            amounts[i - 1] = getAmountIn(amounts[i], _path[i - 1], _path[i]);\n        }\n    }\n\n    /**\n     * @notice Given some amount of an asset and pair reserves\n     *         returns an equivalent amount of the other asset\n     * @dev Used when add or remove liquidity\n     * @param _amountA Amount of tokenA\n     * @param _reserveA Reserve of tokenA\n     * @param _reserveB Reserve of tokenB\n     * @return amountB Amount of tokenB\n     */\n    function quote(\n        uint256 _amountA,\n        uint256 _reserveA,\n        uint256 _reserveB\n    ) public pure returns (uint256 amountB) {\n        require(_amountA > 0, \"insufficient amount\");\n        require(_reserveA > 0 && _reserveB > 0, \"insufficient liquidity\");\n\n        amountB = (_amountA * _reserveB) / _reserveA;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Internal Functions ********************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Internal function to finish adding liquidity\n     * @param _tokenA Address of tokenA\n     * @param _tokenB Address of tokenB\n     * @param _amountADesired Amount of tokenA to be added\n     * @param _amountBDesired Amount of tokenB to be added\n     * @param _amountAMin Minimum amount of tokenA\n     * @param _amountBMin Minimum amount of tokenB\n     * @return amountA Real amount of tokenA\n     * @return amountB Real amount of tokenB\n     */\n    function _addLiquidity(\n        address _tokenA,\n        address _tokenB,\n        uint256 _amountADesired,\n        uint256 _amountBDesired,\n        uint256 _amountAMin,\n        uint256 _amountBMin\n    ) private view returns (uint256 amountA, uint256 amountB) {\n        (uint256 reserve0, uint256 reserve1) = getReserves(_tokenA, _tokenB);\n        (uint256 reserveA, uint256 reserveB) = _tokenA < _tokenB\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (_amountADesired, _amountBDesired);\n        } else {\n            uint256 amountBOptimal = quote(_amountADesired, reserveA, reserveB);\n            if (amountBOptimal <= _amountBDesired) {\n                require(amountBOptimal >= _amountBMin, \"INSUFFICIENT_B_AMOUNT\");\n                (amountA, amountB) = (_amountADesired, amountBOptimal);\n            } else {\n                uint256 amountAOptimal = quote(\n                    _amountBDesired,\n                    reserveB,\n                    reserveA\n                );\n                require(amountAOptimal <= _amountADesired, \"UNAVAILABLE\");\n                require(amountAOptimal >= _amountAMin, \"INSUFFICIENT_A_AMOUNT\");\n                (amountA, amountB) = (amountAOptimal, _amountBDesired);\n            }\n        }\n    }\n\n    /**\n     * @notice Finish the erc20 transfer operation\n     * @param _token ERC20 token address\n     * @param _from Address to give out the token\n     * @param _to Pair address to receive the token\n     * @param _amount Transfer amount\n     */\n    function _transferFromHelper(\n        address _token,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        // (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(0x23b872dd, _from, _to, _amount));\n        // require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FROM_FAILED\");\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\n    }\n\n    /**\n     * @notice Finish the erc20 transfer operation\n     * @param _token ERC20 token address\n     * @param _to Address to receive the token\n     * @param _amount Transfer amount\n     */\n    function _transferHelper(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        // (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(0x23b872dd, _from, _to, _amount));\n        // require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FROM_FAILED\");\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n\n    /**\n     * @notice Finish the ETH transfer operation\n     * @param _to Address to receive the token\n     * @param _amount Transfer amount\n     */\n    function _safeTransferETH(address _to, uint256 _amount) internal {\n        (bool success, ) = _to.call{value: _amount}(\"\");\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n    }\n\n    /**\n     * @notice Finish swap process, requires the initial amount to have already been sent to the first pair\n     * @param _amounts Amounts of token out for multiple swap\n     * @param _path Address of tokens for multiple swap\n     * @param _to Address of the final token receiver\n     */\n    function _swap(\n        uint256[] memory _amounts,\n        address[] memory _path,\n        address _to\n    ) private {\n        for (uint256 i; i < _path.length - 1; i++) {\n            // get token pair for each seperate swap\n            (address input, address output) = (_path[i], _path[i + 1]);\n            address token0 = input < output ? input : output;\n\n            // get tokenOutAmount for each swap\n            uint256 amountOut = _amounts[i + 1];\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\n                ? (uint256(0), amountOut)\n                : (amountOut, uint256(0));\n\n            address to = i < _path.length - 2\n                ? IFurionSwapFactory(factory).getPair(output, _path[i + 2])\n                : _to;\n\n            IFurionSwapPair(IFurionSwapFactory(factory).getPair(input, output))\n                .swap(amount0Out, amount1Out, to);\n        }\n    }\n}\n"
    },
    "contracts/tokens/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/utils/interfaces/IERC20Decimals.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.10;\n\ninterface IERC20Decimals {\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/tokens/WETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"./interfaces/IWETH.sol\";\n\ncontract WETH9 is IWETH {\n    string public name = \"Wrapped Ether\";\n    string public symbol = \"WETH\";\n    uint8 public decimals = 18;\n\n    event Approval(address indexed _src, address indexed _to, uint256 _amount);\n    event Transfer(address indexed _src, address indexed _to, uint256 _amount);\n    event Deposit(address indexed _to, uint256 _amount);\n    event Withdrawal(address indexed _src, uint256 _amount);\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    receive() external payable {\n        deposit();\n    }\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 _amount) public {\n        require(balanceOf[msg.sender] >= _amount, \"INSUFFICIENT_BALANCE\");\n        balanceOf[msg.sender] -= _amount;\n\n        (bool success, ) = msg.sender.call{value: _amount}(\"\");\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n\n        emit Withdrawal(msg.sender, _amount);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function approve(address _to, uint256 _amount) public returns (bool) {\n        allowance[msg.sender][_to] = _amount;\n        emit Approval(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _amount) public returns (bool) {\n        return transferFrom(msg.sender, _to, _amount);\n    }\n\n    function transferFrom(\n        address _src,\n        address _to,\n        uint256 _amount\n    ) public returns (bool) {\n        require(balanceOf[_src] >= _amount, \"INSUFFICIENT_BALANCE\");\n\n        if (_src != msg.sender && allowance[_src][msg.sender] >= 0) {\n            require(allowance[_src][msg.sender] >= _amount, \"EXCEED_ALLOWANCE\");\n            allowance[_src][msg.sender] -= _amount;\n        }\n\n        balanceOf[_src] -= _amount;\n        balanceOf[_to] += _amount;\n\n        emit Transfer(_src, _to, _amount);\n        return true;\n    }\n}\n"
    },
    "contracts/furion-swap/FurionSwapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"./interfaces/IFurionSwapFactory.sol\";\nimport \"./FurionSwapPair.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// import {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title Furion Swap Factory\n * @dev Factory contract to deploy new trading pair\n *      All token pairs are supported but with an indicator to show if one of them is Furion Tokens\n *      Furion Tokens refer to F-* token, FFT, and FUR\n */\n\ncontract FurionSwapFactory is IFurionSwapFactory {\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Variables **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    address private _owner;\n\n    // token0 Address => token1 Address => Pool Address\n    mapping(address => mapping(address => address)) public override getPair;\n    mapping(address => mapping(address => bool)) public override isFurionPairs;\n\n    // Store all the pairs' addresses\n    address[] public allPairs;\n\n    // Address of income maker, part of the transaction fee will be distributed to this address\n    address public incomeMaker;\n\n    // Swap fee proportion to income maker\n    uint256 public incomeMakerProportion;\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256 allPairsLength\n    );\n    event IncomeMakerProportionChanged(\n        uint256 oldProportion,\n        uint256 newProportion\n    );\n    event IncomeMakerAddressChanged(\n        address oldIncomeMaker,\n        address newIncomeMaker\n    );\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constructor ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    constructor(address _incomeMaker) {\n        _owner = msg.sender;\n        incomeMaker = _incomeMaker;\n        // 1% of swap fee is distributed to income maker contract\n        // Can be set later\n        incomeMakerProportion = 1;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************** Modifiers *************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ View Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function allPairsLength() external view returns (uint256) {\n        return allPairs.length;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Set Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Set income maker proportion\n     * @dev    Only callable by the owner\n     * @param _proportion New proportion to income maker contract\n     */\n    function setIncomeMakerProportion(uint256 _proportion) external onlyOwner {\n        emit IncomeMakerProportionChanged(incomeMakerProportion, _proportion);\n        incomeMakerProportion = _proportion;\n    }\n\n    /**\n     * @notice Set income maker address\n     * @dev Only callable by the owner\n     * @param _incomeMaker New income maker address\n     */\n    function setIncomeMakerAddress(address _incomeMaker) external onlyOwner {\n        emit IncomeMakerAddressChanged(incomeMaker, _incomeMaker);\n        incomeMaker = _incomeMaker;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Main Functions *********************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    function createPair(address _tokenA, address _tokenB)\n        external\n        override\n        returns (address _pair)\n    {\n        require(_tokenA != _tokenB, \"FurionSwap: IDENTICAL_ADDRESSES\");\n\n        (address token0, address token1) = _tokenA < _tokenB\n            ? (_tokenA, _tokenB)\n            : (_tokenB, _tokenA);\n\n        require(token0 != address(0), \"FurionSwap: ZERO_ADDRESS\");\n        require(\n            getPair[token0][token1] == address(0),\n            \"FurionSwap: PAIR_EXISTS\"\n        ); // single check is sufficient\n\n        bytes memory bytecode = type(FurionSwapPair).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        assembly {\n            _pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        FurionSwapPair(_pair).initialize(token0, token1);\n\n        // populate mapping in the reverse direction\n        getPair[token0][token1] = _pair;\n        getPair[token1][token0] = _pair;\n\n        allPairs.push(_pair);\n\n        emit PairCreated(token0, token1, _pair, allPairs.length);\n    }\n}\n"
    },
    "contracts/mock/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @notice MockERC20 for test\n * @dev MockUSD has 6 decimals, this contract is 18 decimals\n */\ncontract MockERC20 is ERC20 {\n    constructor() ERC20(\"MockERC20\", \"ERC20\") {}\n\n    // Everyone can mint, have fun for test\n    function mint(address _account, uint256 _amount) public {\n        _mint(_account, _amount);\n    }\n}\n"
    },
    "contracts/utils/interfaces/IERC20PermitWithMultipleMinters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\n\ninterface IERC20PermitWithMultipleMinters is IERC20, IERC20Permit {\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Functions ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n    /**\n     * @notice Add a new minter into the minterList\n     * @param _newMinter Address of the new minter\n     */\n    function addMinter(address _newMinter) external;\n\n    /**\n     * @notice Remove a minter from the minterList\n     * @param _oldMinter Address of the minter to be removed\n     */\n    function removeMinter(address _oldMinter) external;\n\n    /**\n     * @notice Add a new burner into the burnerList\n     * @param _newBurner Address of the new burner\n     */\n    function addBurner(address _newBurner) external;\n\n    /**\n     * @notice Remove a minter from the minterList\n     * @param _oldBurner Address of the minter to be removed\n     */\n    function removeBurner(address _oldBurner) external;\n}\n"
    },
    "contracts/Greeter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"hardhat/console.sol\";\n\nerror GreeterError();\n\ncontract Greeter {\n    string public greeting;\n\n    constructor(string memory _greeting) {\n        console.log(\"Deploying a Greeter with greeting:\", _greeting);\n        greeting = _greeting;\n    }\n\n    function greet() public view returns (string memory) {\n        return greeting;\n    }\n\n    function setGreeting(string memory _greeting) public {\n        console.log(\"Changing greeting from '%s' to '%s'\", greeting, _greeting);\n        greeting = _greeting;\n    }\n\n    function throwError() external pure {\n        revert GreeterError();\n    }\n}\n"
    },
    "contracts/test-only/FurionTokenTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\n\ncontract FurionTokenTest is ERC20Permit {\n    constructor(address[] memory _testers)\n        ERC20Permit(\"FurionTokenTest\")\n        ERC20(\"FurionTokenTest\", \"FUR\")\n    {\n        for (uint256 i = 0; i < _testers.length; ) {\n            _mint(_testers[i], 1000 ether);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "contracts/proxy/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts v4.4.0 (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(\n            _ADMIN_SLOT ==\n                bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1)\n        );\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation()\n        external\n        ifAdmin\n        returns (address implementation_)\n    {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data)\n        external\n        payable\n        ifAdmin\n    {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(\n            msg.sender != _getAdmin(),\n            \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\"\n        );\n        super._beforeFallback();\n    }\n}\n"
    },
    "contracts/proxy/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts v4.4.0 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.10;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../utils/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    constructor() Ownable(msg.sender) {}\n\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy)\n        public\n        view\n        virtual\n        returns (address)\n    {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(\n            hex\"5c60da1b\"\n        );\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy)\n        public\n        view\n        virtual\n        returns (address)\n    {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(\n            hex\"f851a440\"\n        );\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(\n        TransparentUpgradeableProxy proxy,\n        address newAdmin\n    ) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation)\n        public\n        virtual\n        onlyOwner\n    {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "contracts/utils/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"./Context.sol\";\n\n/**\n * @dev The owner can be set during deployment, not default to be msg.sender\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor(address _initialOwner) {\n        _transferOwnership(_initialOwner);\n    }\n\n    /**\n     * @notice Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @notice Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @notice Leaves the contract without owner. It will not be possible to call\n     *         `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * @dev    Renouncing ownership will leave the contract without an owner,\n     *         thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\n     * @dev    Can only be called by the current owner.\n     * @param  newOwner Address of the new owner\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\n     * @dev    Internal function without access restriction.\n     * @param  newOwner Address of the new owner\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.10;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/proxy/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init(address _initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(_initialOwner);\n    }\n\n    function __Ownable_init_unchained(address _initialOwner)\n        internal\n        onlyInitializing\n    {\n        _transferOwnership(_initialOwner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(\n            _initializing ? _isConstructor() : !_initialized,\n            \"Initializable: contract is already initialized\"\n        );\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "contracts/money-market/NormalInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IInterestRateModel.sol\";\n\ncontract NormalInterestRateModel is IInterestRateModel {\n    bool public constant IS_INTEREST_RATE_MODEL = true;\n\n    uint256 private constant BASE = 1e18;\n\n    /**\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\n     */\n    uint256 public constant blocksPerYear = 2102400;\n\n    /**\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\n     */\n    uint256 public multiplierPerBlock;\n\n    /**\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\n     */\n    uint256 public baseRatePerBlock;\n\n    event NewInterestParams(\n        uint256 baseRatePerBlock,\n        uint256 multiplierPerBlock\n    );\n\n    /**\n     * @notice Construct an interest rate model\n     * @param _baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\n     * @param _multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\n     */\n    constructor(uint256 _baseRatePerYear, uint256 _multiplierPerYear) {\n        baseRatePerBlock = _baseRatePerYear / blocksPerYear;\n        multiplierPerBlock = _multiplierPerYear / blocksPerYear;\n\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock);\n    }\n\n    function isInterestRateModel() public pure returns (bool) {\n        return IS_INTEREST_RATE_MODEL;\n    }\n\n    /**\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\n     * @param _cash The amount of cash in the market\n     * @param _borrows The amount of borrows in the market\n     * @param _reserves The amount of reserves in the market (currently unused)\n     * @return The utilization rate as a mantissa between [0, BASE]\n     */\n    function utilizationRate(\n        uint256 _cash,\n        uint256 _borrows,\n        uint256 _reserves\n    ) public pure returns (uint256) {\n        // Utilization rate is 0 when there are no borrows\n        if (_borrows == 0) {\n            return 0;\n        }\n\n        return (_borrows * BASE) / (_cash + _borrows - _reserves);\n    }\n\n    /**\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\n     * @param _cash The amount of cash in the market\n     * @param _borrows The amount of borrows in the market\n     * @param _reserves The amount of reserves in the market\n     * @return The borrow rate percentage per block as a mantissa (scaled by BASE)\n     */\n    function getBorrowRate(\n        uint256 _cash,\n        uint256 _borrows,\n        uint256 _reserves\n    ) public view override returns (uint256) {\n        uint256 ur = utilizationRate(_cash, _borrows, _reserves);\n        return ((ur * multiplierPerBlock) / BASE) + baseRatePerBlock;\n    }\n\n    /**\n     * @notice Calculates the current supply rate per block\n     * @param _cash The amount of cash in the market\n     * @param _borrows The amount of borrows in the market\n     * @param _reserves The amount of reserves in the market\n     * @param _reserveFactorMantissa The current reserve factor for the market\n     * @return The supply rate percentage per block as a mantissa (scaled by BASE)\n     */\n    function getSupplyRate(\n        uint256 _cash,\n        uint256 _borrows,\n        uint256 _reserves,\n        uint256 _reserveFactorMantissa\n    ) public view override returns (uint256) {\n        uint256 oneMinusReserveFactor = BASE - _reserveFactorMantissa;\n        uint256 borrowRate = getBorrowRate(_cash, _borrows, _reserves);\n        uint256 rateToPool = (borrowRate * oneMinusReserveFactor) / BASE;\n        return\n            (utilizationRate(_cash, _borrows, _reserves) * rateToPool) / BASE;\n    }\n}\n"
    },
    "contracts/money-market/JumpInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IInterestRateModel.sol\";\n\ncontract JumpInterestRateModel is Ownable, IInterestRateModel {\n    bool public constant IS_INTEREST_RATE_MODEL = true;\n\n    uint256 private constant BASE = 1e18;\n\n    /**\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\n     */\n    uint256 public constant blocksPerYear = 2102400;\n\n    /**\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\n     */\n    uint256 public multiplierPerBlock;\n\n    /**\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\n     */\n    uint256 public baseRatePerBlock;\n\n    /**\n     * @notice The multiplierPerBlock after hitting a specified utilization point\n     */\n    uint256 public jumpMultiplierPerBlock;\n\n    /**\n     * @notice The utilization point at which the jump multiplier is applied\n     */\n    uint256 public kink;\n\n    event NewInterestParams(\n        uint256 baseRatePerBlock,\n        uint256 multiplierPerBlock,\n        uint256 jumpMultiplierPerBlock,\n        uint256 kink\n    );\n\n    /**\n     * @notice Construct an interest rate model\n     * @param _baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\n     * @param _multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\n     * @param _jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n     * @param _kink The utilization point at which the jump multiplier is applied\n     */\n    constructor(\n        uint256 _baseRatePerYear,\n        uint256 _multiplierPerYear,\n        uint256 _jumpMultiplierPerYear,\n        uint256 _kink\n    ) {\n        baseRatePerBlock = _baseRatePerYear / blocksPerYear;\n        multiplierPerBlock =\n            (_multiplierPerYear * BASE) /\n            (blocksPerYear * _kink);\n        jumpMultiplierPerBlock = _jumpMultiplierPerYear / blocksPerYear;\n        kink = _kink;\n\n        emit NewInterestParams(\n            baseRatePerBlock,\n            multiplierPerBlock,\n            jumpMultiplierPerBlock,\n            kink\n        );\n    }\n\n    function isInterestRateModel() public pure returns (bool) {\n        return IS_INTEREST_RATE_MODEL;\n    }\n\n    /**\n     * @notice Internal function to update the parameters of the interest rate model\n     * @param _baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\n     * @param _multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\n     * @param _jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n     * @param _kink The utilization point at which the jump multiplier is applied\n     */\n    function updateJumpRateModel(\n        uint256 _baseRatePerYear,\n        uint256 _multiplierPerYear,\n        uint256 _jumpMultiplierPerYear,\n        uint256 _kink\n    ) external onlyOwner {\n        baseRatePerBlock = _baseRatePerYear / blocksPerYear;\n        multiplierPerBlock =\n            (_multiplierPerYear * BASE) /\n            (blocksPerYear * _kink);\n        jumpMultiplierPerBlock = _jumpMultiplierPerYear / blocksPerYear;\n        kink = _kink;\n\n        emit NewInterestParams(\n            baseRatePerBlock,\n            multiplierPerBlock,\n            jumpMultiplierPerBlock,\n            kink\n        );\n    }\n\n    /**\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\n     * @param _cash The amount of cash in the market\n     * @param _borrows The amount of borrows in the market\n     * @param _reserves The amount of reserves in the market (currently unused)\n     * @return The utilization rate as a mantissa between [0, BASE]\n     */\n    function utilizationRate(\n        uint256 _cash,\n        uint256 _borrows,\n        uint256 _reserves\n    ) public pure returns (uint256) {\n        // Utilization rate is 0 when there are no borrows\n        if (_borrows == 0) {\n            return 0;\n        }\n\n        return (_borrows * BASE) / (_cash + _borrows - _reserves);\n    }\n\n    /**\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\n     * @param _cash The amount of cash in the market\n     * @param _borrows The amount of borrows in the market\n     * @param _reserves The amount of reserves in the market\n     * @return The borrow rate percentage per block as a mantissa (scaled by BASE)\n     */\n    function getBorrowRate(\n        uint256 _cash,\n        uint256 _borrows,\n        uint256 _reserves\n    ) public view returns (uint256) {\n        uint256 util = utilizationRate(_cash, _borrows, _reserves);\n\n        if (util <= kink) {\n            return ((util * multiplierPerBlock) / BASE) + baseRatePerBlock;\n        } else {\n            uint256 normalRate = ((kink * multiplierPerBlock) / BASE) +\n                baseRatePerBlock;\n            uint256 excessUtil = util - kink;\n            return ((excessUtil * jumpMultiplierPerBlock) / BASE) + normalRate;\n        }\n    }\n\n    /**\n     * @notice Calculates the current supply rate per block\n     * @param _cash The amount of cash in the market\n     * @param _borrows The amount of borrows in the market\n     * @param _reserves The amount of reserves in the market\n     * @param _reserveFactorMantissa The current reserve factor for the market\n     * @return The supply rate percentage per block as a mantissa (scaled by BASE)\n     */\n    function getSupplyRate(\n        uint256 _cash,\n        uint256 _borrows,\n        uint256 _reserves,\n        uint256 _reserveFactorMantissa\n    ) public view returns (uint256) {\n        uint256 oneMinusReserveFactor = BASE - _reserveFactorMantissa;\n        uint256 borrowRate = getBorrowRate(_cash, _borrows, _reserves);\n        uint256 rateToPool = (borrowRate * oneMinusReserveFactor) / BASE;\n        return\n            (utilizationRate(_cash, _borrows, _reserves) * rateToPool) / BASE;\n    }\n}\n"
    },
    "contracts/money-market/FEther.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./TokenBase.sol\";\n\ncontract FEther is TokenBase {\n    function initialize(\n        address _riskManager,\n        address _interestRateModel,\n        address _priceOracle,\n        address _checker\n    ) public initializer {\n        __TokenBase_init(\n            _riskManager,\n            _interestRateModel,\n            _priceOracle,\n            _checker,\n            \"Furion Ether\",\n            \"fETH\"\n        );\n    }\n\n    /**\n     * @notice Sender supplies ETH into the market and receives fETH in exchange\n     * @dev Reverts upon any failure\n     */\n    function supply() external payable {\n        // Params: supplier, supply amount\n        supplyInternal(msg.sender, msg.value);\n    }\n\n    /**\n     * @notice Sender redeems fETH in exchange for ETH.\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param _redeemTokens The number of fETH to redeem into underlying\n     */\n    function redeem(uint256 _redeemTokens) external {\n        // Params: redeemer, tokens supplied for redemption, amount of underlying to receive\n        redeemInternal(msg.sender, _redeemTokens, 0);\n    }\n\n    /**\n     * @notice Sender redeems fETH in exchange for a specified amount of ETH.\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param _redeemAmount The amount of ETH to redeem\n     */\n    function redeemUnderlying(uint256 _redeemAmount) external {\n        // Params: redeemer, tokens supplied for redemption, amount of underlying to receive\n        redeemInternal(msg.sender, 0, _redeemAmount);\n    }\n\n    /**\n     * @notice Sender borrows ETH from the protocol to their own address\n     * @param _borrowAmount The amount of ETH to borrow\n     */\n    function borrow(uint256 _borrowAmount) external {\n        // Params: borrower, borrow amount\n        borrowInternal(msg.sender, _borrowAmount);\n    }\n\n    /**\n     * @notice Sender repays their own borrow\n     * @dev Reverts upon any failure\n     */\n    function repayBorrow() external payable {\n        // Params: payer, borrower, repay amount\n        repayBorrowInternal(msg.sender, msg.sender, msg.value);\n    }\n\n    /**\n     * @notice Sender repays a borrow belonging to borrower\n     * @dev Reverts upon any failure\n     * @param _borrower the account with the debt being payed off\n     */\n    function repayBorrowBehalf(address _borrower) external payable {\n        // Params: payer, borrower, repay amount\n        repayBorrowInternal(msg.sender, _borrower, msg.value);\n    }\n\n    function liquidateBorrow(address _borrower, address _fTokenCollateral)\n        external\n        payable\n    {\n        liquidateBorrowInternal(\n            msg.sender,\n            _borrower,\n            msg.value,\n            _fTokenCollateral\n        );\n    }\n\n    /******************************* Safe Token *******************************/\n\n    function doTransferIn(address _from, uint256 _amount) internal override {\n        require(msg.sender == _from, \"FEther: Not owner of account\");\n        require(msg.value == _amount, \"FEther: Not enough ETH supplied\");\n\n        totalCash += _amount;\n    }\n\n    function doTransferOut(address payable _to, uint256 _amount)\n        internal\n        override\n    {\n        _to.transfer(_amount);\n\n        totalCash -= _amount;\n    }\n}\n"
    },
    "contracts/aggregate-pool/FurionPricingOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract FurionPricingOracle is Ownable {\n    mapping(bytes32 => AggregatorV3Interface) priceFeed;\n\n    mapping(address => uint256[]) public prices;\n\n    // 0: Normal - 1: Mid - 2: Rare\n    // NFT token address to token id to price\n    mapping(address => mapping(uint256 => uint256)) public priceLevel;\n    mapping(address => bytes32) public quoteToken;\n\n    event PriceUpdated(address token, uint256 level, uint256 price);\n\n    function setPriceFeed(string calldata _name, address _feed)\n        external\n        onlyOwner\n    {\n        bytes32 tokenId = keccak256(abi.encodePacked(_name));\n\n        // Set price feed info\n        priceFeed[tokenId] = AggregatorV3Interface(_feed);\n    }\n\n    function getNFTPrice(address _token, uint256 _id)\n        external\n        view\n        returns (uint256 price)\n    {\n        uint256 level = getPriceLevel(_token, _id);\n\n        return prices[_token][level];\n    }\n\n    function getPriceLevel(address _token, uint256 _id)\n        public\n        view\n        returns (uint256)\n    {\n        return priceLevel[_token][_id];\n    }\n\n    // update price to all levels under certain token address\n    function updatePrices(address _token, uint256[] memory _prices)\n        public\n        onlyOwner\n    {\n        uint256 length = prices[_token].length;\n\n        require(length > 0, \"Price not initialized\");\n\n        require(length == _prices.length, \"Length mismatch\");\n\n        for (uint256 i; i < length; ) {\n            prices[_token][i] = _prices[i];\n\n            unchecked {\n                ++i;\n            }\n\n            emit PriceUpdated(_token, i, _prices[i]);\n        }\n    }\n\n    function initPrice(address _token, uint256 _levels) external onlyOwner {\n        require(prices[_token].length == 0, \"Already initialized\");\n\n        for (uint256 i; i < _levels; ) {\n            prices[_token].push(0);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function updatePrice(\n        address _token,\n        uint256 _level,\n        uint256 _price\n    ) public onlyOwner {\n        require(prices[_token].length > 0, \"Price not initialized\");\n\n        prices[_token][_level] = _price;\n        emit PriceUpdated(_token, _level, _price);\n    }\n\n    function _getChainlinkPrice(bytes32 _id) internal view returns (uint256) {\n        (, int256 price, , , ) = priceFeed[_id].latestRoundData();\n\n        return uint256(price);\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/libraries/PublicLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nstruct Ape {\n    uint256 id;\n}\n\nlibrary PublicLib {\n    function mul(Ape storage x, uint256 y) external {\n        x.id += y;\n    }\n}\n"
    },
    "contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @notice This safecast is from openzeppelin v4.4.0\n *         https://github.com/OpenZeppelin/openzeppelin-contracts\n */\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(\n            value <= type(uint224).max,\n            \"SafeCast: value doesn't fit in 224 bits\"\n        );\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(\n            value <= type(uint128).max,\n            \"SafeCast: value doesn't fit in 128 bits\"\n        );\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(\n            value <= type(uint96).max,\n            \"SafeCast: value doesn't fit in 96 bits\"\n        );\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(\n            value <= type(uint64).max,\n            \"SafeCast: value doesn't fit in 64 bits\"\n        );\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(\n            value <= type(uint32).max,\n            \"SafeCast: value doesn't fit in 32 bits\"\n        );\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(\n            value <= type(uint16).max,\n            \"SafeCast: value doesn't fit in 16 bits\"\n        );\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(\n            value <= type(uint8).max,\n            \"SafeCast: value doesn't fit in 8 bits\"\n        );\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(\n            value >= type(int128).min && value <= type(int128).max,\n            \"SafeCast: value doesn't fit in 128 bits\"\n        );\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(\n            value >= type(int64).min && value <= type(int64).max,\n            \"SafeCast: value doesn't fit in 64 bits\"\n        );\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(\n            value >= type(int32).min && value <= type(int32).max,\n            \"SafeCast: value doesn't fit in 32 bits\"\n        );\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(\n            value >= type(int16).min && value <= type(int16).max,\n            \"SafeCast: value doesn't fit in 16 bits\"\n        );\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(\n            value >= type(int8).min && value <= type(int8).max,\n            \"SafeCast: value doesn't fit in 8 bits\"\n        );\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(\n            value <= uint256(type(int256).max),\n            \"SafeCast: value doesn't fit in an int256\"\n        );\n        return int256(value);\n    }\n}\n"
    },
    "contracts/libraries/SafePRBMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@prb/math/contracts/PRBMath.sol\";\n\n/**\n * @notice This prb-math version is 2.4.1\n *         https://github.com/hifi-finance/prb-math\n */\n\n/// @title PRBMathUD60x18\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\n/// maximum values permitted by the Solidity type uint256.\nlibrary SafePRBMath {\n    /// @dev Half the SCALE number.\n    uint256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\n    uint256 internal constant LOG2_E = 1_442695040888963407;\n\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_UD60x18 =\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\n\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_WHOLE_UD60x18 =\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // The operations can never overflow.\n        unchecked {\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\n        }\n    }\n\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function ceil(uint256 x) internal pure returns (uint256 result) {\n        if (x > MAX_WHOLE_UD60x18) {\n            revert PRBMathUD60x18__CeilOverflow(x);\n        }\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"SCALE - remainder\" but faster.\n            let delta := sub(SCALE, remainder)\n\n            // Equivalent to \"x + delta * (remainder > 0 ? 1 : 0)\" but faster.\n            result := add(x, mul(delta, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\n    ///\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    ///\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDiv(x, SCALE, y);\n    }\n\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\n    function e() internal pure returns (uint256 result) {\n        result = 2_718281828459045235;\n    }\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 133.084258667509499441.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp(uint256 x) internal pure returns (uint256 result) {\n        // Without this check, the value passed to \"exp2\" would be greater than 192.\n        if (x >= 133_084258667509499441) {\n            revert PRBMathUD60x18__ExpInputTooBig(x);\n        }\n\n        // Do the fixed-point multiplication inline to save gas.\n        unchecked {\n            uint256 doubleScaleProduct = x * LOG2_E;\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\n        }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 192 or less.\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n        if (x >= 192e18) {\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\n        }\n\n        unchecked {\n            // Convert x to the 192.64-bit fixed-point format.\n            uint256 x192x64 = (x << 64) / SCALE;\n\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\n            result = PRBMath.exp2(x192x64);\n        }\n    }\n\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function floor(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"x - remainder * (remainder > 0 ? 1 : 0)\" but faster.\n            result := sub(x, mul(remainder, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Yields the excess beyond the floor of x.\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\n    function frac(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            result := mod(x, SCALE)\n        }\n    }\n\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\n    ///\n    /// @dev Requirements:\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\n    ///\n    /// @param x The basic integer to convert.\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__FromUintOverflow(x);\n            }\n            result = x * SCALE;\n        }\n    }\n\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\n    ///\n    /// @dev Requirements:\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\n    ///\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        unchecked {\n            // Checking for overflow this way is faster than letting Solidity do it.\n            uint256 xy = x * y;\n            if (xy / x != y) {\n                revert PRBMathUD60x18__GmOverflow(x, y);\n            }\n\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\n            // during multiplication. See the comments within the \"sqrt\" function.\n            result = PRBMath.sqrt(xy);\n        }\n    }\n\n    /// @notice Calculates 1 / x, rounding toward zero.\n    ///\n    /// @dev Requirements:\n    /// - x cannot be zero.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\n    function inv(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // 1e36 is SCALE * SCALE.\n            result = 1e36 / x;\n        }\n    }\n\n    /// @notice Calculates the natural logarithm of x.\n    ///\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\n    function ln(uint256 x) internal pure returns (uint256 result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 196205294292027477728.\n        unchecked {\n            result = (log2(x) * SCALE) / LOG2_E;\n        }\n    }\n\n    /// @notice Calculates the common logarithm of x.\n    ///\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log10(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n\n        // Note that the \"mul\" in this block is the assembly multiplication operation, not the \"mul\" function defined\n        // in this contract.\n        // prettier-ignore\n        assembly {\n            switch x\n            case 1 { result := mul(SCALE, sub(0, 18)) }\n            case 10 { result := mul(SCALE, sub(1, 18)) }\n            case 100 { result := mul(SCALE, sub(2, 18)) }\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\n            case 1000000000000000000 { result := 0 }\n            case 10000000000000000000 { result := SCALE }\n            case 100000000000000000000 { result := mul(SCALE, 2) }\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\n            default {\n                result := MAX_UD60x18\n            }\n        }\n\n        if (result == MAX_UD60x18) {\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\n            unchecked {\n                result = (log2(x) * SCALE) / 3_321928094887362347;\n            }\n        }\n    }\n\n    /// @notice Calculates the binary logarithm of x.\n    ///\n    /// @dev Based on the iterative approximation algorithm.\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n    ///\n    /// Requirements:\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\n    ///\n    /// Caveats:\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log2(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n        unchecked {\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\n\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255 and SCALE is 1e18.\n            result = n * SCALE;\n\n            // This is y = x * 2^(-n).\n            uint256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == SCALE) {\n                return result;\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\n                y = (y * y) / SCALE;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * SCALE) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    result += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n        }\n    }\n\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\n    /// fixed-point number.\n    /// @dev See the documentation for the \"PRBMath.mulDivFixedPoint\" function.\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDivFixedPoint(x, y);\n    }\n\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\n    function pi() internal pure returns (uint256 result) {\n        result = 3_141592653589793238;\n    }\n\n    /// @notice Raises x to the power of y.\n    ///\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\n    ///\n    /// Requirements:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    ///\n    /// Caveats:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            result = y == 0 ? SCALE : uint256(0);\n        } else {\n            result = exp2(mul(log2(x), y));\n        }\n    }\n\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\n    /// famous algorithm \"exponentiation by squaring\".\n    ///\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    ///\n    /// Requirements:\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// Caveats:\n    /// - All from \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The exponent as an uint256.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // Calculate the first iteration of the loop in advance.\n        result = y & 1 > 0 ? x : SCALE;\n\n        // Equivalent to \"for(y /= 2; y > 0; y /= 2)\" but faster.\n        for (y >>= 1; y > 0; y >>= 1) {\n            x = PRBMath.mulDivFixedPoint(x, x);\n\n            // Equivalent to \"y % 2 == 1\" but faster.\n            if (y & 1 > 0) {\n                result = PRBMath.mulDivFixedPoint(result, x);\n            }\n        }\n    }\n\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\n    function scale() internal pure returns (uint256 result) {\n        result = SCALE;\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Requirements:\n    /// - x must be less than MAX_UD60x18 / SCALE.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__SqrtOverflow(x);\n            }\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\n            result = PRBMath.sqrt(x * SCALE);\n        }\n    }\n\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\n    /// @return result The same number in basic integer form.\n    function toUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            result = x / SCALE;\n        }\n    }\n}\n"
    },
    "@prb/math/contracts/PRBMath.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\n\n/// @notice Emitted when one of the inputs is type(int256).min.\nerror PRBMath__MulDivSignedInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows int256.\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is MIN_SD59x18.\nerror PRBMathSD59x18__AbsInputTooSmall();\n\n/// @notice Emitted when ceiling a number overflows SD59x18.\nerror PRBMathSD59x18__CeilOverflow(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__DivInputTooSmall();\n\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\n\n/// @notice Emitted when flooring a number underflows SD59x18.\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\n\n/// @notice Emitted when the product of the inputs is negative.\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\n\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\n\n/// @notice Emitted when the input is less than or equal to zero.\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__MulInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is negative.\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\n\n/// @notice Emitted when the calculating the square root overflows SD59x18.\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\n\n/// @notice Emitted when addition overflows UD60x18.\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when ceiling a number overflows UD60x18.\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\n\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when the input is less than 1.\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\n\n/// @notice Emitted when the calculating the square root overflows UD60x18.\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\n\n/// @notice Emitted when subtraction underflows UD60x18.\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\n\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\nlibrary PRBMath {\n    /// STRUCTS ///\n\n    struct SD59x18 {\n        int256 value;\n    }\n\n    struct UD60x18 {\n        uint256 value;\n    }\n\n    /// STORAGE ///\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @dev Largest power of two divisor of SCALE.\n    uint256 internal constant SCALE_LPOTD = 262144;\n\n    /// @dev SCALE inverted mod 2^256.\n    uint256 internal constant SCALE_INVERSE =\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\n\n    /// FUNCTIONS ///\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    /// @dev Has to use 192.64-bit fixed-point numbers.\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // Start from 0.5 in the 192.64-bit fixed-point format.\n            result = 0x800000000000000000000000000000000000000000000000;\n\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\n            if (x & 0x8000000000000000 > 0) {\n                result = (result * 0x16A09E667F3BCC909) >> 64;\n            }\n            if (x & 0x4000000000000000 > 0) {\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\n            }\n            if (x & 0x2000000000000000 > 0) {\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\n            }\n            if (x & 0x1000000000000000 > 0) {\n                result = (result * 0x10B5586CF9890F62A) >> 64;\n            }\n            if (x & 0x800000000000000 > 0) {\n                result = (result * 0x1059B0D31585743AE) >> 64;\n            }\n            if (x & 0x400000000000000 > 0) {\n                result = (result * 0x102C9A3E778060EE7) >> 64;\n            }\n            if (x & 0x200000000000000 > 0) {\n                result = (result * 0x10163DA9FB33356D8) >> 64;\n            }\n            if (x & 0x100000000000000 > 0) {\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\n            }\n            if (x & 0x80000000000000 > 0) {\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\n            }\n            if (x & 0x40000000000000 > 0) {\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\n            }\n            if (x & 0x20000000000000 > 0) {\n                result = (result * 0x100162F3904051FA1) >> 64;\n            }\n            if (x & 0x10000000000000 > 0) {\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\n            }\n            if (x & 0x8000000000000 > 0) {\n                result = (result * 0x100058BA01FB9F96D) >> 64;\n            }\n            if (x & 0x4000000000000 > 0) {\n                result = (result * 0x10002C5CC37DA9492) >> 64;\n            }\n            if (x & 0x2000000000000 > 0) {\n                result = (result * 0x1000162E525EE0547) >> 64;\n            }\n            if (x & 0x1000000000000 > 0) {\n                result = (result * 0x10000B17255775C04) >> 64;\n            }\n            if (x & 0x800000000000 > 0) {\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\n            }\n            if (x & 0x400000000000 > 0) {\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\n            }\n            if (x & 0x200000000000 > 0) {\n                result = (result * 0x10000162E43F4F831) >> 64;\n            }\n            if (x & 0x100000000000 > 0) {\n                result = (result * 0x100000B1721BCFC9A) >> 64;\n            }\n            if (x & 0x80000000000 > 0) {\n                result = (result * 0x10000058B90CF1E6E) >> 64;\n            }\n            if (x & 0x40000000000 > 0) {\n                result = (result * 0x1000002C5C863B73F) >> 64;\n            }\n            if (x & 0x20000000000 > 0) {\n                result = (result * 0x100000162E430E5A2) >> 64;\n            }\n            if (x & 0x10000000000 > 0) {\n                result = (result * 0x1000000B172183551) >> 64;\n            }\n            if (x & 0x8000000000 > 0) {\n                result = (result * 0x100000058B90C0B49) >> 64;\n            }\n            if (x & 0x4000000000 > 0) {\n                result = (result * 0x10000002C5C8601CC) >> 64;\n            }\n            if (x & 0x2000000000 > 0) {\n                result = (result * 0x1000000162E42FFF0) >> 64;\n            }\n            if (x & 0x1000000000 > 0) {\n                result = (result * 0x10000000B17217FBB) >> 64;\n            }\n            if (x & 0x800000000 > 0) {\n                result = (result * 0x1000000058B90BFCE) >> 64;\n            }\n            if (x & 0x400000000 > 0) {\n                result = (result * 0x100000002C5C85FE3) >> 64;\n            }\n            if (x & 0x200000000 > 0) {\n                result = (result * 0x10000000162E42FF1) >> 64;\n            }\n            if (x & 0x100000000 > 0) {\n                result = (result * 0x100000000B17217F8) >> 64;\n            }\n            if (x & 0x80000000 > 0) {\n                result = (result * 0x10000000058B90BFC) >> 64;\n            }\n            if (x & 0x40000000 > 0) {\n                result = (result * 0x1000000002C5C85FE) >> 64;\n            }\n            if (x & 0x20000000 > 0) {\n                result = (result * 0x100000000162E42FF) >> 64;\n            }\n            if (x & 0x10000000 > 0) {\n                result = (result * 0x1000000000B17217F) >> 64;\n            }\n            if (x & 0x8000000 > 0) {\n                result = (result * 0x100000000058B90C0) >> 64;\n            }\n            if (x & 0x4000000 > 0) {\n                result = (result * 0x10000000002C5C860) >> 64;\n            }\n            if (x & 0x2000000 > 0) {\n                result = (result * 0x1000000000162E430) >> 64;\n            }\n            if (x & 0x1000000 > 0) {\n                result = (result * 0x10000000000B17218) >> 64;\n            }\n            if (x & 0x800000 > 0) {\n                result = (result * 0x1000000000058B90C) >> 64;\n            }\n            if (x & 0x400000 > 0) {\n                result = (result * 0x100000000002C5C86) >> 64;\n            }\n            if (x & 0x200000 > 0) {\n                result = (result * 0x10000000000162E43) >> 64;\n            }\n            if (x & 0x100000 > 0) {\n                result = (result * 0x100000000000B1721) >> 64;\n            }\n            if (x & 0x80000 > 0) {\n                result = (result * 0x10000000000058B91) >> 64;\n            }\n            if (x & 0x40000 > 0) {\n                result = (result * 0x1000000000002C5C8) >> 64;\n            }\n            if (x & 0x20000 > 0) {\n                result = (result * 0x100000000000162E4) >> 64;\n            }\n            if (x & 0x10000 > 0) {\n                result = (result * 0x1000000000000B172) >> 64;\n            }\n            if (x & 0x8000 > 0) {\n                result = (result * 0x100000000000058B9) >> 64;\n            }\n            if (x & 0x4000 > 0) {\n                result = (result * 0x10000000000002C5D) >> 64;\n            }\n            if (x & 0x2000 > 0) {\n                result = (result * 0x1000000000000162E) >> 64;\n            }\n            if (x & 0x1000 > 0) {\n                result = (result * 0x10000000000000B17) >> 64;\n            }\n            if (x & 0x800 > 0) {\n                result = (result * 0x1000000000000058C) >> 64;\n            }\n            if (x & 0x400 > 0) {\n                result = (result * 0x100000000000002C6) >> 64;\n            }\n            if (x & 0x200 > 0) {\n                result = (result * 0x10000000000000163) >> 64;\n            }\n            if (x & 0x100 > 0) {\n                result = (result * 0x100000000000000B1) >> 64;\n            }\n            if (x & 0x80 > 0) {\n                result = (result * 0x10000000000000059) >> 64;\n            }\n            if (x & 0x40 > 0) {\n                result = (result * 0x1000000000000002C) >> 64;\n            }\n            if (x & 0x20 > 0) {\n                result = (result * 0x10000000000000016) >> 64;\n            }\n            if (x & 0x10 > 0) {\n                result = (result * 0x1000000000000000B) >> 64;\n            }\n            if (x & 0x8 > 0) {\n                result = (result * 0x10000000000000006) >> 64;\n            }\n            if (x & 0x4 > 0) {\n                result = (result * 0x10000000000000003) >> 64;\n            }\n            if (x & 0x2 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n            if (x & 0x1 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n\n            // We're doing two things at the same time:\n            //\n            //   1. Multiply the result by 2^n + 1, where \"2^n\" is the integer part and the one is added to account for\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\n            //      rather than 192.\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\n            //\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \"ip\" is the integer part \"2^n\".\n            result *= SCALE;\n            result >>= (191 - (x >> 64));\n        }\n    }\n\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\n    /// @dev See the note on msb in the \"Find First Set\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\n    /// @param x The uint256 number for which to find the index of the most significant bit.\n    /// @return msb The index of the most significant bit as an uint256.\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        if (x >= 2**128) {\n            x >>= 128;\n            msb += 128;\n        }\n        if (x >= 2**64) {\n            x >>= 64;\n            msb += 64;\n        }\n        if (x >= 2**32) {\n            x >>= 32;\n            msb += 32;\n        }\n        if (x >= 2**16) {\n            x >>= 16;\n            msb += 16;\n        }\n        if (x >= 2**8) {\n            x >>= 8;\n            msb += 8;\n        }\n        if (x >= 2**4) {\n            x >>= 4;\n            msb += 4;\n        }\n        if (x >= 2**2) {\n            x >>= 2;\n            msb += 2;\n        }\n        if (x >= 2**1) {\n            // No need to shift x any more.\n            msb += 1;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The multiplicand as an uint256.\n    /// @param y The multiplier as an uint256.\n    /// @param denominator The divisor as an uint256.\n    /// @return result The result as an uint256.\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            unchecked {\n                result = prod0 / denominator;\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        if (prod1 >= denominator) {\n            revert PRBMath__MulDivOverflow(prod1, denominator);\n        }\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        unchecked {\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 lpotdod = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by lpotdod.\n                denominator := div(denominator, lpotdod)\n\n                // Divide [prod1 prod0] by lpotdod.\n                prod0 := div(prod0, lpotdod)\n\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * lpotdod;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷1e18) with full precision.\n    ///\n    /// @dev Variant of \"mulDiv\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\n    /// being rounded to 1e-18.  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717.\n    ///\n    /// Requirements:\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\n    ///     1. x * y = type(uint256).max * SCALE\n    ///     2. (x * y) % SCALE >= SCALE / 2\n    ///\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        uint256 prod0;\n        uint256 prod1;\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        if (prod1 >= SCALE) {\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\n        }\n\n        uint256 remainder;\n        uint256 roundUpUnit;\n        assembly {\n            remainder := mulmod(x, y, SCALE)\n            roundUpUnit := gt(remainder, 499999999999999999)\n        }\n\n        if (prod1 == 0) {\n            unchecked {\n                result = (prod0 / SCALE) + roundUpUnit;\n                return result;\n            }\n        }\n\n        assembly {\n            result := add(\n                mul(\n                    or(\n                        div(sub(prod0, remainder), SCALE_LPOTD),\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\n                    ),\n                    SCALE_INVERSE\n                ),\n                roundUpUnit\n            )\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev An extension of \"mulDiv\" for signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - None of the inputs can be type(int256).min.\n    /// - The result must fit within int256.\n    ///\n    /// @param x The multiplicand as an int256.\n    /// @param y The multiplier as an int256.\n    /// @param denominator The divisor as an int256.\n    /// @return result The result as an int256.\n    function mulDivSigned(\n        int256 x,\n        int256 y,\n        int256 denominator\n    ) internal pure returns (int256 result) {\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\n            revert PRBMath__MulDivSignedInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x, y and the denominator.\n        uint256 ax;\n        uint256 ay;\n        uint256 ad;\n        unchecked {\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\n        }\n\n        // Compute the absolute value of (x*y)÷denominator. The result must fit within int256.\n        uint256 rAbs = mulDiv(ax, ay, ad);\n        if (rAbs > uint256(type(int256).max)) {\n            revert PRBMath__MulDivSignedOverflow(rAbs);\n        }\n\n        // Get the signs of x, y and the denominator.\n        uint256 sx;\n        uint256 sy;\n        uint256 sd;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n            sd := sgt(denominator, sub(0, 1))\n        }\n\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\n        // If yes, the result should be negative.\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The uint256 number for which to calculate the square root.\n    /// @return result The result as an uint256.\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\n        uint256 xAux = uint256(x);\n        result = 1;\n        if (xAux >= 0x100000000000000000000000000000000) {\n            xAux >>= 128;\n            result <<= 64;\n        }\n        if (xAux >= 0x10000000000000000) {\n            xAux >>= 64;\n            result <<= 32;\n        }\n        if (xAux >= 0x100000000) {\n            xAux >>= 32;\n            result <<= 16;\n        }\n        if (xAux >= 0x10000) {\n            xAux >>= 16;\n            result <<= 8;\n        }\n        if (xAux >= 0x100) {\n            xAux >>= 8;\n            result <<= 4;\n        }\n        if (xAux >= 0x10) {\n            xAux >>= 4;\n            result <<= 2;\n        }\n        if (xAux >= 0x8) {\n            result <<= 1;\n        }\n\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\n        unchecked {\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1; // Seven iterations should be enough\n            uint256 roundedDownResult = x / result;\n            return result >= roundedDownResult ? roundedDownResult : result;\n        }\n    }\n}\n"
    },
    "contracts/libraries/SafePRBMathTester.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"./SafePRBMath.sol\";\n\ncontract SafePRBMathTester {\n    function avg(uint256 x, uint256 y) public pure returns (uint256 result) {\n        return SafePRBMath.avg(x, y);\n    }\n\n    function ceil(uint256 x) public pure returns (uint256 result) {\n        return SafePRBMath.ceil(x);\n    }\n\n    function div(uint256 x, uint256 y) public pure returns (uint256 result) {\n        return SafePRBMath.div(x, y);\n    }\n\n    function e() public pure returns (uint256 result) {\n        return SafePRBMath.e();\n    }\n\n    function exp(uint256 x) public pure returns (uint256 result) {\n        return SafePRBMath.exp(x);\n    }\n\n    function exp2(uint256 x) public pure returns (uint256 result) {\n        return SafePRBMath.exp2(x);\n    }\n\n    function floor(uint256 x) public pure returns (uint256 result) {\n        return SafePRBMath.floor(x);\n    }\n\n    function frac(uint256 x) public pure returns (uint256 result) {\n        return SafePRBMath.frac(x);\n    }\n\n    function fromUint(uint256 x) public pure returns (uint256 result) {\n        return SafePRBMath.fromUint(x);\n    }\n\n    function gm(uint256 x, uint256 y) public pure returns (uint256 result) {\n        return SafePRBMath.gm(x, y);\n    }\n\n    function inv(uint256 x) public pure returns (uint256 result) {\n        return SafePRBMath.inv(x);\n    }\n\n    function ln(uint256 x) public pure returns (uint256 result) {\n        return SafePRBMath.ln(x);\n    }\n\n    function log10(uint256 x) public pure returns (uint256 result) {\n        return SafePRBMath.log10(x);\n    }\n\n    function log2(uint256 x) public pure returns (uint256 result) {\n        return SafePRBMath.log2(x);\n    }\n\n    function mul(uint256 x, uint256 y) public pure returns (uint256 result) {\n        return SafePRBMath.mul(x, y);\n    }\n\n    function pi() public pure returns (uint256 result) {\n        return SafePRBMath.pi();\n    }\n\n    function pow(uint256 x, uint256 y) public pure returns (uint256 result) {\n        return SafePRBMath.pow(x, y);\n    }\n\n    function powu(uint256 x, uint256 y) public pure returns (uint256 result) {\n        return SafePRBMath.powu(x, y);\n    }\n\n    function scale() public pure returns (uint256 result) {\n        return SafePRBMath.scale();\n    }\n\n    function sqrt(uint256 x) public pure returns (uint256 result) {\n        return SafePRBMath.sqrt(x);\n    }\n\n    function toUint(uint256 x) public pure returns (uint256 result) {\n        return SafePRBMath.toUint(x);\n    }\n}\n"
    },
    "contracts/libraries/StablecoinDecimal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nlibrary StablecoinDecimal {\n    function toNormal(uint256 _value) internal pure returns (uint256) {\n        uint256 decimal_difference = 1e12;\n        return _value / decimal_difference;\n    }\n\n    function toStablecoin(uint256 _value) internal pure returns (uint256) {\n        uint256 decimal_difference = 1e12;\n        return _value * decimal_difference;\n    }\n}\n"
    },
    "contracts/libraries/StringsUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUtils {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @notice Bytes to string (not human-readable form)\n     * @param _bytes Input bytes\n     * @return stringBytes String form of the bytes\n     */\n    function byToString(bytes32 _bytes) internal pure returns (string memory) {\n        return uintToHexString(uint256(_bytes), 32);\n    }\n\n    /**\n     * @notice Transfer address to string (not change the content)\n     * @param _addr Input address\n     * @return stringAddress String form of the address\n     */\n    function addressToString(address _addr)\n        internal\n        pure\n        returns (string memory)\n    {\n        return uintToHexString(uint256(uint160(_addr)), 20);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function uintToString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function uintToHexString(uint256 value)\n        internal\n        pure\n        returns (string memory)\n    {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return uintToHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function uintToHexString(uint256 value, uint256 length)\n        internal\n        pure\n        returns (string memory)\n    {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/libraries/StringsUtilsTester.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"./StringsUtils.sol\";\n\ncontract StringsUtilsTester {\n    function byToString(bytes32 _bytes) public pure returns (string memory) {\n        return StringsUtils.byToString(_bytes);\n    }\n\n    function addressToString(address _addr)\n        public\n        pure\n        returns (string memory)\n    {\n        return StringsUtils.addressToString(_addr);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function uintToString(uint256 value) public pure returns (string memory) {\n        return StringsUtils.uintToString(value);\n    }\n\n    function uintToHexString(uint256 value)\n        public\n        pure\n        returns (string memory)\n    {\n        return StringsUtils.uintToHexString(value);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function uintToHexString(uint256 value, uint256 length)\n        public\n        pure\n        returns (string memory)\n    {\n        return StringsUtils.uintToHexString(value, length);\n    }\n}\n"
    },
    "contracts/template.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ncontract A {\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constants **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n    // ...\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Variables **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n    // ...\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n    // ...\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Errors ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constructor ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    constructor() {\n        // ...\n    }\n\n    receive() external payable {\n        // ...\n    }\n\n    fallback() external {\n        // ...\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************** Modifiers *************************************** //\n    // ---------------------------------------------------------------------------------------- //\n    // ..\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** View Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n    // ...\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Set Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n    // ...\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Main Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n    // ...\n\n    // ---------------------------------------------------------------------------------------- //\n    // ********************************** Internal Functions ********************************** //\n    // ---------------------------------------------------------------------------------------- //\n    // ...\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Pure Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n    // ...\n}\n"
    },
    "contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _isPaused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {}\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _isPaused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _isPaused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _isPaused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    }
  }
}
