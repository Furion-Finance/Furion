/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../common";

export interface ICheckerInterface extends utils.Interface {
  functions: {
    "addToken(address)": FunctionFragment;
    "isFurionToken(address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "addToken" | "isFurionToken"): FunctionFragment;

  encodeFunctionData(functionFragment: "addToken", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "isFurionToken", values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFurionToken", data: BytesLike): Result;

  events: {};
}

export interface IChecker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICheckerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToken(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isFurionToken(_tokenAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
  };

  addToken(
    _tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isFurionToken(_tokenAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addToken(_tokenAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    isFurionToken(_tokenAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addToken(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isFurionToken(_tokenAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addToken(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isFurionToken(_tokenAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
