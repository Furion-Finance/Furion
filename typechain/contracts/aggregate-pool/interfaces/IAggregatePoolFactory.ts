/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../../../common";

export interface IAggregatePoolFactoryInterface extends utils.Interface {
  functions: {
    "allPoolsLength()": FunctionFragment;
    "createPool(address[],string,string)": FunctionFragment;
    "getPool(uint256)": FunctionFragment;
    "oracle()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "allPoolsLength" | "createPool" | "getPool" | "oracle"): FunctionFragment;

  encodeFunctionData(functionFragment: "allPoolsLength", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "getPool", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allPoolsLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;

  events: {};
}

export interface IAggregatePoolFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAggregatePoolFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allPoolsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPool(
      _tokens: PromiseOrValue<string>[],
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getPool(_poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;
  };

  allPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

  createPool(
    _tokens: PromiseOrValue<string>[],
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getPool(_poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPool(
      _tokens: PromiseOrValue<string>[],
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getPool(_poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    allPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPool(
      _tokens: PromiseOrValue<string>[],
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getPool(_poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allPoolsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPool(
      _tokens: PromiseOrValue<string>[],
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getPool(_poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
