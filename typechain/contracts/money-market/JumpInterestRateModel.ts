/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../../common";

export interface JumpInterestRateModelInterface extends utils.Interface {
  functions: {
    "IS_INTEREST_RATE_MODEL()": FunctionFragment;
    "baseRatePerBlock()": FunctionFragment;
    "blocksPerYear()": FunctionFragment;
    "getBorrowRate(uint256,uint256,uint256)": FunctionFragment;
    "getSupplyRate(uint256,uint256,uint256,uint256)": FunctionFragment;
    "isInterestRateModel()": FunctionFragment;
    "jumpMultiplierPerBlock()": FunctionFragment;
    "kink()": FunctionFragment;
    "multiplierPerBlock()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateJumpRateModel(uint256,uint256,uint256,uint256)": FunctionFragment;
    "utilizationRate(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_INTEREST_RATE_MODEL"
      | "baseRatePerBlock"
      | "blocksPerYear"
      | "getBorrowRate"
      | "getSupplyRate"
      | "isInterestRateModel"
      | "jumpMultiplierPerBlock"
      | "kink"
      | "multiplierPerBlock"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateJumpRateModel"
      | "utilizationRate",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_INTEREST_RATE_MODEL", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseRatePerBlock", values?: undefined): string;
  encodeFunctionData(functionFragment: "blocksPerYear", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBorrowRate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyRate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: "isInterestRateModel", values?: undefined): string;
  encodeFunctionData(functionFragment: "jumpMultiplierPerBlock", values?: undefined): string;
  encodeFunctionData(functionFragment: "kink", values?: undefined): string;
  encodeFunctionData(functionFragment: "multiplierPerBlock", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "updateJumpRateModel",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "utilizationRate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: "IS_INTEREST_RATE_MODEL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseRatePerBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blocksPerYear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBorrowRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSupplyRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInterestRateModel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jumpMultiplierPerBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kink", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiplierPerBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateJumpRateModel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "utilizationRate", data: BytesLike): Result;

  events: {
    "NewInterestParams(uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewInterestParams"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface NewInterestParamsEventObject {
  baseRatePerBlock: BigNumber;
  multiplierPerBlock: BigNumber;
  jumpMultiplierPerBlock: BigNumber;
  kink: BigNumber;
}
export type NewInterestParamsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  NewInterestParamsEventObject
>;

export type NewInterestParamsEventFilter = TypedEventFilter<NewInterestParamsEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface JumpInterestRateModel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JumpInterestRateModelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_INTEREST_RATE_MODEL(overrides?: CallOverrides): Promise<[boolean]>;

    baseRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    blocksPerYear(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBorrowRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getSupplyRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      _reserveFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    isInterestRateModel(overrides?: CallOverrides): Promise<[boolean]>;

    jumpMultiplierPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    kink(overrides?: CallOverrides): Promise<[BigNumber]>;

    multiplierPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateJumpRateModel(
      _baseRatePerYear: PromiseOrValue<BigNumberish>,
      _multiplierPerYear: PromiseOrValue<BigNumberish>,
      _jumpMultiplierPerYear: PromiseOrValue<BigNumberish>,
      _kink: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    utilizationRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;
  };

  IS_INTEREST_RATE_MODEL(overrides?: CallOverrides): Promise<boolean>;

  baseRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  blocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

  getBorrowRate(
    _cash: PromiseOrValue<BigNumberish>,
    _borrows: PromiseOrValue<BigNumberish>,
    _reserves: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getSupplyRate(
    _cash: PromiseOrValue<BigNumberish>,
    _borrows: PromiseOrValue<BigNumberish>,
    _reserves: PromiseOrValue<BigNumberish>,
    _reserveFactorMantissa: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  isInterestRateModel(overrides?: CallOverrides): Promise<boolean>;

  jumpMultiplierPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  kink(overrides?: CallOverrides): Promise<BigNumber>;

  multiplierPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateJumpRateModel(
    _baseRatePerYear: PromiseOrValue<BigNumberish>,
    _multiplierPerYear: PromiseOrValue<BigNumberish>,
    _jumpMultiplierPerYear: PromiseOrValue<BigNumberish>,
    _kink: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  utilizationRate(
    _cash: PromiseOrValue<BigNumberish>,
    _borrows: PromiseOrValue<BigNumberish>,
    _reserves: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    IS_INTEREST_RATE_MODEL(overrides?: CallOverrides): Promise<boolean>;

    baseRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    blocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSupplyRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      _reserveFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isInterestRateModel(overrides?: CallOverrides): Promise<boolean>;

    jumpMultiplierPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    kink(overrides?: CallOverrides): Promise<BigNumber>;

    multiplierPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateJumpRateModel(
      _baseRatePerYear: PromiseOrValue<BigNumberish>,
      _multiplierPerYear: PromiseOrValue<BigNumberish>,
      _jumpMultiplierPerYear: PromiseOrValue<BigNumberish>,
      _kink: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    utilizationRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    "NewInterestParams(uint256,uint256,uint256,uint256)"(
      baseRatePerBlock?: null,
      multiplierPerBlock?: null,
      jumpMultiplierPerBlock?: null,
      kink?: null,
    ): NewInterestParamsEventFilter;
    NewInterestParams(
      baseRatePerBlock?: null,
      multiplierPerBlock?: null,
      jumpMultiplierPerBlock?: null,
      kink?: null,
    ): NewInterestParamsEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    IS_INTEREST_RATE_MODEL(overrides?: CallOverrides): Promise<BigNumber>;

    baseRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    blocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSupplyRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      _reserveFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isInterestRateModel(overrides?: CallOverrides): Promise<BigNumber>;

    jumpMultiplierPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    kink(overrides?: CallOverrides): Promise<BigNumber>;

    multiplierPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateJumpRateModel(
      _baseRatePerYear: PromiseOrValue<BigNumberish>,
      _multiplierPerYear: PromiseOrValue<BigNumberish>,
      _jumpMultiplierPerYear: PromiseOrValue<BigNumberish>,
      _kink: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    utilizationRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_INTEREST_RATE_MODEL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseRatePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blocksPerYear(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSupplyRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      _reserveFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isInterestRateModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jumpMultiplierPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kink(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiplierPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateJumpRateModel(
      _baseRatePerYear: PromiseOrValue<BigNumberish>,
      _multiplierPerYear: PromiseOrValue<BigNumberish>,
      _jumpMultiplierPerYear: PromiseOrValue<BigNumberish>,
      _kink: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    utilizationRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
