/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../../common";

export interface NormalInterestRateModelInterface extends utils.Interface {
  functions: {
    "IS_INTEREST_RATE_MODEL()": FunctionFragment;
    "baseRatePerBlock()": FunctionFragment;
    "blocksPerYear()": FunctionFragment;
    "getBorrowRate(uint256,uint256,uint256)": FunctionFragment;
    "getSupplyRate(uint256,uint256,uint256,uint256)": FunctionFragment;
    "isInterestRateModel()": FunctionFragment;
    "multiplierPerBlock()": FunctionFragment;
    "utilizationRate(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_INTEREST_RATE_MODEL"
      | "baseRatePerBlock"
      | "blocksPerYear"
      | "getBorrowRate"
      | "getSupplyRate"
      | "isInterestRateModel"
      | "multiplierPerBlock"
      | "utilizationRate",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_INTEREST_RATE_MODEL", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseRatePerBlock", values?: undefined): string;
  encodeFunctionData(functionFragment: "blocksPerYear", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBorrowRate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyRate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: "isInterestRateModel", values?: undefined): string;
  encodeFunctionData(functionFragment: "multiplierPerBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "utilizationRate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: "IS_INTEREST_RATE_MODEL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseRatePerBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blocksPerYear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBorrowRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSupplyRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInterestRateModel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiplierPerBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "utilizationRate", data: BytesLike): Result;

  events: {
    "NewInterestParams(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewInterestParams"): EventFragment;
}

export interface NewInterestParamsEventObject {
  baseRatePerBlock: BigNumber;
  multiplierPerBlock: BigNumber;
}
export type NewInterestParamsEvent = TypedEvent<[BigNumber, BigNumber], NewInterestParamsEventObject>;

export type NewInterestParamsEventFilter = TypedEventFilter<NewInterestParamsEvent>;

export interface NormalInterestRateModel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NormalInterestRateModelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_INTEREST_RATE_MODEL(overrides?: CallOverrides): Promise<[boolean]>;

    baseRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    blocksPerYear(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBorrowRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getSupplyRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      _reserveFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    isInterestRateModel(overrides?: CallOverrides): Promise<[boolean]>;

    multiplierPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    utilizationRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;
  };

  IS_INTEREST_RATE_MODEL(overrides?: CallOverrides): Promise<boolean>;

  baseRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  blocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

  getBorrowRate(
    _cash: PromiseOrValue<BigNumberish>,
    _borrows: PromiseOrValue<BigNumberish>,
    _reserves: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getSupplyRate(
    _cash: PromiseOrValue<BigNumberish>,
    _borrows: PromiseOrValue<BigNumberish>,
    _reserves: PromiseOrValue<BigNumberish>,
    _reserveFactorMantissa: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  isInterestRateModel(overrides?: CallOverrides): Promise<boolean>;

  multiplierPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  utilizationRate(
    _cash: PromiseOrValue<BigNumberish>,
    _borrows: PromiseOrValue<BigNumberish>,
    _reserves: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    IS_INTEREST_RATE_MODEL(overrides?: CallOverrides): Promise<boolean>;

    baseRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    blocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSupplyRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      _reserveFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isInterestRateModel(overrides?: CallOverrides): Promise<boolean>;

    multiplierPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    utilizationRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    "NewInterestParams(uint256,uint256)"(
      baseRatePerBlock?: null,
      multiplierPerBlock?: null,
    ): NewInterestParamsEventFilter;
    NewInterestParams(baseRatePerBlock?: null, multiplierPerBlock?: null): NewInterestParamsEventFilter;
  };

  estimateGas: {
    IS_INTEREST_RATE_MODEL(overrides?: CallOverrides): Promise<BigNumber>;

    baseRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    blocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSupplyRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      _reserveFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isInterestRateModel(overrides?: CallOverrides): Promise<BigNumber>;

    multiplierPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    utilizationRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_INTEREST_RATE_MODEL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseRatePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blocksPerYear(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSupplyRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      _reserveFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isInterestRateModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiplierPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    utilizationRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
