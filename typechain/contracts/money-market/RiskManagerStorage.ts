/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../../common";

export interface RiskManagerStorageInterface extends utils.Interface {
  functions: {
    "IS_RISK_MANAGER()": FunctionFragment;
    "_borrowGuardianPaused()": FunctionFragment;
    "_supplyGuardianPaused()": FunctionFragment;
    "admin()": FunctionFragment;
    "borrowGuardianPaused(address)": FunctionFragment;
    "closeFactorMantissa()": FunctionFragment;
    "liquidatableTime(address)": FunctionFragment;
    "markets(address)": FunctionFragment;
    "marketsEntered(address,uint256)": FunctionFragment;
    "oracle()": FunctionFragment;
    "pauseGuardian()": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
    "seizeGuardianPaused()": FunctionFragment;
    "supplyGuardianPaused(address)": FunctionFragment;
    "transferGuardianPaused()": FunctionFragment;
    "veToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_RISK_MANAGER"
      | "_borrowGuardianPaused"
      | "_supplyGuardianPaused"
      | "admin"
      | "borrowGuardianPaused"
      | "closeFactorMantissa"
      | "liquidatableTime"
      | "markets"
      | "marketsEntered"
      | "oracle"
      | "pauseGuardian"
      | "pendingAdmin"
      | "seizeGuardianPaused"
      | "supplyGuardianPaused"
      | "transferGuardianPaused"
      | "veToken",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_RISK_MANAGER", values?: undefined): string;
  encodeFunctionData(functionFragment: "_borrowGuardianPaused", values?: undefined): string;
  encodeFunctionData(functionFragment: "_supplyGuardianPaused", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "borrowGuardianPaused", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "closeFactorMantissa", values?: undefined): string;
  encodeFunctionData(functionFragment: "liquidatableTime", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "markets", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "marketsEntered",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauseGuardian", values?: undefined): string;
  encodeFunctionData(functionFragment: "pendingAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "seizeGuardianPaused", values?: undefined): string;
  encodeFunctionData(functionFragment: "supplyGuardianPaused", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "transferGuardianPaused", values?: undefined): string;
  encodeFunctionData(functionFragment: "veToken", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IS_RISK_MANAGER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_borrowGuardianPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_supplyGuardianPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowGuardianPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeFactorMantissa", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidatableTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketsEntered", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseGuardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seizeGuardianPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supplyGuardianPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferGuardianPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veToken", data: BytesLike): Result;

  events: {};
}

export interface RiskManagerStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RiskManagerStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_RISK_MANAGER(overrides?: CallOverrides): Promise<[boolean]>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    _supplyGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidatableTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
        tier: BigNumber;
      }
    >;

    marketsEntered(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    pauseGuardian(overrides?: CallOverrides): Promise<[string]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    supplyGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    veToken(overrides?: CallOverrides): Promise<[string]>;
  };

  IS_RISK_MANAGER(overrides?: CallOverrides): Promise<boolean>;

  _borrowGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  _supplyGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  admin(overrides?: CallOverrides): Promise<string>;

  borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  liquidatableTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  markets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      isListed: boolean;
      collateralFactorMantissa: BigNumber;
      tier: BigNumber;
    }
  >;

  marketsEntered(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  pauseGuardian(overrides?: CallOverrides): Promise<string>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  seizeGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  supplyGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  transferGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  veToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    IS_RISK_MANAGER(overrides?: CallOverrides): Promise<boolean>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    _supplyGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    admin(overrides?: CallOverrides): Promise<string>;

    borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatableTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
        tier: BigNumber;
      }
    >;

    marketsEntered(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    pauseGuardian(overrides?: CallOverrides): Promise<string>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    supplyGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    veToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    IS_RISK_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    _supplyGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatableTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    markets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    marketsEntered(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    pauseGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    supplyGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    veToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_RISK_MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _supplyGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidatableTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    markets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketsEntered(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplyGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
