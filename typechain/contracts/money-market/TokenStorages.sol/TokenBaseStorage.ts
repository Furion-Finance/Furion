/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../../../common";

export interface TokenBaseStorageInterface extends utils.Interface {
  functions: {
    "IS_FTOKEN()": FunctionFragment;
    "admin()": FunctionFragment;
    "borrowIndex()": FunctionFragment;
    "checker()": FunctionFragment;
    "interestRateModel()": FunctionFragment;
    "lastAccrualBlock()": FunctionFragment;
    "liquidationProtection(uint256)": FunctionFragment;
    "oracle()": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
    "protocolSeizeShareMantissa()": FunctionFragment;
    "reserveFactorMantissa()": FunctionFragment;
    "riskManager()": FunctionFragment;
    "totalBorrows()": FunctionFragment;
    "totalCash()": FunctionFragment;
    "totalReserves()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_FTOKEN"
      | "admin"
      | "borrowIndex"
      | "checker"
      | "interestRateModel"
      | "lastAccrualBlock"
      | "liquidationProtection"
      | "oracle"
      | "pendingAdmin"
      | "protocolSeizeShareMantissa"
      | "reserveFactorMantissa"
      | "riskManager"
      | "totalBorrows"
      | "totalCash"
      | "totalReserves",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_FTOKEN", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "borrowIndex", values?: undefined): string;
  encodeFunctionData(functionFragment: "checker", values?: undefined): string;
  encodeFunctionData(functionFragment: "interestRateModel", values?: undefined): string;
  encodeFunctionData(functionFragment: "lastAccrualBlock", values?: undefined): string;
  encodeFunctionData(functionFragment: "liquidationProtection", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "pendingAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "protocolSeizeShareMantissa", values?: undefined): string;
  encodeFunctionData(functionFragment: "reserveFactorMantissa", values?: undefined): string;
  encodeFunctionData(functionFragment: "riskManager", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalBorrows", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalCash", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalReserves", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IS_FTOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "interestRateModel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastAccrualBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidationProtection", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolSeizeShareMantissa", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserveFactorMantissa", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalBorrows", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalCash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalReserves", data: BytesLike): Result;

  events: {};
}

export interface TokenBaseStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenBaseStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_FTOKEN(overrides?: CallOverrides): Promise<[boolean]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    borrowIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    checker(overrides?: CallOverrides): Promise<[string]>;

    interestRateModel(overrides?: CallOverrides): Promise<[string]>;

    lastAccrualBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationProtection(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        borrower: string;
        liquidator: string;
        value: BigNumber;
        tokenSeized: BigNumber;
      }
    >;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    riskManager(overrides?: CallOverrides): Promise<[string]>;

    totalBorrows(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCash(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalReserves(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  IS_FTOKEN(overrides?: CallOverrides): Promise<boolean>;

  admin(overrides?: CallOverrides): Promise<string>;

  borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

  checker(overrides?: CallOverrides): Promise<string>;

  interestRateModel(overrides?: CallOverrides): Promise<string>;

  lastAccrualBlock(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationProtection(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      borrower: string;
      liquidator: string;
      value: BigNumber;
      tokenSeized: BigNumber;
    }
  >;

  oracle(overrides?: CallOverrides): Promise<string>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  riskManager(overrides?: CallOverrides): Promise<string>;

  totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

  totalCash(overrides?: CallOverrides): Promise<BigNumber>;

  totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    IS_FTOKEN(overrides?: CallOverrides): Promise<boolean>;

    admin(overrides?: CallOverrides): Promise<string>;

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    checker(overrides?: CallOverrides): Promise<string>;

    interestRateModel(overrides?: CallOverrides): Promise<string>;

    lastAccrualBlock(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationProtection(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        borrower: string;
        liquidator: string;
        value: BigNumber;
        tokenSeized: BigNumber;
      }
    >;

    oracle(overrides?: CallOverrides): Promise<string>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    riskManager(overrides?: CallOverrides): Promise<string>;

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    totalCash(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    IS_FTOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    checker(overrides?: CallOverrides): Promise<BigNumber>;

    interestRateModel(overrides?: CallOverrides): Promise<BigNumber>;

    lastAccrualBlock(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationProtection(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    riskManager(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    totalCash(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_FTOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestRateModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastAccrualBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationProtection(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riskManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrows(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
