/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../../../common";

export interface IInterestRateModelInterface extends utils.Interface {
  functions: {
    "getBorrowRate(uint256,uint256,uint256)": FunctionFragment;
    "getSupplyRate(uint256,uint256,uint256,uint256)": FunctionFragment;
    "isInterestRateModel()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "getBorrowRate" | "getSupplyRate" | "isInterestRateModel"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBorrowRate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyRate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: "isInterestRateModel", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getBorrowRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSupplyRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInterestRateModel", data: BytesLike): Result;

  events: {};
}

export interface IInterestRateModel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IInterestRateModelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBorrowRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getSupplyRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      _reserveFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    isInterestRateModel(overrides?: CallOverrides): Promise<[boolean]>;
  };

  getBorrowRate(
    _cash: PromiseOrValue<BigNumberish>,
    _borrows: PromiseOrValue<BigNumberish>,
    _reserves: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getSupplyRate(
    _cash: PromiseOrValue<BigNumberish>,
    _borrows: PromiseOrValue<BigNumberish>,
    _reserves: PromiseOrValue<BigNumberish>,
    _reserveFactorMantissa: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  isInterestRateModel(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    getBorrowRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSupplyRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      _reserveFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isInterestRateModel(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getBorrowRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSupplyRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      _reserveFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isInterestRateModel(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getBorrowRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSupplyRate(
      _cash: PromiseOrValue<BigNumberish>,
      _borrows: PromiseOrValue<BigNumberish>,
      _reserves: PromiseOrValue<BigNumberish>,
      _reserveFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isInterestRateModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
