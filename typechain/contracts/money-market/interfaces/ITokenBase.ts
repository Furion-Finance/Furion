/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../../../common";

export interface ITokenBaseInterface extends utils.Interface {
  functions: {
    "acceptAdmin()": FunctionFragment;
    "accrueInterest()": FunctionFragment;
    "balanceOfUnderlying(address)": FunctionFragment;
    "borrowBalanceCurrent(address)": FunctionFragment;
    "borrowBalanceStored(address)": FunctionFragment;
    "borrowRatePerBlock()": FunctionFragment;
    "exchangeRateCurrent()": FunctionFragment;
    "exchangeRateStored()": FunctionFragment;
    "getAccountSnapshot(address)": FunctionFragment;
    "getLastAccrualBlock()": FunctionFragment;
    "getRiskManager()": FunctionFragment;
    "isFToken()": FunctionFragment;
    "seize(address,address,uint256)": FunctionFragment;
    "setPendingAdmin(address)": FunctionFragment;
    "supplyRatePerBlock()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptAdmin"
      | "accrueInterest"
      | "balanceOfUnderlying"
      | "borrowBalanceCurrent"
      | "borrowBalanceStored"
      | "borrowRatePerBlock"
      | "exchangeRateCurrent"
      | "exchangeRateStored"
      | "getAccountSnapshot"
      | "getLastAccrualBlock"
      | "getRiskManager"
      | "isFToken"
      | "seize"
      | "setPendingAdmin"
      | "supplyRatePerBlock",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "acceptAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "accrueInterest", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOfUnderlying", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "borrowBalanceCurrent", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "borrowBalanceStored", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "borrowRatePerBlock", values?: undefined): string;
  encodeFunctionData(functionFragment: "exchangeRateCurrent", values?: undefined): string;
  encodeFunctionData(functionFragment: "exchangeRateStored", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAccountSnapshot", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "getLastAccrualBlock", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRiskManager", values?: undefined): string;
  encodeFunctionData(functionFragment: "isFToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "seize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "setPendingAdmin", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "supplyRatePerBlock", values?: undefined): string;

  decodeFunctionResult(functionFragment: "acceptAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accrueInterest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOfUnderlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowBalanceCurrent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowBalanceStored", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowRatePerBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchangeRateCurrent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchangeRateStored", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAccountSnapshot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLastAccrualBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRiskManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPendingAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supplyRatePerBlock", data: BytesLike): Result;

  events: {
    "AccrueInterest(uint256,uint256,uint256,uint256)": EventFragment;
    "Borrow(address,uint256,uint256,uint256)": EventFragment;
    "LiquidateBorrow(address,address,uint256,address)": EventFragment;
    "NewAdmin(address,address)": EventFragment;
    "NewPendingAdmin(address,address)": EventFragment;
    "NewPriceOracle(address,address)": EventFragment;
    "NewReserveFactor(uint256,uint256)": EventFragment;
    "Redeem(address,uint256,uint256)": EventFragment;
    "RepayBorrow(address,address,uint256,uint256,uint256)": EventFragment;
    "ReservesAdded(address,uint256,uint256)": EventFragment;
    "Supply(address,uint256,uint256)": EventFragment;
    "TokenSeized(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccrueInterest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriceOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReserveFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReservesAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Supply"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSeized"): EventFragment;
}

export interface AccrueInterestEventObject {
  cashPrior: BigNumber;
  interestAccumulated: BigNumber;
  borrowIndex: BigNumber;
  totalBorrows: BigNumber;
}
export type AccrueInterestEvent = TypedEvent<[BigNumber, BigNumber, BigNumber, BigNumber], AccrueInterestEventObject>;

export type AccrueInterestEventFilter = TypedEventFilter<AccrueInterestEvent>;

export interface BorrowEventObject {
  borrower: string;
  borrowAmount: BigNumber;
  accountBorrows: BigNumber;
  totalBorrows: BigNumber;
}
export type BorrowEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], BorrowEventObject>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface LiquidateBorrowEventObject {
  liquidator: string;
  borrower: string;
  repayAmount: BigNumber;
  fTokenCollateral: string;
}
export type LiquidateBorrowEvent = TypedEvent<[string, string, BigNumber, string], LiquidateBorrowEventObject>;

export type LiquidateBorrowEventFilter = TypedEventFilter<LiquidateBorrowEvent>;

export interface NewAdminEventObject {
  oldAdmin: string;
  newAdmin: string;
}
export type NewAdminEvent = TypedEvent<[string, string], NewAdminEventObject>;

export type NewAdminEventFilter = TypedEventFilter<NewAdminEvent>;

export interface NewPendingAdminEventObject {
  oldPendingAdmin: string;
  newPendingAdmin: string;
}
export type NewPendingAdminEvent = TypedEvent<[string, string], NewPendingAdminEventObject>;

export type NewPendingAdminEventFilter = TypedEventFilter<NewPendingAdminEvent>;

export interface NewPriceOracleEventObject {
  oldOracle: string;
  newOracle: string;
}
export type NewPriceOracleEvent = TypedEvent<[string, string], NewPriceOracleEventObject>;

export type NewPriceOracleEventFilter = TypedEventFilter<NewPriceOracleEvent>;

export interface NewReserveFactorEventObject {
  oldReserveFactor: BigNumber;
  newReserveFactor: BigNumber;
}
export type NewReserveFactorEvent = TypedEvent<[BigNumber, BigNumber], NewReserveFactorEventObject>;

export type NewReserveFactorEventFilter = TypedEventFilter<NewReserveFactorEvent>;

export interface RedeemEventObject {
  redeemer: string;
  redeemAmount: BigNumber;
  redeemTokens: BigNumber;
}
export type RedeemEvent = TypedEvent<[string, BigNumber, BigNumber], RedeemEventObject>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface RepayBorrowEventObject {
  payer: string;
  borrower: string;
  repayAmount: BigNumber;
  accountBorrows: BigNumber;
  totalBorrows: BigNumber;
}
export type RepayBorrowEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], RepayBorrowEventObject>;

export type RepayBorrowEventFilter = TypedEventFilter<RepayBorrowEvent>;

export interface ReservesAddedEventObject {
  benefactor: string;
  addAmount: BigNumber;
  newTotalReserves: BigNumber;
}
export type ReservesAddedEvent = TypedEvent<[string, BigNumber, BigNumber], ReservesAddedEventObject>;

export type ReservesAddedEventFilter = TypedEventFilter<ReservesAddedEvent>;

export interface SupplyEventObject {
  supplier: string;
  supplyAmount: BigNumber;
  tokensMinted: BigNumber;
}
export type SupplyEvent = TypedEvent<[string, BigNumber, BigNumber], SupplyEventObject>;

export type SupplyEventFilter = TypedEventFilter<SupplyEvent>;

export interface TokenSeizedEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type TokenSeizedEvent = TypedEvent<[string, string, BigNumber], TokenSeizedEventObject>;

export type TokenSeizedEventFilter = TypedEventFilter<TokenSeizedEvent>;

export interface ITokenBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITokenBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    accrueInterest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    balanceOfUnderlying(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowBalanceCurrent(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowBalanceStored(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeRateCurrent(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeRateStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountSnapshot(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getLastAccrualBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRiskManager(overrides?: CallOverrides): Promise<[string]>;

    isFToken(overrides?: CallOverrides): Promise<[boolean]>;

    seize(
      _liquidator: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  acceptAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  accrueInterest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  balanceOfUnderlying(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowBalanceCurrent(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  borrowBalanceStored(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeRateCurrent(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountSnapshot(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getLastAccrualBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getRiskManager(overrides?: CallOverrides): Promise<string>;

  isFToken(overrides?: CallOverrides): Promise<boolean>;

  seize(
    _liquidator: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _seizeTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPendingAdmin(
    newPendingAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    acceptAdmin(overrides?: CallOverrides): Promise<void>;

    accrueInterest(overrides?: CallOverrides): Promise<void>;

    balanceOfUnderlying(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowBalanceCurrent(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowBalanceStored(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountSnapshot(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getLastAccrualBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskManager(overrides?: CallOverrides): Promise<string>;

    isFToken(overrides?: CallOverrides): Promise<boolean>;

    seize(
      _liquidator: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPendingAdmin(newPendingAdmin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AccrueInterest(uint256,uint256,uint256,uint256)"(
      cashPrior?: null,
      interestAccumulated?: null,
      borrowIndex?: null,
      totalBorrows?: null,
    ): AccrueInterestEventFilter;
    AccrueInterest(
      cashPrior?: null,
      interestAccumulated?: null,
      borrowIndex?: null,
      totalBorrows?: null,
    ): AccrueInterestEventFilter;

    "Borrow(address,uint256,uint256,uint256)"(
      borrower?: null,
      borrowAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null,
    ): BorrowEventFilter;
    Borrow(borrower?: null, borrowAmount?: null, accountBorrows?: null, totalBorrows?: null): BorrowEventFilter;

    "LiquidateBorrow(address,address,uint256,address)"(
      liquidator?: null,
      borrower?: null,
      repayAmount?: null,
      fTokenCollateral?: null,
    ): LiquidateBorrowEventFilter;
    LiquidateBorrow(
      liquidator?: null,
      borrower?: null,
      repayAmount?: null,
      fTokenCollateral?: null,
    ): LiquidateBorrowEventFilter;

    "NewAdmin(address,address)"(oldAdmin?: null, newAdmin?: null): NewAdminEventFilter;
    NewAdmin(oldAdmin?: null, newAdmin?: null): NewAdminEventFilter;

    "NewPendingAdmin(address,address)"(oldPendingAdmin?: null, newPendingAdmin?: null): NewPendingAdminEventFilter;
    NewPendingAdmin(oldPendingAdmin?: null, newPendingAdmin?: null): NewPendingAdminEventFilter;

    "NewPriceOracle(address,address)"(oldOracle?: null, newOracle?: null): NewPriceOracleEventFilter;
    NewPriceOracle(oldOracle?: null, newOracle?: null): NewPriceOracleEventFilter;

    "NewReserveFactor(uint256,uint256)"(oldReserveFactor?: null, newReserveFactor?: null): NewReserveFactorEventFilter;
    NewReserveFactor(oldReserveFactor?: null, newReserveFactor?: null): NewReserveFactorEventFilter;

    "Redeem(address,uint256,uint256)"(redeemer?: null, redeemAmount?: null, redeemTokens?: null): RedeemEventFilter;
    Redeem(redeemer?: null, redeemAmount?: null, redeemTokens?: null): RedeemEventFilter;

    "RepayBorrow(address,address,uint256,uint256,uint256)"(
      payer?: null,
      borrower?: null,
      repayAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null,
    ): RepayBorrowEventFilter;
    RepayBorrow(
      payer?: null,
      borrower?: null,
      repayAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null,
    ): RepayBorrowEventFilter;

    "ReservesAdded(address,uint256,uint256)"(
      benefactor?: null,
      addAmount?: null,
      newTotalReserves?: null,
    ): ReservesAddedEventFilter;
    ReservesAdded(benefactor?: null, addAmount?: null, newTotalReserves?: null): ReservesAddedEventFilter;

    "Supply(address,uint256,uint256)"(supplier?: null, supplyAmount?: null, tokensMinted?: null): SupplyEventFilter;
    Supply(supplier?: null, supplyAmount?: null, tokensMinted?: null): SupplyEventFilter;

    "TokenSeized(address,address,uint256)"(from?: null, to?: null, amount?: null): TokenSeizedEventFilter;
    TokenSeized(from?: null, to?: null, amount?: null): TokenSeizedEventFilter;
  };

  estimateGas: {
    acceptAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    accrueInterest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    balanceOfUnderlying(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowBalanceCurrent(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowBalanceStored(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountSnapshot(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getLastAccrualBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskManager(overrides?: CallOverrides): Promise<BigNumber>;

    isFToken(overrides?: CallOverrides): Promise<BigNumber>;

    seize(
      _liquidator: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    accrueInterest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    balanceOfUnderlying(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowBalanceCurrent(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowBalanceStored(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRateCurrent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRateStored(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountSnapshot(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastAccrualBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seize(
      _liquidator: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
