/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../../common";

export interface SeparatePoolFactoryInterface extends utils.Interface {
  functions: {
    "allNfts(uint256)": FunctionFragment;
    "createPool(address)": FunctionFragment;
    "fur()": FunctionFragment;
    "getAllNfts()": FunctionFragment;
    "getAllPools()": FunctionFragment;
    "getNftByPool(address)": FunctionFragment;
    "getPool(address)": FunctionFragment;
    "incomeMaker()": FunctionFragment;
    "numOfPools()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allNfts"
      | "createPool"
      | "fur"
      | "getAllNfts"
      | "getAllPools"
      | "getNftByPool"
      | "getPool"
      | "incomeMaker"
      | "numOfPools"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "allNfts", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "createPool", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "fur", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAllNfts", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAllPools", values?: undefined): string;
  encodeFunctionData(functionFragment: "getNftByPool", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "getPool", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "incomeMaker", values?: undefined): string;
  encodeFunctionData(functionFragment: "numOfPools", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: "allNfts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fur", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAllNfts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAllPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNftByPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "incomeMaker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numOfPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolCreated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolCreatedEventObject {
  nftAddress: string;
  poolAddress: string;
  poolIndex: BigNumber;
}
export type PoolCreatedEvent = TypedEvent<[string, string, BigNumber], PoolCreatedEventObject>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface SeparatePoolFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SeparatePoolFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allNfts(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    createPool(
      _nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    fur(overrides?: CallOverrides): Promise<[string]>;

    getAllNfts(overrides?: CallOverrides): Promise<[string[]] & { nftsWithPool: string[] }>;

    getAllPools(overrides?: CallOverrides): Promise<[string[]] & { poolAddresses: string[] }>;

    getNftByPool(_poolAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    getPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    incomeMaker(overrides?: CallOverrides): Promise<[string]>;

    numOfPools(overrides?: CallOverrides): Promise<[BigNumber] & { totalPools: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  allNfts(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  createPool(
    _nftAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  fur(overrides?: CallOverrides): Promise<string>;

  getAllNfts(overrides?: CallOverrides): Promise<string[]>;

  getAllPools(overrides?: CallOverrides): Promise<string[]>;

  getNftByPool(_poolAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  getPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  incomeMaker(overrides?: CallOverrides): Promise<string>;

  numOfPools(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    allNfts(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    createPool(_nftAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    fur(overrides?: CallOverrides): Promise<string>;

    getAllNfts(overrides?: CallOverrides): Promise<string[]>;

    getAllPools(overrides?: CallOverrides): Promise<string[]>;

    getNftByPool(_poolAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    incomeMaker(overrides?: CallOverrides): Promise<string>;

    numOfPools(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(_newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    "PoolCreated(address,address,uint256)"(
      nftAddress?: null,
      poolAddress?: null,
      poolIndex?: null,
    ): PoolCreatedEventFilter;
    PoolCreated(nftAddress?: null, poolAddress?: null, poolIndex?: null): PoolCreatedEventFilter;
  };

  estimateGas: {
    allNfts(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    createPool(
      _nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    fur(overrides?: CallOverrides): Promise<BigNumber>;

    getAllNfts(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPools(overrides?: CallOverrides): Promise<BigNumber>;

    getNftByPool(_poolAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    incomeMaker(overrides?: CallOverrides): Promise<BigNumber>;

    numOfPools(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allNfts(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPool(
      _nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    fur(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllNfts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNftByPool(_poolAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incomeMaker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numOfPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
