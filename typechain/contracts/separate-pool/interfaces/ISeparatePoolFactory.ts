/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../../../common";

export interface ISeparatePoolFactoryInterface extends utils.Interface {
  functions: {
    "createPool(address)": FunctionFragment;
    "getAllNfts()": FunctionFragment;
    "getAllPools()": FunctionFragment;
    "getNftByPool(address)": FunctionFragment;
    "numOfPools()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createPool" | "getAllNfts" | "getAllPools" | "getNftByPool" | "numOfPools",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "createPool", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "getAllNfts", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAllPools", values?: undefined): string;
  encodeFunctionData(functionFragment: "getNftByPool", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "numOfPools", values?: undefined): string;

  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAllNfts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAllPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNftByPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numOfPools", data: BytesLike): Result;

  events: {};
}

export interface ISeparatePoolFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISeparatePoolFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPool(
      _nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getAllNfts(overrides?: CallOverrides): Promise<[string[]] & { nftsWithPool: string[] }>;

    getAllPools(overrides?: CallOverrides): Promise<[string[]] & { poolAddresses: string[] }>;

    getNftByPool(_poolAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    numOfPools(overrides?: CallOverrides): Promise<[BigNumber] & { totalPools: BigNumber }>;
  };

  createPool(
    _nftAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getAllNfts(overrides?: CallOverrides): Promise<string[]>;

  getAllPools(overrides?: CallOverrides): Promise<string[]>;

  getNftByPool(_poolAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  numOfPools(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    createPool(_nftAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getAllNfts(overrides?: CallOverrides): Promise<string[]>;

    getAllPools(overrides?: CallOverrides): Promise<string[]>;

    getNftByPool(_poolAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    numOfPools(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    createPool(
      _nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getAllNfts(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPools(overrides?: CallOverrides): Promise<BigNumber>;

    getNftByPool(_poolAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    numOfPools(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createPool(
      _nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getAllNfts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNftByPool(_poolAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numOfPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
