/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";

import type { PromiseOrValue } from "../../common";
import type { TestClaim, TestClaimInterface } from "../../contracts/TestClaim";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IFurionToken",
        name: "_furion",
        type: "address",
      },
      {
        internalType: "contract MockUSD",
        name: "_usd",
        type: "address",
      },
      {
        internalType: "contract CoolCats",
        name: "_coolCats",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimAlready",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "coolCats",
    outputs: [
      {
        internalType: "contract CoolCats",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "furion",
    outputs: [
      {
        internalType: "contract IFurionToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "usd",
    outputs: [
      {
        internalType: "contract MockUSD",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516103c03803806103c083398101604081905261002f91610089565b600180546001600160a01b039485166001600160a01b0319918216179091556002805493851693821693909317909255600380549190931691161790556100d6565b6001600160a01b038116811461008657600080fd5b50565b60008060006060848603121561009e57600080fd5b83516100a981610071565b60208501519093506100ba81610071565b60408501519092506100cb81610071565b809150509250925092565b6102db806100e56000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063d63a6ccd11610050578063d63a6ccd146100af578063de260368146100c2578063ebca5b0f146100cc57600080fd5b8063909ff8281461006c5780639f7496e81461009c575b600080fd5b60015461007f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b60035461007f906001600160a01b031681565b60025461007f906001600160a01b031681565b6100ca6100ff565b005b6100ef6100da36600461029e565b60006020819052908152604090205460ff1681565b6040519015158152602001610093565b3360009081526020819052604090205460ff16156101635760405162461bcd60e51b815260206004820152600c60248201527f484156455f434c41494d45440000000000000000000000000000000000000000604482015260640160405180910390fd5b600154604051632b2cea1960e21b815233600482015269021e19e0c9bab240000060248201526001600160a01b039091169063acb3a86490604401600060405180830381600087803b1580156101b857600080fd5b505af11580156101cc573d6000803e3d6000fd5b50506002546040516340c10f1960e01b81523360048201526402540be40060248201526001600160a01b0390911692506340c10f199150604401600060405180830381600087803b15801561022057600080fd5b505af1158015610234573d6000803e3d6000fd5b50506003546040516332a0005160e21b8152336004820152600260248201526001600160a01b03909116925063ca8001449150604401600060405180830381600087803b15801561028457600080fd5b505af1158015610298573d6000803e3d6000fd5b50505050565b6000602082840312156102b057600080fd5b81356001600160a01b03811681146102c757600080fd5b939250505056fea164736f6c634300080d000a";

type TestClaimConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: TestClaimConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class TestClaim__factory extends ContractFactory {
  constructor(...args: TestClaimConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _furion: PromiseOrValue<string>,
    _usd: PromiseOrValue<string>,
    _coolCats: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<TestClaim> {
    return super.deploy(_furion, _usd, _coolCats, overrides || {}) as Promise<TestClaim>;
  }
  override getDeployTransaction(
    _furion: PromiseOrValue<string>,
    _usd: PromiseOrValue<string>,
    _coolCats: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_furion, _usd, _coolCats, overrides || {});
  }
  override attach(address: string): TestClaim {
    return super.attach(address) as TestClaim;
  }
  override connect(signer: Signer): TestClaim__factory {
    return super.connect(signer) as TestClaim__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestClaimInterface {
    return new utils.Interface(_abi) as TestClaimInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): TestClaim {
    return new Contract(address, _abi, signerOrProvider) as TestClaim;
  }
}
