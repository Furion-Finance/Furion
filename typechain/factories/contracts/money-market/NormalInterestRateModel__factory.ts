/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { BigNumberish, Contract, ContractFactory, Overrides, Signer, utils } from "ethers";

import type { PromiseOrValue } from "../../../common";
import type {
  NormalInterestRateModel,
  NormalInterestRateModelInterface,
} from "../../../contracts/money-market/NormalInterestRateModel";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_baseRatePerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_multiplierPerYear",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "baseRatePerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "multiplierPerBlock",
        type: "uint256",
      },
    ],
    name: "NewInterestParams",
    type: "event",
  },
  {
    inputs: [],
    name: "IS_INTEREST_RATE_MODEL",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseRatePerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "blocksPerYear",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_reserves",
        type: "uint256",
      },
    ],
    name: "getBorrowRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_reserves",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_reserveFactorMantissa",
        type: "uint256",
      },
    ],
    name: "getSupplyRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isInterestRateModel",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "multiplierPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_reserves",
        type: "uint256",
      },
    ],
    name: "utilizationRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516103ff3803806103ff83398101604081905261002f91610099565b61003c62201480836100bd565b60015561004c62201480826100bd565b60008190556001546040517ff35fa19c15e9ba782633a5df62a98b20217151addc68e3ff2cd623a48d37ec279261008a928252602082015260400190565b60405180910390a150506100df565b600080604083850312156100ac57600080fd5b505080516020909101519092909150565b6000826100da57634e487b7160e01b600052601260045260246000fd5b500490565b610311806100ee6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638726bb891161005b5780638726bb89146100e1578063a385fb96146100ea578063b8168816146100f4578063f14039de1461010757600080fd5b806315f240531461008d5780632191f92a146100b35780632fcda258146100c65780636e71e2d8146100ce575b600080fd5b6100a061009b366004610220565b610110565b6040519081526020015b60405180910390f35b60015b60405190151581526020016100aa565b6100b6600181565b6100a06100dc366004610220565b610159565b6100a060005481565b6100a06220148081565b6100a061010236600461024c565b6101a4565b6100a060015481565b60008061011e858585610159565b9050600154670de0b6b3a76400006000548361013a9190610294565b61014491906102b3565b61014e91906102d5565b9150505b9392505050565b60008260000361016b57506000610152565b8161017684866102d5565b61018091906102ed565b610192670de0b6b3a764000085610294565b61019c91906102b3565b949350505050565b6000806101b983670de0b6b3a76400006102ed565b905060006101c8878787610110565b90506000670de0b6b3a76400006101df8484610294565b6101e991906102b3565b9050670de0b6b3a7640000816102008a8a8a610159565b61020a9190610294565b61021491906102b3565b98975050505050505050565b60008060006060848603121561023557600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561026257600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156102ae576102ae61027e565b500290565b6000826102d057634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156102e8576102e861027e565b500190565b6000828210156102ff576102ff61027e565b50039056fea164736f6c634300080d000a";

type NormalInterestRateModelConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NormalInterestRateModelConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NormalInterestRateModel__factory extends ContractFactory {
  constructor(...args: NormalInterestRateModelConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _baseRatePerYear: PromiseOrValue<BigNumberish>,
    _multiplierPerYear: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<NormalInterestRateModel> {
    return super.deploy(_baseRatePerYear, _multiplierPerYear, overrides || {}) as Promise<NormalInterestRateModel>;
  }
  override getDeployTransaction(
    _baseRatePerYear: PromiseOrValue<BigNumberish>,
    _multiplierPerYear: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_baseRatePerYear, _multiplierPerYear, overrides || {});
  }
  override attach(address: string): NormalInterestRateModel {
    return super.attach(address) as NormalInterestRateModel;
  }
  override connect(signer: Signer): NormalInterestRateModel__factory {
    return super.connect(signer) as NormalInterestRateModel__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NormalInterestRateModelInterface {
    return new utils.Interface(_abi) as NormalInterestRateModelInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): NormalInterestRateModel {
    return new Contract(address, _abi, signerOrProvider) as NormalInterestRateModel;
  }
}
