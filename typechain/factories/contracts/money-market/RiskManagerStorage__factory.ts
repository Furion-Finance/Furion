/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";

import type { PromiseOrValue } from "../../../common";
import type {
  RiskManagerStorage,
  RiskManagerStorageInterface,
} from "../../../contracts/money-market/RiskManagerStorage";

const _abi = [
  {
    inputs: [],
    name: "IS_RISK_MANAGER",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_borrowGuardianPaused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_supplyGuardianPaused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "borrowGuardianPaused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "closeFactorMantissa",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "liquidatableTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "markets",
    outputs: [
      {
        internalType: "bool",
        name: "isListed",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "collateralFactorMantissa",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tier",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "marketsEntered",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "contract IPriceOracle",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pauseGuardian",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "seizeGuardianPaused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "supplyGuardianPaused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "transferGuardianPaused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "veToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103c0806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638e8f294b11610097578063e6653f3d11610066578063e6653f3d146102a3578063e8755446146102c9578063eeffd25e146102e0578063f851a4401461030057600080fd5b80638e8f294b146101e35780639665ce0b14610233578063ac0b0bb714610258578063db09e0d11461028057600080fd5b8063441fd1cb116100d3578063441fd1cb1461016e5780636d154ea5146101865780637dc0d1d0146101a957806387f76303146101bc57600080fd5b80630efaae411461010557806324a3d6221461013557806326782247146101485780633b92eb231461015b575b600080fd5b610118610113366004610367565b610313565b6040516001600160a01b0390911681526020015b60405180910390f35b600854610118906001600160a01b031681565b600154610118906001600160a01b031681565b600254610118906001600160a01b031681565b610176600181565b604051901515815260200161012c565b610176610194366004610391565b600a6020526000908152604090205460ff1681565b600354610118906001600160a01b031681565b60085461017690760100000000000000000000000000000000000000000000900460ff1681565b6102166101f1366004610391565b60066020526000908152604090208054600182015460039092015460ff909116919083565b60408051931515845260208401929092529082015260600161012c565b6008546101769074010000000000000000000000000000000000000000900460ff1681565b6008546101769077010000000000000000000000000000000000000000000000900460ff1681565b61017661028e366004610391565b60096020526000908152604090205460ff1681565b600854610176907501000000000000000000000000000000000000000000900460ff1681565b6102d260045481565b60405190815260200161012c565b6102d26102ee366004610391565b600b6020526000908152604090205481565b600054610118906001600160a01b031681565b6005602052816000526040600020818154811061032f57600080fd5b6000918252602090912001546001600160a01b03169150829050565b80356001600160a01b038116811461036257600080fd5b919050565b6000806040838503121561037a57600080fd5b6103838361034b565b946020939093013593505050565b6000602082840312156103a357600080fd5b6103ac8261034b565b939250505056fea164736f6c634300080d000a";

type RiskManagerStorageConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: RiskManagerStorageConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class RiskManagerStorage__factory extends ContractFactory {
  constructor(...args: RiskManagerStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<RiskManagerStorage> {
    return super.deploy(overrides || {}) as Promise<RiskManagerStorage>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RiskManagerStorage {
    return super.attach(address) as RiskManagerStorage;
  }
  override connect(signer: Signer): RiskManagerStorage__factory {
    return super.connect(signer) as RiskManagerStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RiskManagerStorageInterface {
    return new utils.Interface(_abi) as RiskManagerStorageInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): RiskManagerStorage {
    return new Contract(address, _abi, signerOrProvider) as RiskManagerStorage;
  }
}
