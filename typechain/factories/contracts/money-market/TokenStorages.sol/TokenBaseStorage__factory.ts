/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";

import type { PromiseOrValue } from "../../../../common";
import type {
  TokenBaseStorage,
  TokenBaseStorageInterface,
} from "../../../../contracts/money-market/TokenStorages.sol/TokenBaseStorage";

const _abi = [
  {
    inputs: [],
    name: "IS_FTOKEN",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "borrowIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checker",
    outputs: [
      {
        internalType: "contract IChecker",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "interestRateModel",
    outputs: [
      {
        internalType: "contract IInterestRateModel",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastAccrualBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "liquidationProtection",
    outputs: [
      {
        internalType: "address",
        name: "borrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "liquidator",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "value",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "tokenSeized",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "contract IPriceOracle",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolSeizeShareMantissa",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reserveFactorMantissa",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "riskManager",
    outputs: [
      {
        internalType: "contract IRiskManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalBorrows",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalCash",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102bd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636752e70211610097578063bee12d5311610066578063bee12d5314610255578063cf5303cf1461025e578063f3fdb15a14610271578063f851a4401461028457600080fd5b80636752e702146102275780637dc0d1d0146102305780638f840ddd14610243578063aa5af0fd1461024c57600080fd5b806326782247116100d35780632678224714610137578063478426631461016257806347bd37181461017557806362b595621461017e57600080fd5b8063173b9904146100fa5780631f46eaae14610116578063252e1a0b1461011f575b600080fd5b61010360075481565b6040519081526020015b60405180910390f35b61010360085481565b610127600181565b604051901515815260200161010d565b60055461014a906001600160a01b031681565b6040516001600160a01b03909116815260200161010d565b60005461014a906001600160a01b031681565b610103600b5481565b6101e461018c366004610297565b600f602052600090815260409020805460018201546002909201546001600160a01b0391821692909116906fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041684565b604080516001600160a01b0395861681529490931660208501526fffffffffffffffffffffffffffffffff9182169284019290925216606082015260800161010d565b610103600e5481565b60025461014a906001600160a01b031681565b610103600c5481565b61010360095481565b610103600a5481565b60035461014a906001600160a01b031681565b60015461014a906001600160a01b031681565b60045461014a906001600160a01b031681565b6000602082840312156102a957600080fd5b503591905056fea164736f6c634300080d000a";

type TokenBaseStorageConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: TokenBaseStorageConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class TokenBaseStorage__factory extends ContractFactory {
  constructor(...args: TokenBaseStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<TokenBaseStorage> {
    return super.deploy(overrides || {}) as Promise<TokenBaseStorage>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TokenBaseStorage {
    return super.attach(address) as TokenBaseStorage;
  }
  override connect(signer: Signer): TokenBaseStorage__factory {
    return super.connect(signer) as TokenBaseStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenBaseStorageInterface {
    return new utils.Interface(_abi) as TokenBaseStorageInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): TokenBaseStorage {
    return new Contract(address, _abi, signerOrProvider) as TokenBaseStorage;
  }
}
