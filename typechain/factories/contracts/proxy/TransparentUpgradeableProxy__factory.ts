/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { BytesLike, Contract, ContractFactory, PayableOverrides, Signer, utils } from "ethers";

import type { PromiseOrValue } from "../../../common";
import type {
  TransparentUpgradeableProxy,
  TransparentUpgradeableProxyInterface,
} from "../../../contracts/proxy/TransparentUpgradeableProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_logic",
        type: "address",
      },
      {
        internalType: "address",
        name: "admin_",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "admin_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "changeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "implementation_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405260405162000f0b38038062000f0b8339810160408190526200002691620004dd565b828162000036828260006200009a565b5062000066905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005bd565b60008051602062000ec483398151915214620000865762000086620005e3565b6200009182620000d7565b5050506200064c565b620000a58362000132565b600082511180620000b35750805b15620000d257620000d083836200017460201b6200023e1760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f62000102620001a3565b604080516001600160a01b03928316815291841660208301520160405180910390a16200012f81620001dc565b50565b6200013d8162000291565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200019c838360405180606001604052806027815260200162000ee46027913962000345565b9392505050565b6000620001cd60008051602062000ec483398151915260001b6200042b60201b620001fa1760201c565b546001600160a01b0316919050565b6001600160a01b038116620002475760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b806200027060008051602062000ec483398151915260001b6200042b60201b620001fa1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b620002a7816200042e60201b6200026a1760201c565b6200030b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200023e565b80620002707f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6200042b60201b620001fa1760201c565b60606001600160a01b0384163b620003af5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200023e565b600080856001600160a01b031685604051620003cc9190620005f9565b600060405180830381855af49150503d806000811462000409576040519150601f19603f3d011682016040523d82523d6000602084013e6200040e565b606091505b509092509050620004218282866200043d565b9695505050505050565b90565b6001600160a01b03163b151590565b606083156200044e5750816200019c565b8251156200045f5782518084602001fd5b8160405162461bcd60e51b81526004016200023e919062000617565b80516001600160a01b03811681146200049357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004cb578181015183820152602001620004b1565b83811115620000d05750506000910152565b600080600060608486031215620004f357600080fd5b620004fe846200047b565b92506200050e602085016200047b565b60408501519092506001600160401b03808211156200052c57600080fd5b818601915086601f8301126200054157600080fd5b81518181111562000556576200055662000498565b604051601f8201601f19908116603f0116810190838211818310171562000581576200058162000498565b816040528281528960208487010111156200059b57600080fd5b620005ae836020830160208801620004ae565b80955050505050509250925092565b600082821015620005de57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b600082516200060d818460208701620004ae565b9190910192915050565b602081526000825180602084015262000638816040850160208701620004ae565b601f01601f19169190910160400192915050565b610868806200065c6000396000f3fe60806040526004361061005e5760003560e01c80635c60da1b116100435780635c60da1b146100a85780638f283970146100d9578063f851a440146100f95761006d565b80633659cfe6146100755780634f1ef286146100955761006d565b3661006d5761006b61010e565b005b61006b61010e565b34801561008157600080fd5b5061006b61009036600461071b565b610128565b61006b6100a3366004610736565b610165565b3480156100b457600080fd5b506100bd6101cc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e557600080fd5b5061006b6100f436600461071b565b6101fd565b34801561010557600080fd5b506100bd61021d565b610116610279565b61012661012161030e565b610318565b565b61013061033c565b6001600160a01b0316330361015d5761015a8160405180602001604052806000815250600061036f565b50565b61015a61010e565b61016d61033c565b6001600160a01b031633036101c4576101bf8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061036f915050565b505050565b6101bf61010e565b60006101d661033c565b6001600160a01b031633036101f2576101ed61030e565b905090565b6101fa61010e565b90565b61020561033c565b6001600160a01b0316330361015d5761015a8161039a565b600061022761033c565b6001600160a01b031633036101f2576101ed61033c565b60606102638383604051806060016040528060278152602001610835602791396103ee565b9392505050565b6001600160a01b03163b151590565b61028161033c565b6001600160a01b031633036101265760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101ed6104e2565b3660008037600080366000845af43d6000803e808015610337573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103788361050a565b6000825111806103855750805b156101bf57610394838361023e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103c361033c565b604080516001600160a01b03928316815291841660208301520160405180910390a161015a8161054a565b60606001600160a01b0384163b61046d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610305565b600080856001600160a01b03168560405161048891906107e5565b600060405180830381855af49150503d80600081146104c3576040519150601f19603f3d011682016040523d82523d6000602084013e6104c8565b606091505b50915091506104d8828286610622565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610360565b6105138161065b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105c65760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610305565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b60608315610631575081610263565b8251156106415782518084602001fd5b8160405162461bcd60e51b81526004016103059190610801565b6001600160a01b0381163b6106d85760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610305565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105e9565b80356001600160a01b038116811461071657600080fd5b919050565b60006020828403121561072d57600080fd5b610263826106ff565b60008060006040848603121561074b57600080fd5b610754846106ff565b9250602084013567ffffffffffffffff8082111561077157600080fd5b818601915086601f83011261078557600080fd5b81358181111561079457600080fd5b8760208285010111156107a657600080fd5b6020830194508093505050509250925092565b60005b838110156107d45781810151838201526020016107bc565b838111156103945750506000910152565b600082516107f78184602087016107b9565b9190910192915050565b60208152600082518060208401526108208160408501602087016107b9565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080d000ab53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564";

type TransparentUpgradeableProxyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TransparentUpgradeableProxyConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TransparentUpgradeableProxy__factory extends ContractFactory {
  constructor(...args: TransparentUpgradeableProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _logic: PromiseOrValue<string>,
    admin_: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<TransparentUpgradeableProxy> {
    return super.deploy(_logic, admin_, _data, overrides || {}) as Promise<TransparentUpgradeableProxy>;
  }
  override getDeployTransaction(
    _logic: PromiseOrValue<string>,
    admin_: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_logic, admin_, _data, overrides || {});
  }
  override attach(address: string): TransparentUpgradeableProxy {
    return super.attach(address) as TransparentUpgradeableProxy;
  }
  override connect(signer: Signer): TransparentUpgradeableProxy__factory {
    return super.connect(signer) as TransparentUpgradeableProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransparentUpgradeableProxyInterface {
    return new utils.Interface(_abi) as TransparentUpgradeableProxyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): TransparentUpgradeableProxy {
    return new Contract(address, _abi, signerOrProvider) as TransparentUpgradeableProxy;
  }
}
